
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ## ----setup, echo = FALSE, results = "hide", message = FALSE--------------
> set.seed(290875)
> 
> sapply(c("mlt", "survival", "eha", "prodlim", "truncreg", "lattice", "gridExtra",
+          "MASS", "nnet", "HSAUR3", "sandwich", "flexsurv", "grid", "latticeExtra", 
+          "colorspace", "multcomp"), library, char = TRUE)
Loading required package: basefun
Loading required package: variables
Loading required package: maxLik
Loading required package: miscTools

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/
Loading required package: tools

Attaching package: ‘flexsurv’

The following objects are masked from ‘package:eha’:

    dgompertz, dllogis, hgompertz, Hgompertz, hllogis, Hllogis, hlnorm,
    Hlnorm, hweibull, Hweibull, pgompertz, pllogis, qgompertz, qllogis,
    rgompertz, rllogis


Attaching package: ‘grid’

The following object is masked from ‘package:variables’:

    unit

Loading required package: RColorBrewer
Loading required package: mvtnorm
Loading required package: TH.data

Attaching package: ‘TH.data’

The following object is masked from ‘package:HSAUR3’:

    birds

The following object is masked from ‘package:MASS’:

    geyser

$mlt
 [1] "mlt"       "basefun"   "variables" "stats"     "graphics"  "grDevices"
 [7] "utils"     "datasets"  "methods"   "base"     

$survival
 [1] "survival"  "mlt"       "basefun"   "variables" "stats"     "graphics" 
 [7] "grDevices" "utils"     "datasets"  "methods"   "base"     

$eha
 [1] "eha"       "survival"  "mlt"       "basefun"   "variables" "stats"    
 [7] "graphics"  "grDevices" "utils"     "datasets"  "methods"   "base"     

$prodlim
 [1] "prodlim"   "eha"       "survival"  "mlt"       "basefun"   "variables"
 [7] "stats"     "graphics"  "grDevices" "utils"     "datasets"  "methods"  
[13] "base"     

$truncreg
 [1] "truncreg"  "maxLik"    "miscTools" "prodlim"   "eha"       "survival" 
 [7] "mlt"       "basefun"   "variables" "stats"     "graphics"  "grDevices"
[13] "utils"     "datasets"  "methods"   "base"     

$lattice
 [1] "lattice"   "truncreg"  "maxLik"    "miscTools" "prodlim"   "eha"      
 [7] "survival"  "mlt"       "basefun"   "variables" "stats"     "graphics" 
[13] "grDevices" "utils"     "datasets"  "methods"   "base"     

$gridExtra
 [1] "gridExtra" "lattice"   "truncreg"  "maxLik"    "miscTools" "prodlim"  
 [7] "eha"       "survival"  "mlt"       "basefun"   "variables" "stats"    
[13] "graphics"  "grDevices" "utils"     "datasets"  "methods"   "base"     

$MASS
 [1] "MASS"      "gridExtra" "lattice"   "truncreg"  "maxLik"    "miscTools"
 [7] "prodlim"   "eha"       "survival"  "mlt"       "basefun"   "variables"
[13] "stats"     "graphics"  "grDevices" "utils"     "datasets"  "methods"  
[19] "base"     

$nnet
 [1] "nnet"      "MASS"      "gridExtra" "lattice"   "truncreg"  "maxLik"   
 [7] "miscTools" "prodlim"   "eha"       "survival"  "mlt"       "basefun"  
[13] "variables" "stats"     "graphics"  "grDevices" "utils"     "datasets" 
[19] "methods"   "base"     

$HSAUR3
 [1] "HSAUR3"    "tools"     "nnet"      "MASS"      "gridExtra" "lattice"  
 [7] "truncreg"  "maxLik"    "miscTools" "prodlim"   "eha"       "survival" 
[13] "mlt"       "basefun"   "variables" "stats"     "graphics"  "grDevices"
[19] "utils"     "datasets"  "methods"   "base"     

$sandwich
 [1] "sandwich"  "HSAUR3"    "tools"     "nnet"      "MASS"      "gridExtra"
 [7] "lattice"   "truncreg"  "maxLik"    "miscTools" "prodlim"   "eha"      
[13] "survival"  "mlt"       "basefun"   "variables" "stats"     "graphics" 
[19] "grDevices" "utils"     "datasets"  "methods"   "base"     

$flexsurv
 [1] "flexsurv"  "sandwich"  "HSAUR3"    "tools"     "nnet"      "MASS"     
 [7] "gridExtra" "lattice"   "truncreg"  "maxLik"    "miscTools" "prodlim"  
[13] "eha"       "survival"  "mlt"       "basefun"   "variables" "stats"    
[19] "graphics"  "grDevices" "utils"     "datasets"  "methods"   "base"     

$grid
 [1] "grid"      "flexsurv"  "sandwich"  "HSAUR3"    "tools"     "nnet"     
 [7] "MASS"      "gridExtra" "lattice"   "truncreg"  "maxLik"    "miscTools"
[13] "prodlim"   "eha"       "survival"  "mlt"       "basefun"   "variables"
[19] "stats"     "graphics"  "grDevices" "utils"     "datasets"  "methods"  
[25] "base"     

$latticeExtra
 [1] "latticeExtra" "RColorBrewer" "grid"         "flexsurv"     "sandwich"    
 [6] "HSAUR3"       "tools"        "nnet"         "MASS"         "gridExtra"   
[11] "lattice"      "truncreg"     "maxLik"       "miscTools"    "prodlim"     
[16] "eha"          "survival"     "mlt"          "basefun"      "variables"   
[21] "stats"        "graphics"     "grDevices"    "utils"        "datasets"    
[26] "methods"      "base"        

$colorspace
 [1] "colorspace"   "latticeExtra" "RColorBrewer" "grid"         "flexsurv"    
 [6] "sandwich"     "HSAUR3"       "tools"        "nnet"         "MASS"        
[11] "gridExtra"    "lattice"      "truncreg"     "maxLik"       "miscTools"   
[16] "prodlim"      "eha"          "survival"     "mlt"          "basefun"     
[21] "variables"    "stats"        "graphics"     "grDevices"    "utils"       
[26] "datasets"     "methods"      "base"        

$multcomp
 [1] "multcomp"     "TH.data"      "mvtnorm"      "colorspace"   "latticeExtra"
 [6] "RColorBrewer" "grid"         "flexsurv"     "sandwich"     "HSAUR3"      
[11] "tools"        "nnet"         "MASS"         "gridExtra"    "lattice"     
[16] "truncreg"     "maxLik"       "miscTools"    "prodlim"      "eha"         
[21] "survival"     "mlt"          "basefun"      "variables"    "stats"       
[26] "graphics"     "grDevices"    "utils"        "datasets"     "methods"     
[31] "base"        

> 
> if (!file.exists("analysis/DVC.rda")) {
+     download.file("https://zenodo.org/record/17179/files/DVC.tgz", "DVC.tgz")
+     untar("DVC.tgz", file = "analysis/DVC.rda", compressed = "gzip")
+ }
> load("analysis/DVC.rda")
> dvc <- c(margin.table(obs, 2))
> 
> logLik.phreg <- function(object) {
+     ret <- object$loglik[2]
+     attr(ret, "df") <- length(coef(object))
+     class(ret) <- "logLik"
+     ret
+ }
> vcov.phreg <- function(object) object$var
> 
> trellis.par.set(list(plot.symbol = list(col=1,pch=20, cex=0.7),
+                      box.rectangle = list(col=1),
+                      box.umbrella = list(lty=1, col=1),
+                      strip.background = list(col = "white")))
Warning message:
In trellis.par.set(list(plot.symbol = list(col = 1, pch = 20, cex = 0.7),  :
  Note: The default device has been opened to honour attempt to modify trellis settings
> ltheme <- canonical.theme(color = FALSE)     ## in-built B&W theme
> ltheme$strip.background$col <- "transparent" ## change strip bg
> lattice.options(default.theme = ltheme)
> 
> knitr::opts_chunk$set(echo = TRUE, results = 'markup', error = FALSE,
+                       warning = FALSE, message = FALSE,
+                       tidy = FALSE, cache = FALSE, size = "small",
+                       fig.width = 6, fig.height = 4, fig.align = "center",
+                       out.width = NULL, ###'.6\\linewidth', 
+                       out.height = NULL,
+                       fig.scap = NA)
> knitr::render_sweave()  # use Sweave environments
> knitr::set_header(highlight = '')  # do not \usepackage{Sweave}
> ## R settings
> options(prompt = "R> ", continue = "+  ", useFancyQuotes = FALSE)  # JSS style
R> options(width = 75)
R> 
R> ## ----citation, echo = FALSE----------------------------------------------
R> year <- substr(packageDescription("mlt.docreg")$Date, 1, 4)
R> version <- packageDescription("mlt.docreg")$Version
R> 
R> ## ----geyser-var, echo = TRUE---------------------------------------------
R> library("mlt")
R> var_d <- numeric_var("duration", support = c(1.0, 5.0), 
+                       add = c(-1, 1), bounds = c(0, Inf))
R> 
R> ## ----geyser-basis, echo = TRUE-------------------------------------------
R> B_d <- Bernstein_basis(var = var_d, order = 8, ui = "increasing")
R> 
R> ## ----geyser-ctm, echo = TRUE---------------------------------------------
R> ctm_d <- ctm(response = B_d, todistr = "Normal")
R> 
R> ## ----geyser-grid, echo = TRUE--------------------------------------------
R> str(nd_d <- mkgrid(ctm_d, 200))
List of 1
 $ duration: num [1:200] 0 0.0302 0.0603 0.0905 0.1206 ...
R> 
R> ## ----geyser-data, echo = TRUE--------------------------------------------
R> data("geyser", package = "TH.data")
R> head(geyser)
  waiting        duration
1      80        4.016667
2      71        2.150000
3      57 [4.000000, Inf]
4      80 [4.000000, Inf]
5      75 [4.000000, Inf]
6      77 [0.000000,   2]
R> 
R> ## ----geyser-fit, echo = TRUE---------------------------------------------
R> mlt_d <- mlt(ctm_d, data = geyser)
R> logLik(mlt_d)
'log Lik.' -317.766 (df=9)
R> 
R> ## ----geyser-density, echo = TRUE-----------------------------------------
R> nd_d$d <- predict(mlt_d, newdata = nd_d, type = "density")
R> 
R> ## ----geyser-plot, echo = FALSE-------------------------------------------
R> plot(d ~ duration, data = nd_d, type = "l", ylab = "Density", xlab = "Duration time")
R> 
R> ## ----CHFLS-1-------------------------------------------------------------
R> data("CHFLS", package = "HSAUR3")
R> polr_CHFLS_1 <- polr(R_happy ~ 1, data = CHFLS)
R> 
R> ## ----CHFLS-1-basefun-----------------------------------------------------
R> nl <- nlevels(CHFLS$R_happy)
R> b_happy <- as.basis(~ R_happy, data = CHFLS, remove_intercept = TRUE,
+                      contrasts.arg = list(R_happy = function(n) 
+                          contr.treatment(n, base = nl)),
+                      ui = diff(diag(nl - 1)), ci = rep(0, nl - 2))
R> 
R> ## ----CHFLS-1-basefun-basis-----------------------------------------------
R> b_happy <- as.basis(CHFLS$R_happy)
R> 
R> ## ----CHFLS-1-ctm---------------------------------------------------------
R> ctm_CHFLS_1 <- ctm(response = b_happy, todist = "Logistic")
R> 
R> ## ----CHFLS-1-mlt---------------------------------------------------------
R> mlt_CHFLS_1 <- mlt(model = ctm_CHFLS_1, data = CHFLS)
R> 
R> ## ----CHFLS-1-cmpr--------------------------------------------------------
R> logLik(polr_CHFLS_1)
'log Lik.' -1328.241 (df=3)
R> logLik(mlt_CHFLS_1)
'log Lik.' -1328.241 (df=3)
R> cbind(polr = polr_CHFLS_1$zeta, mlt = coef(mlt_CHFLS_1))
                                  polr       mlt
Very unhappy|Not too happy   -4.687408 -4.687544
Not too happy|Somewhat happy -1.903382 -1.903378
Somewhat happy|Very happy     1.499304  1.499261
R> 
R> ## ----CHFLS-1-pred--------------------------------------------------------
R> predict(polr_CHFLS_1, newdata = data.frame(1), type = "prob")
  Very unhappy  Not too happy Somewhat happy     Very happy 
   0.009126466    0.120599751    0.687744449    0.182529334 
R> c(predict(mlt_CHFLS_1, newdata = data.frame(1), type = "density", 
+            q = mkgrid(b_happy)[[1]]))
[1] 0.00912524 0.12060135 0.68773768 0.18253574
R> xtabs(~ R_happy, data = CHFLS) / nrow(CHFLS)
R_happy
  Very unhappy  Not too happy Somewhat happy     Very happy 
   0.009126467    0.120599739    0.687744459    0.182529335 
R> 
R> ## ----geyser-w------------------------------------------------------------
R> var_w <- numeric_var("waiting", support = c(40.0, 100), add = c(-5, 15), 
+                       bounds = c(0, Inf))
R> c(sapply(nd_w <- mkgrid(var_w, 100), range))
[1]  35 115
R> 
R> ## ----geyser-bernstein----------------------------------------------------
R> B_w <- Bernstein_basis(var_w, order = 8, ui = "increasing")
R> 
R> ## ----geyser-w-ctm, echo = TRUE-------------------------------------------
R> ctm_w <- ctm(response = B_w, todistr = "Normal")
R> 
R> ## ----geyser-w-fit, echo = TRUE-------------------------------------------
R> mlt_w <- mlt(ctm_w, data = geyser)
R> 
R> ## ----geyser-w-distribution, echo = TRUE----------------------------------
R> nd_w$d <- predict(mlt_w, newdata = nd_w, type = "distribution")
R> 
R> ## ----geyser-w-plot, echo = FALSE-----------------------------------------
R> layout(matrix(1:2, ncol = 2))
R> plot(ecdf(geyser$waiting), col = "grey", xlab = "Waiting times", ylab = "Distribution", 
+       main = "", cex = .75)
R> lines(nd_w$waiting, nd_w$d)
R> B_w_40 <- Bernstein_basis(order = 40, var = var_w, ui = "incre")
R> ctm_w_40 <- ctm(B_w_40, todistr = "Normal")
R> mlt_w_40 <- mlt(ctm_w_40, data = geyser)
R> nd_w$d2 <- predict(mlt_w_40, q = nd_w$waiting, type = "distribution")
R> lines(nd_w$waiting, nd_w$d2, lty = 2)
R> legend("bottomright", lty = 1:2, legend = c("M = 8", "M = 40"), bty = "n")
R> plot(nd_w$waiting, predict(mlt_w, q = nd_w$waiting, type = "density"), type = "l",
+       ylim = c(0, .04), xlab = "Waiting times", ylab = "Density")
R> lines(nd_w$waiting, predict(mlt_w_40, q = nd_w$waiting, type = "density"), lty = 2)
R> rug(geyser$waiting, col = rgb(.1, .1, .1, .1))
R> 
R> ## ----dvc-----------------------------------------------------------------
R> var_dvc <- numeric_var("dvc", support = min(dvc):max(dvc))
R> B_dvc <- Bernstein_basis(var_dvc, order = 6, ui = "increasing")
R> dvc_mlt <- mlt(ctm(B_dvc), data = data.frame(dvc = dvc))
R> 
R> ## ----dvc-predict---------------------------------------------------------
R> q <- support(var_dvc)[[1]]
R> p <- predict(dvc_mlt, newdata = data.frame(1), q = q,
+               type = "distribution")
R> 
R> ## ----dvc-plot, echo = FALSE----------------------------------------------
R> plot(ecdf(dvc), col = "grey", xlab = "Number of Roe Deer-Vehicle Collisions",
+       ylab = "Distribution", main = "", cex = .75)
R> lines(q, p, col = "blue")
R> lines(q, ppois(q, lambda = mean(dvc)), col = "darkred")
R> legend(400, .3, pch = c(20, NA, NA), lty = c(NA, 1, 1), 
+         legend = c("ECDF", "Transformation Model", "Poisson"), bty = "n", cex = .8,
+         col = c("grey", "blue", "darkred"))
R> 
R> ## ----CHFLS-2, cache = TRUE-----------------------------------------------
R> polr_CHFLS_2 <- polr(R_happy ~ R_age + R_income, data = CHFLS)
R> 
R> ## ----CHFLS-2-base--------------------------------------------------------
R> b_R <- as.basis(~ R_age + R_income, data = CHFLS, remove_intercept = TRUE, 
+                  negative = TRUE)
R> 
R> ## ----CHFLS-2-ctm---------------------------------------------------------
R> ctm_CHFLS_2 <- ctm(response = b_happy, shifting = b_R, 
+                     todistr = "Logistic")
R> mlt_CHFLS_2 <- mlt(ctm_CHFLS_2, data = CHFLS, scale = TRUE)
R> 
R> ## ----CHFLS-2-cmpr--------------------------------------------------------
R> logLik(polr_CHFLS_2)
'log Lik.' -1322.021 (df=5)
R> logLik(mlt_CHFLS_2)
'log Lik.' -1322.021 (df=5)
R> cbind(polr = c(polr_CHFLS_2$zeta, coef(polr_CHFLS_2)), 
+        mlt = coef(mlt_CHFLS_2))
                                     polr           mlt
Very unhappy|Not too happy   -4.801592360 -4.8016007890
Not too happy|Somewhat happy -2.011695585 -2.0117558752
Somewhat happy|Very happy     1.412707129  1.4126490150
R_age                        -0.006278962 -0.0062807722
R_income                      0.000235009  0.0002350172
R> 
R> ## ----GBSG2-1, echo = TRUE------------------------------------------------
R> data("GBSG2", package = "TH.data")
R> GBSG2y <- numeric_var("y", support = c(100.0, max(GBSG2$time)), 
+                        bounds = c(0, Inf))
R> GBSG2$y <- with(GBSG2, Surv(time, cens))
R> 
R> ## ----GBSG2-1-Cox---------------------------------------------------------
R> B_GBSG2y <- Bernstein_basis(var = GBSG2y, order = 10, ui = "increasing")
R> fm_GBSG2 <- Surv(time, cens) ~ horTh + age + menostat + tsize + tgrade +
+                                 pnodes + progrec + estrec
R> ctm_GBSG2_1 <- ctm(B_GBSG2y, shifting = fm_GBSG2[-2L], data = GBSG2,
+                     todistr = "MinExtrVal")
R> 
R> ## ----GBSG2-1-xbasis, eval = FALSE----------------------------------------
R> ## as.basis(fm_GBSG2[-2L], data = GBSG2, remove_intercept = TRUE)
R> 
R> ## ----GBSG2-1-mlt---------------------------------------------------------
R> mlt_GBSG2_1 <- mlt(ctm_GBSG2_1, data = GBSG2, scale = TRUE)
R> 
R> ## ----GBSG2-1-coxph-------------------------------------------------------
R> coxph_GBSG2_1 <- coxph(fm_GBSG2, data = GBSG2, ties = "breslow")
R> cf <- coef(coxph_GBSG2_1)
R> cbind(coxph = cf, mlt = coef(mlt_GBSG2_1)[names(cf)])
                     coxph          mlt
horThyes     -0.3462416209 -0.348707936
age          -0.0094534071 -0.009932002
menostatPost  0.2581565452  0.267642672
tsize         0.0077983290  0.007765951
tgrade.L      0.5510838051  0.560223057
tgrade.Q     -0.2011060204 -0.201942423
pnodes        0.0487818043  0.048761983
progrec      -0.0022174942 -0.002210539
estrec        0.0001978178  0.000182990
R> 
R> ## ----GBSG2-coxph_mlt, echo = FALSE, results = "hide", cache = TRUE-------
R> ndtmp <- as.data.frame(mkgrid(GBSG2y, 100))
R> 
R> ord <- c(1:30, 35, 40, 45, 50)
R> p <- vector(mode = "list", length = length(ord))
R> CF <- c()
R> ll <- numeric(length(ord))
R> tm <- numeric(length(ord))
R> 
R> for (i in 1:length(ord)) {
+      print(i)
+      B_GBSG2ytmp <- Bernstein_basis(var = GBSG2y, order = ord[i], ui = "increasing")
+      ctmi <- ctm(B_GBSG2ytmp, shifting = fm_GBSG2[-2L], data = GBSG2,
+                     todistr = "MinExtrVal")
+      tm[i] <- system.time(mlti <- mlt(ctmi, data = GBSG2, scale = TRUE))[1]
+  
+      ll[i] <- logLik(mlti)
+      p[[i]] <- predict(mlti, newdata = ndtmp, type = "trafo", terms = "bresponse")
+  
+      cf <- coef(mlti)
+      cf <- cf[-grep("Bs", names(cf))]
+      CF <- rbind(CF, cf)
+  }
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 29
[1] 30
[1] 31
[1] 32
[1] 33
[1] 34
R> colnames(CF) <- names(cf)
R> 
R> of <- model.matrix(coxph_GBSG2_1) %*% coef(coxph_GBSG2_1) 
R> coxphtmp <- coxph(Surv(time, cens) ~ 1  + offset(of), data = GBSG2)
R> b <- survfit(coxphtmp)
R> layout(matrix(1:2, nc = 2))
R> col <- rgb(.1, .1, .1, .1)
R> ylim <- range(unlist(p))
R> plot(ndtmp$y, p[[1]], type = "l", ylim =  ylim, col = col, xlab = "Survival Time (days)",
+       ylab = "Log Cumulative Hazard")
R> out <- sapply(p, function(y) lines(ndtmp$y, y, col = col))
R> lines(b$time, log(b$cumhaz), col = "red")
R> 
R> ylim <- range(CF)
R> plot(ord, CF[,1], ylim = ylim, col = col[1], xlab = "Order M",
+       ylab = "Coefficients", type = "n")
R> for (i in 1:ncol(CF)) {
+      points(ord, CF[,i], cex = .5, pch = 19)
+      abline(h = coef(coxph_GBSG2_1)[i], col = "darkgrey")
+  }
R> # text(20, coef(coxph_GBSG2_1) + .1, names(coef(coxph_GBSG2_1)))
R> 
R> ## ----GBSG2-1-fss, cache = TRUE-------------------------------------------
R> fss_GBSG2_1 <- flexsurvspline(fm_GBSG2, data = GBSG2, scale = "hazard", 
+                                k = 9, bknots = log(support(GBSG2y)$y))
R> logLik(fss_GBSG2_1)
'log Lik.' -2555.856 (df=20)
R> logLik(mlt_GBSG2_1)
'log Lik.' -2559.151 (df=20)
R> cf <- coef(coxph_GBSG2_1)
R> cbind(coxph = cf, mlt = coef(mlt_GBSG2_1)[names(cf)],
+        fss = coef(fss_GBSG2_1)[names(cf)])
                     coxph          mlt           fss
horThyes     -0.3462416209 -0.348707936 -0.3473363301
age          -0.0094534071 -0.009932002 -0.0097895840
menostatPost  0.2581565452  0.267642672  0.2672204934
tsize         0.0077983290  0.007765951  0.0079051626
tgrade.L      0.5510838051  0.560223057  0.5554284914
tgrade.Q     -0.2011060204 -0.201942423 -0.2078499591
pnodes        0.0487818043  0.048761983  0.0485933664
progrec      -0.0022174942 -0.002210539 -0.0022112350
estrec        0.0001978178  0.000182990  0.0001891311
R> 
R> ## ----GBSG2-1-fss-plot, echo = FALSE--------------------------------------
R> p1 <- summary(fss_GBSG2_1, newdata = GBSG2[1,], ci = FALSE)
R> p2 <- predict(mlt_GBSG2_1, newdata = GBSG2[1, all.vars(fm_GBSG2[-2L])], 
+                q = p1[[1]]$time, type = "survivor")
R> plot(p1[[1]]$time, p1[[1]]$est, type = "l", lty = 1, xlab = "Survival Time (days)", 
+       ylab = "Probability", ylim = c(0, 1))
R> lines(p1[[1]]$time, p2[,1], lty = 2)
R> p3 <- survfit(coxph_GBSG2_1, newdata = GBSG2[1,])
R> lines(p3$time, p3$surv, lty = 3)
R> legend("topright", lty = 1:3, legend = c("flexsurvspline", "mlt", "coxph"), bty = "n")
R> 
R> ## ----GBSG2-2-------------------------------------------------------------
R> ly <- log_basis(GBSG2y, ui = "increasing")
R> ctm_GBSG2_2 <- ctm(ly, shifting = fm_GBSG2[-2L], data = GBSG2, 
+                     negative = TRUE, todistr = "MinExtrVal")
R> mlt_GBSG2_2 <- mlt(ctm_GBSG2_2, data = GBSG2, fixed = c("log(y)" = 1), 
+                     scale = TRUE)
R> 
R> ## ----GBSG2-2-exp---------------------------------------------------------
R> survreg_GBSG2_2 <- survreg(fm_GBSG2, data = GBSG2, dist = "exponential")
R> phreg_GBSG2_2 <- phreg(fm_GBSG2, data = GBSG2, dist = "weibull", shape = 1)
R> logLik(survreg_GBSG2_2)
'log Lik.' -2599.383 (df=10)
R> logLik(phreg_GBSG2_2)
'log Lik.' -2599.383 (df=10)
R> logLik(mlt_GBSG2_2)
'log Lik.' -2599.383 (df=10)
R> cbind(survreg = coef(survreg_GBSG2_2)[names(cf)], 
+        phreg = -coef(phreg_GBSG2_2)[names(cf)], 
+        mlt = coef(mlt_GBSG2_2)[names(cf)])
                   survreg         phreg           mlt
horThyes      0.3321617406  0.3321617406  0.3321614005
age           0.0094196671  0.0094196671  0.0094196280
menostatPost -0.2685358867 -0.2685358867 -0.2685364763
tsize        -0.0073179443 -0.0073179443 -0.0073180053
tgrade.L     -0.5193521191 -0.5193521191 -0.5193491789
tgrade.Q      0.2139217558  0.2139217558  0.2139210801
pnodes       -0.0461664688 -0.0461664688 -0.0461663602
progrec       0.0020670894  0.0020670894  0.0020671109
estrec       -0.0001788501 -0.0001788501 -0.0001788297
R> 
R> ## ----GBSG2-3-------------------------------------------------------------
R> mlt_GBSG2_3 <- mlt(ctm_GBSG2_2, data = GBSG2, scale = TRUE)
R> survreg_GBSG2_3 <- survreg(fm_GBSG2, data = GBSG2, dist = "weibull")
R> phreg_GBSG2_3 <- phreg(fm_GBSG2, data = GBSG2, dist = "weibull")
R> logLik(survreg_GBSG2_3)
'log Lik.' -2579.695 (df=11)
R> logLik(phreg_GBSG2_3)
'log Lik.' -2579.695 (df=11)
R> logLik(mlt_GBSG2_3)
'log Lik.' -2579.695 (df=11)
R> cbind(survreg = coef(survreg_GBSG2_3)[names(cf)] / survreg_GBSG2_3$scale, 
+        phreg = - coef(phreg_GBSG2_3)[names(cf)], 
+        mlt = coef(mlt_GBSG2_3)[names(cf)])
                   survreg         phreg           mlt
horThyes      0.3730909205  0.3730909205  0.3730890683
age           0.0094799262  0.0094799262  0.0094802554
menostatPost -0.2709027409 -0.2709027409 -0.2709161321
tsize        -0.0080149047 -0.0080149047 -0.0080152960
tgrade.L     -0.5727992624 -0.5727992624 -0.5727666451
tgrade.Q      0.2050597169  0.2050597169  0.2050384760
pnodes       -0.0528016503 -0.0528016503 -0.0528004271
progrec       0.0022848557  0.0022848557  0.0022847813
estrec       -0.0002484315 -0.0002484315 -0.0002483986
R> 
R> ## ----BostonHousing-lm----------------------------------------------------
R> data("BostonHousing2", package = "mlbench")
R> lm_BH <- lm(cmedv ~ crim + zn + indus + chas + nox + rm + age + dis + 
+              rad + tax + ptratio + b + lstat, data = BostonHousing2)
R> 
R> ## ----BostonHousing-mlt---------------------------------------------------
R> BostonHousing2$medvc <- with(BostonHousing2, Surv(cmedv, cmedv < 50))
R> var_m <- numeric_var("medvc", support = c(10.0, 40.0), bounds = c(0, Inf))
R> fm_BH <- medvc ~ crim + zn + indus + chas + nox + rm + age + 
+                   dis + rad + tax + ptratio + b + lstat
R> 
R> ## ----BostonHousing-ctm---------------------------------------------------
R> B_m <- Bernstein_basis(var_m, order = 6, ui = "increasing")
R> ctm_BH <- ctm(B_m, shift = fm_BH[-2L], data = BostonHousing2, 
+                todistr = "Normal")
R> mlt_BH <- mlt(ctm_BH, data = BostonHousing2, scale = TRUE)
R> 
R> ## ----BostonHousing-plot, echo = FALSE, results = "hide"------------------
R> q <- 3:52
R> m <- predict(lm_BH, data = BostonHousing2)
R> s <- summary(lm_BH)$sigma
R> d <- sapply(m, function(m) pnorm(q, mean = m, sd = s))
R> nd <- expand.grid(q = q, lp = m)
R> nd$d <- c(d)
R> 
R> pfun <- function(x, y, z, subscripts, at, ...) {
+      panel.contourplot(x, y, z, subscripts, at = 1:9/10, ...)
+      panel.xyplot(x = m, y = BostonHousing2$cmedv, pch = 20,   
+                   col = rgb(.1, .1, .1, .1),  ...)   
+  }
R> p1 <- contourplot(d ~ lp + q, data = nd, panel = pfun, 
+                    xlab = "Linear predictor", ylab = "Observed", 
+                    main = "Normal Linear Model")
R> 
R> d <- predict(mlt_BH, newdata = BostonHousing2, q = q, type="distribution")
R> lp <- c(predict(mlt_BH, newdata = BostonHousing2, q = 0, terms = "bshift"))
R> nd <- expand.grid(q = q, lp = -lp)
R> nd$d <- c(d)
R> pfun <- function(x, y, z, subscripts, at, ...) {
+      panel.contourplot(x, y, z, subscripts, at = 1:9/10, ...)
+      panel.xyplot(x = -lp, y = BostonHousing2$cmedv, pch = 20, 
+                   col = rgb(.1, .1, .1, .1), ...)   
+  }
R> p2 <- contourplot(d ~ lp + q, data = nd, panel = pfun, xlab = "Linear predictor", ylab = "Observed", main = "Linear Transformation Model")
R> grid.arrange(p1, p2, nrow = 1)
R> 
R> ## ----PSID1976------------------------------------------------------------
R> data("PSID1976", package = "AER")
R> PSID1976$nwincome <- with(PSID1976, (fincome - hours * wage)/1000)
R> PSID1976$hours <- as.double(PSID1976$hours)
R> PSID1976_0 <- subset(PSID1976, participation == "yes")
R> fm_PSID1976 <- hours ~ nwincome + education + experience + 
+                         I(experience^2) + age + youngkids + oldkids
R> 
R> ## ----PSID1976-truncreg---------------------------------------------------
R> tr_PSID1976 <- truncreg(fm_PSID1976, data = PSID1976_0)
R> 
R> ## ----PSID1976-mlt--------------------------------------------------------
R> PSID1976_0$hours <- R(PSID1976_0$hours, tleft = 0)
R> b_hours <- as.basis(~ hours, data = PSID1976, 
+                      ui = matrix(c(0, 1), nr  = 1), ci = 0)
R> ctm_PSID1976_1 <- ctm(b_hours, shift = fm_PSID1976[-2L], 
+                        data = PSID1976_0, todistr = "Normal") 
R> mlt_PSID1976_1 <- mlt(ctm_PSID1976_1, data = PSID1976_0, scale = TRUE)
R> 
R> ## ----PSID1976-cmpr-------------------------------------------------------
R> logLik(tr_PSID1976)
'log Lik.' -3391.478 (df=9)
R> logLik(mlt_PSID1976_1)
'log Lik.' -3390.648 (df=9)
R> cf <- coef(mlt_PSID1976_1)
R> cbind(truncreg = coef(tr_PSID1976),
+        mlt = c(-cf[-grep("hours", names(cf))], 1) / cf["hours"])
                    truncreg          mlt
(Intercept)     2055.7127740 2123.5661425
nwincome          -0.5011526    0.1536498
education        -31.2696497  -29.8512046
experience        73.0066075   72.6100938
I(experience^2)   -0.9695106   -0.9436354
age              -25.3359778  -27.4435844
youngkids       -318.8521247 -484.7014006
oldkids          -91.6195316 -102.6517073
sigma            822.4792934  850.7631886
R> 
R> ## ----PSID1976-mlt-ctm----------------------------------------------------
R> var_h <- numeric_var("hours", support = range(PSID1976_0$hours$exact),
+                       bounds = c(0, Inf))
R> B_hours <- Bernstein_basis(var_h, order = 6, ui = "increasing")
R> ctm_PSID1976_2 <- ctm(B_hours, shift = fm_PSID1976[-2L], 
+                        data = PSID1976_0, todistr = "Normal")
R> mlt_PSID1976_2 <- mlt(ctm_PSID1976_2, data = PSID1976_0, 
+                        scale = TRUE)
R> logLik(mlt_PSID1976_2)
'log Lik.' -3375.477 (df=14)
R> AIC(mlt_PSID1976_1)
[1] 6799.295
R> AIC(mlt_PSID1976_2)
[1] 6778.953
R> 
R> ## ----CHFLS-3, cache = TRUE-----------------------------------------------
R> b_health <- as.basis(~ R_health - 1, data = CHFLS)
R> ctm_CHFLS_3 <- ctm(b_happy, interacting = b_health, todist = "Logistic")
R> mlt_CHFLS_3 <- mlt(ctm_CHFLS_3, data = CHFLS, scale = TRUE)
R> logLik(mlt_CHFLS_3)
'log Lik.' -1192.226 (df=15)
R> predict(mlt_CHFLS_3, newdata = mkgrid(mlt_CHFLS_3), type = "distribution")
                R_health
R_happy               Poor   Not good        Fair        Good    Excellent
  Very unhappy   0.1999982 0.05035934 0.008676623 0.001718219 4.019721e-08
  Not too happy  0.6000123 0.38129503 0.154012410 0.073883591 7.602338e-02
  Somewhat happy 0.8999994 0.93525161 0.913232195 0.862542204 5.614046e-01
  Very happy     1.0000000 1.00000000 1.000000000 1.000000000 1.000000e+00
R> 
R> ## ----CHFLS-4, cache = TRUE-----------------------------------------------
R> ctm_CHFLS_4 <- ctm(b_happy, interacting = b_health, shifting = b_R, 
+                     todist = "Logistic")
R> mlt_CHFLS_4 <- mlt(ctm_CHFLS_4, data = CHFLS, scale = TRUE)
R> coef(mlt_CHFLS_4)[c("R_age", "R_income")]
       R_age     R_income 
0.0117382832 0.0002492679 
R> 
R> ## ----GBSG2-4-------------------------------------------------------------
R> b_horTh <- as.basis(GBSG2$horTh)
R> ctm_GBSG2_4 <- ctm(B_GBSG2y, interacting = b_horTh, 
+                     todistr = "MinExtrVal")
Note: method with signature 'dsparseMatrix#dsparseMatrix' chosen for function 'kronecker',
 target signature 'dgTMatrix#dgCMatrix'.
 "TsparseMatrix#sparseMatrix" would also be valid
R> mlt_GBSG2_4 <- mlt(ctm_GBSG2_4, data = GBSG2)
R> 
R> ## ----GBSG2-strata-plot, echo = FALSE, results = "hide"-------------------
R> nd <- expand.grid(s <- mkgrid(mlt_GBSG2_4, 100))
R> nd$mlt_S <- c(predict(mlt_GBSG2_4, newdata = s, type = "survivor"))
R> nd$KM_S <- unlist(predict(prodlim(Surv(time, cens) ~ horTh, data = GBSG2), 
+       	             newdata = data.frame(horTh = s$horTh), times = s$y))
R> plot(nd$y, nd$mlt_S, ylim = c(0, 1), xlab = "Survival time (days)",
+       ylab = "Probability", type = "n", las = 1)
R> with(subset(nd, horTh == "no"), lines(y, mlt_S, col = "grey", lty = 2))
R> with(subset(nd, horTh == "yes"), lines(y, mlt_S, lty = 2))
R> with(subset(nd, horTh == "no"), lines(y, KM_S, type = "s", col = "grey"))
R> with(subset(nd, horTh == "yes"), lines(y, KM_S, type = "s"))
R> legend(250, 0.4, lty = c(1, 1, 2, 2), col = c("black", "grey", "black", "grey"),
+         legend = c("hormonal therapy, KM", "no hormonal therapy, KM", 
+                    "hormonal therapy, MLT", "no hormonal therapy, MLT"), bty = "n", cex = .75)
R> 
R> ## ----GBSG2-5-------------------------------------------------------------
R> ctm_GBSG2_5 <- ctm(B_GBSG2y, interacting = b_horTh, shifting = ~ age, 
+                     data = GBSG2, todistr = "MinExtrVal")
R> mlt_GBSG2_5 <- mlt(ctm_GBSG2_5, data = GBSG2, scale = TRUE)
R> 
R> ## ----GBSG2-5-coxph-------------------------------------------------------
R> coxph_GBSG2_5 <- coxph(Surv(time, cens) ~ age + strata(horTh), 
+                         data = GBSG2)
R> cf <- coef(coxph_GBSG2_5)
R> cbind(coxph = cf, mlt = coef(mlt_GBSG2_5)[names(cf)])
            coxph          mlt
age -0.0003695703 -0.000464507
R> 
R> ## ----CHFLS-5, cache = TRUE-----------------------------------------------
R> contrasts(CHFLS$R_health) <- "contr.treatment"
R> b_health <- as.basis(~ R_health, data = CHFLS)
R> ctm_CHFLS_5 <- ctm(b_happy, interacting = b_health, todist = "Logistic")
R> mlt_CHFLS_5 <- mlt(ctm_CHFLS_5, data = CHFLS, scale = TRUE)
Warning messages:
1: contrasts dropped from factor R_health 
2: contrasts dropped from factor R_health 
3: contrasts dropped from factor R_health 
4: contrasts dropped from factor R_health 
R> predict(mlt_CHFLS_5, newdata = mkgrid(mlt_CHFLS_5), type = "distribution")
                R_health
R_happy               Poor   Not good        Fair        Good    Excellent
  Very unhappy   0.1998996 0.05039632 0.008665935 0.001721158 1.013586e-06
  Not too happy  0.5998795 0.38129624 0.153996989 0.073882498 7.602025e-02
  Somewhat happy 0.8997576 0.93522510 0.913243808 0.862559778 5.614392e-01
  Very happy     1.0000000 1.00000000 1.000000000 1.000000000 1.000000e+00
R> logLik(mlt_CHFLS_5)
'log Lik.' -1192.226 (df=15)
R> 
R> ## ----CHFLS-6, cache = TRUE-----------------------------------------------
R> b_R <- as.basis(~ R_age + R_income, data = CHFLS, remove_intercept = TRUE, 
+                  scale = TRUE)
R> ctm_CHFLS_6 <- ctm(b_happy, interacting = b_R, todist = "Logistic")  
R> mlt_CHFLS_6 <- mlt(ctm_CHFLS_6, data = CHFLS, scale = TRUE)
R> logLik(mlt_CHFLS_6)
'log Lik.' -1472.42 (df=6)
R> 
R> ## ----CHFLS-7, cache = TRUE-----------------------------------------------
R> ctm_CHFLS_7 <- ctm(b_happy, interacting = c(h = b_health, R = b_R), 
+      todist = "Logistic")  
Note: method with signature 'Matrix#diagonalMatrix' chosen for function 'kronecker',
 target signature 'dtCMatrix#ddiMatrix'.
 "sparseMatrix#ANY" would also be valid
Note: method with signature 'dsparseMatrix#dsparseMatrix' chosen for function 'kronecker',
 target signature 'dtCMatrix#dtTMatrix'.
 "sparseMatrix#TsparseMatrix" would also be valid
Note: method with signature 'Matrix#numLike' chosen for function '%*%',
 target signature 'dgTMatrix#numeric'.
 "TsparseMatrix#ANY" would also be valid
Note: method with signature 'sparseMatrix#matrix' chosen for function '%*%',
 target signature 'dgTMatrix#matrix'.
 "TsparseMatrix#ANY" would also be valid
R> mlt_CHFLS_7 <- mlt(ctm_CHFLS_7, data = CHFLS, scale = TRUE)
Warning messages:
1: contrasts dropped from factor R_health 
2: contrasts dropped from factor R_health 
3: contrasts dropped from factor R_health 
4: contrasts dropped from factor R_health 
R> logLik(mlt_CHFLS_7)
'log Lik.' -1182.779 (df=21)
R> 
R> ## ----CHFLS-AIC-----------------------------------------------------------
R> c("1" = AIC(mlt_CHFLS_1), "2" = AIC(mlt_CHFLS_2), "3" = AIC(mlt_CHFLS_3),
+    "4" = AIC(mlt_CHFLS_4), "5" = AIC(mlt_CHFLS_5), "6" = AIC(mlt_CHFLS_6),
+    "7" = AIC(mlt_CHFLS_7))
       1        2        3        4        5        6        7 
2662.483 2654.042 2414.451 2404.135 2414.452 2956.839 2407.557 
R> 
R> ## ----iris-1--------------------------------------------------------------
R> fm_iris <- Species ~ Sepal.Length + Sepal.Width + 
+                       Petal.Length + Petal.Width
R> multinom_iris <- nnet::multinom(fm_iris, data = iris, trace = FALSE)
R> logLik(multinom_iris)
'log Lik.' -5.949867 (df=10)
R> iris$oSpecies <- ordered(iris$Species)
R> b_Species <- as.basis(iris$oSpecies)
R> b_x <- as.basis(fm_iris[-2L], data = iris, scale = TRUE)
R> ctm_iris <- ctm(b_Species, interacting = b_x,
+                  todistr = "Logistic")
R> mlt_iris <- mlt(ctm_iris, data = iris, scale = TRUE)
R> logLik(mlt_iris)
'log Lik.' -5.95478 (df=10)
R> p1 <- predict(mlt_iris, newdata = iris, q = sort(unique(iris$oSpecies)), 
+                type = "density")
R> p2 <- predict(multinom_iris, newdata = iris, type = "prob")
R> max(abs(t(p1) - p2))
[1] 0.01222766
R> 
R> ## ----GBSG2-6-------------------------------------------------------------
R> ctm_GBSG2_6 <- ctm(B_GBSG2y, shifting = ~ horTh, data = GBSG2, 
+                     todistr = "MinExtrVal")
R> mlt_GBSG2_6 <- mlt(ctm_GBSG2_6, data = GBSG2)
R> logLik(mlt_GBSG2_6)
'log Lik.' -2607.361 (df=12)
R> AIC(mlt_GBSG2_6)
[1] 5238.722
R> 
R> ## ----GBSG2-7-------------------------------------------------------------
R> b_horTh <- as.basis(~ horTh, data = GBSG2)
R> ctm_GBSG2_7 <- ctm(B_GBSG2y, interacting = b_horTh, 
+                     todistr = "MinExtrVal")
R> nd <- data.frame(y = GBSG2$time[1:2], horTh = unique(GBSG2$horTh))
R> attr(model.matrix(ctm_GBSG2_7, data = nd), "constraint")
$ui
20 x 22 sparse Matrix of class "dgCMatrix"
                                                                     
 [1,] -1  1  .  .  .  .  .  .  .  . .  .  .  .  .  .  .  .  .  .  . .
 [2,]  . -1  1  .  .  .  .  .  .  . .  .  .  .  .  .  .  .  .  .  . .
 [3,]  .  . -1  1  .  .  .  .  .  . .  .  .  .  .  .  .  .  .  .  . .
 [4,]  .  .  . -1  1  .  .  .  .  . .  .  .  .  .  .  .  .  .  .  . .
 [5,]  .  .  .  . -1  1  .  .  .  . .  .  .  .  .  .  .  .  .  .  . .
 [6,]  .  .  .  .  . -1  1  .  .  . .  .  .  .  .  .  .  .  .  .  . .
 [7,]  .  .  .  .  .  . -1  1  .  . .  .  .  .  .  .  .  .  .  .  . .
 [8,]  .  .  .  .  .  .  . -1  1  . .  .  .  .  .  .  .  .  .  .  . .
 [9,]  .  .  .  .  .  .  .  . -1  1 .  .  .  .  .  .  .  .  .  .  . .
[10,]  .  .  .  .  .  .  .  .  . -1 1  .  .  .  .  .  .  .  .  .  . .
[11,] -1  1  .  .  .  .  .  .  .  . . -1  1  .  .  .  .  .  .  .  . .
[12,]  . -1  1  .  .  .  .  .  .  . .  . -1  1  .  .  .  .  .  .  . .
[13,]  .  . -1  1  .  .  .  .  .  . .  .  . -1  1  .  .  .  .  .  . .
[14,]  .  .  . -1  1  .  .  .  .  . .  .  .  . -1  1  .  .  .  .  . .
[15,]  .  .  .  . -1  1  .  .  .  . .  .  .  .  . -1  1  .  .  .  . .
[16,]  .  .  .  .  . -1  1  .  .  . .  .  .  .  .  . -1  1  .  .  . .
[17,]  .  .  .  .  .  . -1  1  .  . .  .  .  .  .  .  . -1  1  .  . .
[18,]  .  .  .  .  .  .  . -1  1  . .  .  .  .  .  .  .  . -1  1  . .
[19,]  .  .  .  .  .  .  .  . -1  1 .  .  .  .  .  .  .  .  . -1  1 .
[20,]  .  .  .  .  .  .  .  .  . -1 1  .  .  .  .  .  .  .  .  . -1 1

$ci
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0

R> mlt_GBSG2_7 <- mlt(ctm_GBSG2_7, data = GBSG2)
R> logLik(mlt_GBSG2_7)
'log Lik.' -2605.948 (df=22)
R> AIC(mlt_GBSG2_7)
[1] 5255.896
R> 
R> ## ----GBSG2-deviation-plot, echo = FALSE, results = "hide"----------------
R> 
R> s <- mkgrid(mlt_GBSG2_7, 15)
R> s$y <- s$y[s$y > 100 & s$y < 2400]
R> nd <- expand.grid(s)
R> K <- model.matrix(ctm_GBSG2_7, data = nd)
R> Kyes <- K[nd$horTh == "yes",]
R> Kyes[,grep("Intercept", colnames(K))] <- 0  
R> gh <- glht(parm(coef(mlt_GBSG2_7), vcov(mlt_GBSG2_7)), Kyes)
R> ci <- confint(gh)
R> coxy <- s$y
R> 
R> K <- matrix(0, nrow = 1, ncol = length(coef(mlt_GBSG2_6)))
R> K[,length(coef(mlt_GBSG2_6))] <- 1
R> ci2 <- confint(glht(mlt_GBSG2_6, K))
R> 
R> plot(coxy, ci$confint[, "Estimate"], ylim = range(ci$confint), type = "n",
+       xlab = "Survival time (days)", ylab = "Log-hazard ratio", las = 1)
R> polygon(c(coxy, rev(coxy)), c(ci$confint[,"lwr"], rev(ci$confint[, "upr"])),
+          border = NA, col = rgb(.1, .1, .1, .1))
R> lines(coxy, ci$confint[, "Estimate"], lty = 1, lwd = 1)
R> lines(coxy, rep(ci2$confint[,"Estimate"], length(coxy)), lty = 2, lwd = 1) 
R> lines(coxy, rep(0, length(coxy)), lty = 3)
R> polygon(c(coxy[c(1, length(coxy))], rev(coxy[c(1, length(coxy))])),
+          rep(ci2$confint[,c("lwr", "upr")], c(2, 2)),
+          border = NA, col = rgb(.1, .1, .1, .1))
R> legend("bottomright", lty = 1:2, lwd = 1, legend = c("time-varying log-hazard ratio",
+         "time-constant log-hazard ratio"), bty = "n", cex = .75)
R> 
R> ## ----GBSG2-8, echo = TRUE, cache = TRUE----------------------------------
R> var_a <- numeric_var("age", support = range(GBSG2$age))
R> B_age <- Bernstein_basis(var_a, order = 3)
R> b_horTh <- as.basis(GBSG2$horTh)
R> ctm_GBSG2_8 <- ctm(B_GBSG2y, 
+                     interacting = b(horTh = b_horTh, age = B_age), 
+                     todistr = "MinExtrVal")
Note: method with signature 'diagonalMatrix#Matrix' chosen for function 'kronecker',
 target signature 'ddiMatrix#ddiMatrix'.
 "Matrix#diagonalMatrix" would also be valid
Note: method with signature 'TsparseMatrix#sparseMatrix' chosen for function 'kronecker',
 target signature 'dtTMatrix#ddiMatrix'.
 "Matrix#diagonalMatrix" would also be valid
Note: method with signature 'diagonalMatrix#Matrix' chosen for function 'kronecker',
 target signature 'ddiMatrix#dgCMatrix'.
 "ANY#sparseMatrix" would also be valid
Note: method with signature 'dsparseMatrix#dsparseMatrix' chosen for function 'kronecker',
 target signature 'dtTMatrix#dgCMatrix'.
 "TsparseMatrix#sparseMatrix" would also be valid
Note: method with signature 'Matrix#diagonalMatrix' chosen for function 'kronecker',
 target signature 'dgCMatrix#ddiMatrix'.
 "sparseMatrix#ANY" would also be valid
Note: method with signature 'dsparseMatrix#dsparseMatrix' chosen for function 'kronecker',
 target signature 'dgCMatrix#dtTMatrix'.
 "sparseMatrix#TsparseMatrix" would also be valid
R> mlt_GBSG2_8  <- mlt(ctm_GBSG2_8, data = GBSG2)
R> logLik(mlt_GBSG2_8)
'log Lik.' -2588.784 (df=88)
R> AIC(mlt_GBSG2_8)
[1] 5353.569
R> 
R> ## ----GBSG2-8-plot, echo = FALSE------------------------------------------
R> nlev <- c(no = "without hormonal therapy", yes = "with hormonal therapy")
R> levels(nd$horTh) <- nlev[match(levels(nd$horTh), names(nlev))]
R> s <- mkgrid(mlt_GBSG2_8, 100)
R> nd <- expand.grid(s)
R> nd$s <- c(predict(mlt_GBSG2_8, newdata = s, type = "survivor"))
R> contourplot(s ~ age + y | horTh, data = nd, at = 1:9 / 10,
+              ylab = "Survival time (days)", xlab = "Age (years)",
+              scales = list(x = list(alternating = c(1, 1))))
R> 
R> ## ----head, echo = TRUE, cache = TRUE-------------------------------------
R> data("db", package = "gamlss.data")
R> db$lage <- with(db, age^(1/3))
R> var_head <- numeric_var("head", support = quantile(db$head, c(.1, .9)),
+                         bounds = range(db$head))
R> B_head <- Bernstein_basis(var_head, order = 3, ui = "increasing")
R> var_lage <- numeric_var("lage", support = quantile(db$lage, c(.1, .9)),
+                          bounds = range(db$lage))
R> B_age <- Bernstein_basis(var_lage, order = 3, ui = "none")
R> ctm_head <- ctm(B_head, interacting = B_age)
R> mlt_head <- mlt(ctm_head, data = db, scale = TRUE)
R> 
R> ## ----head-plot, echo = FALSE---------------------------------------------
R> pr <- expand.grid(s <- mkgrid(ctm_head, 100))
R> pr$p <- c(predict(mlt_head, newdata = s, type = "distribution"))
R> pr$lage <- pr$lage^3
R> pr$cut <- factor(pr$lage > 2.5)
R> levels(pr$cut) <- c("Age < 2.5 yrs", "Age > 2.5 yrs")
R> pfun <- function(x, y, z, subscripts, at, ...) {
+      panel.contourplot(x, y, z, subscripts,
+          at = c(0.4, 2, 10, 25, 50, 75, 90, 98, 99.6)/ 100, ...)
+      panel.xyplot(x = db$age, y = db$head, pch = 20,
+                   col = rgb(.1, .1, .1, .1), ...)
+  }
R> print(contourplot(p ~ lage + head | cut, data = pr, panel = pfun, region = FALSE,
+              xlab = "Age (years)", ylab = "Head circumference (cm)",
+              scales = list(x = list(relation = "free"))))
R> 
R> ## ----BostonHousing-dr-sumconstr, cache = TRUE----------------------------
R> b_BH_s <- as.basis(fm_BH[-2L], data = BostonHousing2, scale = TRUE)
R> ctm_BHi <- ctm(B_m, interacting = b_BH_s, sumconstr = TRUE)
R> mlt_BHi <- mlt(ctm_BHi, data = BostonHousing2)
R> logLik(mlt_BHi)
'log Lik.' -1224.453 (df=98)
R> AIC(mlt_BHi)
[1] 2644.905
R> 
R> ## ----BostonHousing-dr, cache = TRUE--------------------------------------
R> ctm_BHi2 <- ctm(B_m, interacting = b_BH_s, sumconstr = FALSE)
R> mlt_BHi2 <- mlt(ctm_BHi2, data = BostonHousing2)
R> logLik(mlt_BHi2)
'log Lik.' -1274.368 (df=98)
R> AIC(mlt_BHi2)
[1] 2744.736
R> 
R> ## ----Boston-Housing-dr-plot, echo = FALSE, fig.height = 3----------------
R> q <- mkgrid(var_m, 100)[[1]]
R> tr <- predict(mlt_BH, newdata = BostonHousing2[, all.vars(fm_BH[-2L])],
+                q = q, type = "density")
R> tri <- predict(mlt_BHi, newdata = BostonHousing2[, all.vars(fm_BH[-2L])],
+                q = q, type = "density")
R> tri2 <- predict(mlt_BHi2, newdata = BostonHousing2[, all.vars(fm_BH[-2L])],
+                q = q, type = "density")
R> layout(matrix(1:3, ncol = 3))
R> Q <- matrix(q, nrow = length(q), ncol = ncol(tr))
R> ylim <- range(c(tr, tri))
R> matplot(Q, tr, ylim = ylim, xlab = "Median Value", ylab = "Density",
+          type = "l", col = rgb(.1, .1, .1, .1), lty = 1, main = "mlt_BH") 
R> matplot(Q, tri, ylim = ylim, xlab = "Median Value", ylab = "Density",
+          type = "l", col = rgb(.1, .1, .1, .1), lty = 1, main = "mlt_BHi")
R> matplot(Q, tri2, ylim = ylim, xlab = "Median Value", ylab = "Density",
+          type = "l", col = rgb(.1, .1, .1, .1), lty = 1, main = "mlt_BHi2")
R> 
R> ## ----treepipit, echo = TRUE, cache = TRUE--------------------------------
R> data("treepipit", package = "coin")
R> treepipit$ocounts <- ordered(treepipit$counts)
R> B_cs <- Bernstein_basis(var = numeric_var("coverstorey", support = 1:110), 
+                          order = 4)
R> B_c <- as.basis(treepipit$ocounts)
R> ctm_treepipit <- ctm(B_c, interacting = B_cs)
R> mlt_treepipit <- mlt(ctm_treepipit, data = treepipit, scale = TRUE,
+                       optim = mltoptim()["spg"])
R> 
R> ## ----mgcv, echo = FALSE, results = "hide"--------------------------------
R> library("mgcv") ### masks nnet::multinom
Loading required package: nlme

Attaching package: 'nlme'

The following object is masked from 'package:mlt':

    coef<-

This is mgcv 1.8-17. For overview type 'help("mgcv-package")'.

Attaching package: 'mgcv'

The following object is masked from 'package:nnet':

    multinom

R> 
R> ## ----treepipit-gam-------------------------------------------------------
R> gam_treepipit <- gam(counts ~ s(coverstorey), data = treepipit, 
+                       family = "poisson")
R> 
R> ## ----treepipit-plot, echo = FALSE, fig.height = 3------------------------
R> s <- mkgrid(ctm_treepipit, 100)
R> s$ocounts <- s$ocounts[1:5]
R> nd <- expand.grid(s)
R> nd$p <- c(predict(mlt_treepipit, newdata = s, type = "distribution"))
R> 
R> ### produce a table
R> tpt <- xtabs(~ counts + coverstorey, data = treepipit)
R> 
R> ### construct a data frame with frequencies
R> treepipit2 <- sapply(as.data.frame(tpt, stringsAsFactors = FALSE),
+                       as.integer)
R> 
R> s <- mkgrid(ctm_treepipit, 10)
R> s$ocounts <- s$ocounts[1]
R> K <- model.matrix(ctm_treepipit, data = expand.grid(s))
R> #g <- glht(parm(coef(mod), vcov(mod)), linfct = K)
R> #confint(g)
R> nd$lambda <- predict(gam_treepipit, newdata = nd, type = "response")
R> 
R> layout(matrix(1:3, nr = 1))
R> par("mai" = par("mai") * c(1, .95, 1, .85))
R> xlim <- range(treepipit[, "coverstorey"]) * c(0.98, 1.05)
R> xlab <- "Cover storey"
R> ylab <- "Number of tree pipits (TP)"
R> ### scatterplot again; plots are proportional to number of plots
R> plot(counts ~ coverstorey, data = treepipit2, cex = sqrt(Freq),
+       ylim = c(-.5, 5), xlab = xlab, ylab = ylab, col = "darkgrey", 
+       xlim = xlim, las = 1, main = "Observations")
R> 
R> plot(c(0, 110), c(0, 1), type = "n", xlab = xlab, ylab = "Conditional probability",
+       xlim = xlim, las = 1, main = "MLT")
R> with(subset(nd, ocounts == "0"), lines(coverstorey, p, lty = 1))
R> with(subset(nd, ocounts == "1"), lines(coverstorey, p, lty = 2))
R> with(subset(nd, ocounts == "2"), lines(coverstorey, p, lty = 3))
R> with(subset(nd, ocounts == "3"), lines(coverstorey, p, lty = 4))
R> with(subset(nd, ocounts == "4"), lines(coverstorey, p, lty = 5))
R> abline(h = 1, lty = 6)
R> legend("bottomright", lty = 1:6, legend = c(expression(TP == 0),
+                                              expression(TP <= 1),
+                                              expression(TP <= 2),
+                                              expression(TP <= 3),
+                                              expression(TP <= 4),
+                                              expression(TP <= 5)), bty = "n")
R> 
R> plot(c(0, 110), c(0, 1), type = "n", xlab = xlab, ylab = "Conditional probability",
+       xlim = xlim, las = 1, main = "GAM")
R> with(subset(nd, ocounts == "0"), lines(coverstorey, ppois(0, lambda), lty = 1))
R> with(subset(nd, ocounts == "1"), lines(coverstorey, ppois(1, lambda), lty = 2))
R> with(subset(nd, ocounts == "2"), lines(coverstorey, ppois(2, lambda), lty = 3))
R> with(subset(nd, ocounts == "3"), lines(coverstorey, ppois(3, lambda), lty = 4))
R> with(subset(nd, ocounts == "4"), lines(coverstorey, ppois(4, lambda), lty = 5))
R> abline(h = 1, lty = 6)
R> 
R> ## ----CHFLS-2-cmpr-2------------------------------------------------------
R> max(abs(estfun(polr_CHFLS_2) - (-estfun(mlt_CHFLS_2)[,c(4, 5, 1:3)])))
[1] 0.151661
R> cbind(polr = sqrt(diag(vcov(polr_CHFLS_2))),
+        mlt = sqrt(diag(vcov(mlt_CHFLS_2)))[c(4, 5, 1:3)])

Re-fitting to get Hessian

                                     polr          mlt
R_age                        5.684041e-03 5.684460e-03
R_income                     8.509055e-05 7.099287e-05
Very unhappy|Not too happy   3.536235e-01 3.522621e-01
Not too happy|Somewhat happy 2.419643e-01 2.400507e-01
Somewhat happy|Very happy    2.372414e-01 2.354997e-01
R> cftest(polr_CHFLS_2)

Re-fitting to get Hessian


Re-fitting to get Hessian


	 Simultaneous Tests for General Linear Hypotheses

Fit: polr(formula = R_happy ~ R_age + R_income, data = CHFLS)

Linear Hypotheses:
                Estimate Std. Error z value Pr(>|z|)   
R_age == 0    -6.279e-03  5.684e-03  -1.105  0.26930   
R_income == 0  2.350e-04  8.509e-05   2.762  0.00575 **
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
(Univariate p values reported)

R> cftest(mlt_CHFLS_2, parm = names(coef(polr_CHFLS_2)))

	 Simultaneous Tests for General Linear Hypotheses

Fit: mlt(model = ctm_CHFLS_2, data = CHFLS, scale = TRUE)

Linear Hypotheses:
                Estimate Std. Error z value Pr(>|z|)    
R_age == 0    -6.281e-03  5.684e-03  -1.105 0.269202    
R_income == 0  2.350e-04  7.099e-05   3.310 0.000932 ***
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
(Univariate p values reported)

R> 
R> ## ----GBSG2-1-coxph-cmpr--------------------------------------------------
R> cf <- coef(coxph_GBSG2_1)
R> cbind(coxph = sqrt(diag(vcov(coxph_GBSG2_1))),
+        mlt = sqrt(diag(vcov(mlt_GBSG2_1)))[names(cf)],
+        fss = sqrt(diag(vcov(fss_GBSG2_1)))[names(cf)])
                    coxph          mlt          fss
horThyes     0.1290732771 0.1293733637 0.1290343235
age          0.0093002439 0.0093123274 0.0092899409
menostatPost 0.1834799825 0.1836804956 0.1833300012
tsize        0.0039390579 0.0039383332 0.0039372592
tgrade.L     0.1898442780 0.1898998037 0.1899068142
tgrade.Q     0.1219645723 0.1220197860 0.1220298327
pnodes       0.0074480015 0.0074150148 0.0074387203
progrec      0.0005734844 0.0005740091 0.0005553729
estrec       0.0004503673 0.0004515480 0.0004309581
R> 
R> ## ----GBSG2-1-coxph-cmpr-cftest-------------------------------------------
R> cftest(coxph_GBSG2_1)

	 Simultaneous Tests for General Linear Hypotheses

Fit: coxph(formula = fm_GBSG2, data = GBSG2, ties = "breslow")

Linear Hypotheses:
                    Estimate Std. Error z value Pr(>|z|)    
horThyes == 0     -0.3462416  0.1290733  -2.683  0.00731 ** 
age == 0          -0.0094534  0.0093002  -1.016  0.30941    
menostatPost == 0  0.2581565  0.1834800   1.407  0.15943    
tsize == 0         0.0077983  0.0039391   1.980  0.04773 *  
tgrade.L == 0      0.5510838  0.1898443   2.903  0.00370 ** 
tgrade.Q == 0     -0.2011060  0.1219646  -1.649  0.09917 .  
pnodes == 0        0.0487818  0.0074480   6.550 5.77e-11 ***
progrec == 0      -0.0022175  0.0005735  -3.867  0.00011 ***
estrec == 0        0.0001978  0.0004504   0.439  0.66049    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
(Univariate p values reported)

R> cftest(mlt_GBSG2_1, parm = names(cf))

	 Simultaneous Tests for General Linear Hypotheses

Fit: mlt(model = ctm_GBSG2_1, data = GBSG2, scale = TRUE)

Linear Hypotheses:
                    Estimate Std. Error z value Pr(>|z|)    
horThyes == 0     -0.3487079  0.1293734  -2.695 0.007031 ** 
age == 0          -0.0099320  0.0093123  -1.067 0.286178    
menostatPost == 0  0.2676427  0.1836805   1.457 0.145086    
tsize == 0         0.0077660  0.0039383   1.972 0.048622 *  
tgrade.L == 0      0.5602231  0.1898998   2.950 0.003177 ** 
tgrade.Q == 0     -0.2019424  0.1220198  -1.655 0.097925 .  
pnodes == 0        0.0487620  0.0074150   6.576 4.83e-11 ***
progrec == 0      -0.0022105  0.0005740  -3.851 0.000118 ***
estrec == 0        0.0001830  0.0004515   0.405 0.685294    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
(Univariate p values reported)

R> cftest(fss_GBSG2_1, parm = names(cf))

	 Simultaneous Tests for General Linear Hypotheses

Fit: flexsurvspline(formula = fm_GBSG2, data = GBSG2, k = 9, bknots = log(support(GBSG2y)$y), 
    scale = "hazard")

Linear Hypotheses:
                    Estimate Std. Error z value Pr(>|z|)    
horThyes == 0     -0.3473363  0.1290343  -2.692  0.00711 ** 
age == 0          -0.0097896  0.0092899  -1.054  0.29198    
menostatPost == 0  0.2672205  0.1833300   1.458  0.14495    
tsize == 0         0.0079052  0.0039373   2.008  0.04467 *  
tgrade.L == 0      0.5554285  0.1899068   2.925  0.00345 ** 
tgrade.Q == 0     -0.2078500  0.1220298  -1.703  0.08852 .  
pnodes == 0        0.0485934  0.0074387   6.532 6.47e-11 ***
progrec == 0      -0.0022112  0.0005554  -3.982 6.85e-05 ***
estrec == 0        0.0001891  0.0004310   0.439  0.66076    
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
(Univariate p values reported)

R> 
R> ## ----geyser-w-band-------------------------------------------------------
R> cb_w <- confband(mlt_w, newdata = data.frame(1), K = 20, cheat = 100)
R> 
R> ## ----geyser-w-cbplot, echo = FALSE---------------------------------------
R> layout(matrix(1:2, ncol = 2))
R> #i <- (cb_w[, "q"] > 45 & cb_w[, "q"] < 110)
R> #cb_w[-i, "lwr"] <- NA
R> #cb_w[-i, "upr"] <- NA
R> plot(cb_w[, "q"], cb_w[, "Estimate"], xlab = "Waiting times", ylab = "Transformation", 
+       main = "", type = "l")
R> 
R> q <- cb_w[, "q"]
R> lwr <- cb_w[, "lwr"]
R> upr <-  cb_w[, "upr"]
R> polygon(c(q, rev(q)), c(lwr, rev(upr)),
+          border = NA, col = "lightblue") ### rgb(.1, .1, .1, .1))
R> 
R> lines(cb_w[, "q"], cb_w[, "Estimate"])
R> rug(geyser$waiting, col = rgb(.1, .1, .1, .1))
R> plot(cb_w[, "q"], pnorm(cb_w[, "Estimate"]), xlab = "Waiting times", ylab = "Distribution", 
+       main = "", cex = .5, type = "n")
R> polygon(c(q, rev(q)), c(pnorm(lwr), rev(pnorm(upr))),                                     
+          border = NA, col = "lightblue") ### rgb(.1, .1, .1, .1))
R> lines(cb_w[, "q"], pnorm(cb_w[, "Estimate"]))
R> 
R> # lines(cb_w[, "q"], pnorm(cb_w[, "lwr"]))
R> # lines(cb_w[, "q"], pnorm(cb_w[, "upr"]))
R> rug(geyser$waiting, col = rgb(.1, .1, .1, .1))
R> 
R> ## ----geyser-w-simulate, results = "hide", cache = TRUE-------------------
R> new_w <- simulate(mlt_w, nsim = 100)
R> llr <- numeric(length(new_w))
R> pdist <- vector(mode = "list", length = length(new_w))
R> pdens <- vector(mode = "list", length = length(new_w))
R> ngeyser <- geyser
R> q <- mkgrid(var_w, 100)[[1]]
R> for (i in 1:length(new_w)) {
+      ngeyser$waiting <- new_w[[i]]
+      mlt_i <- mlt(ctm_w, data = ngeyser, scale = TRUE, 
+                   theta = coef(mlt_w))
+      llr[[i]] <- logLik(mlt_i) - logLik(mlt_i, parm = coef(mlt_w))
+      pdist[[i]] <- predict(mlt_i, newdata = data.frame(1), 
+                            type = "distribution", q = q)
+      pdens[[i]] <- predict(mlt_i, newdata = data.frame(1), 
+                            type = "density", q = q)
+  }
R> 
R> ## ----geyser-w-simulate-plot, echo = FALSE--------------------------------
R> i <- which(llr < quantile(llr, prob = .95))
R> tpdist <- pdist[i]
R> tpdens <- pdens[i]
R> layout(matrix(1:2, ncol = 2))
R> plot(q, tpdist[[1]], type = "n", xlab = "Waiting times", ylab = "Distribution")
R> polygon(c(q, rev(q)), c(pnorm(lwr), rev(pnorm(upr))),
+          border = NA, col = "lightblue")
R> tmp <- sapply(tpdist, function(x) lines(q, x, col = rgb(.1, .1, .1, .1)))
R> plot(q, tpdens[[1]], type = "n", ylim = range(unlist(pdens)),
+       xlab = "Waiting times", ylab = "Density")
R> tmp <- sapply(tpdens, function(x) lines(q, x, col = rgb(.1, .1, .1, .1)))
R> 
R> ## ----variables-factor----------------------------------------------------
R> f_eye <- factor_var("eye", desc = "eye color", 
+                      levels = c("blue", "brown", "green", "grey", "mixed"))
R> 
R> ## ----variables-factor-methods--------------------------------------------
R> variable.names(f_eye)
[1] "eye"
R> desc(f_eye)
[1] "eye color"
R> variables::unit(f_eye)
[1] NA
R> support(f_eye)
$eye
[1] blue  brown green grey  mixed
Levels: blue brown green grey mixed

R> bounds(f_eye)
$eye
[1] NA

R> is.bounded(f_eye)
[1] TRUE
R> 
R> ## ----variables-factor-mkgrid---------------------------------------------
R> mkgrid(f_eye)
$eye
[1] blue  brown green grey  mixed
Levels: blue brown green grey mixed

R> 
R> ## ----variables-ordered---------------------------------------------------
R> o_temp <- ordered_var("temp", desc = "temperature", 
+                        levels = c("cold", "lukewarm", "warm", "hot"))
R> 
R> ## ----variables-ordered-methods-------------------------------------------
R> variable.names(o_temp)
[1] "temp"
R> desc(o_temp)
[1] "temperature"
R> variables::unit(o_temp)
[1] NA
R> support(o_temp)
$temp
[1] cold     lukewarm warm     hot     
Levels: cold < lukewarm < warm < hot

R> bounds(o_temp) 
$temp
[1] cold hot 
Levels: cold < lukewarm < warm < hot

R> is.bounded(o_temp)
[1] TRUE
R> mkgrid(o_temp)
$temp
[1] cold     lukewarm warm     hot     
Levels: cold < lukewarm < warm < hot

R> 
R> ## ----variables-fd--------------------------------------------------------
R> v_age <- numeric_var("age", desc = "age of patient", 
+                       unit = "years", support = 25:75)
R> 
R> ## ----variables-fd-methods------------------------------------------------
R> variable.names(v_age)
[1] "age"
R> desc(v_age)
[1] "age of patient"
R> variables::unit(v_age)
[1] "years"
R> support(v_age)
$age
 [1] 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
[24] 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70
[47] 71 72 73 74 75

R> bounds(v_age) 
$age
[1] 25 75

R> is.bounded(v_age)
[1] TRUE
R> 
R> ## ----variables-fd-mkgrid-------------------------------------------------
R> mkgrid(v_age)
$age
 [1] 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
[24] 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70
[47] 71 72 73 74 75

R> 
R> ## ----variables-c---------------------------------------------------------
R> v_temp <- numeric_var("ztemp", desc = "Zurich daytime temperature", 
+                        unit = "Celsius", support = c(-10.0, 35.0), 
+                        add = c(-5, 5), bounds = c(-273.15, Inf))
R> 
R> ## ----variables-c-methods-------------------------------------------------
R> variable.names(v_temp)
[1] "ztemp"
R> desc(v_temp)
[1] "Zurich daytime temperature"
R> variables::unit(v_temp)
[1] "Celsius"
R> support(v_temp)
$ztemp
[1] -10  35

R> bounds(v_temp) 
$ztemp
[1] -273.15     Inf

R> is.bounded(v_temp)
[1] TRUE
R> 
R> ## ----variables-c-mkgrid--------------------------------------------------
R> mkgrid(v_temp, n = 20)
$ztemp
 [1] -15.0000000 -12.1052632  -9.2105263  -6.3157895  -3.4210526
 [6]  -0.5263158   2.3684211   5.2631579   8.1578947  11.0526316
[11]  13.9473684  16.8421053  19.7368421  22.6315789  25.5263158
[16]  28.4210526  31.3157895  34.2105263  37.1052632  40.0000000

R> 
R> ## ----variables-vars------------------------------------------------------
R> vars <- c(f_eye, o_temp, v_age, v_temp)
R> 
R> ## ----variables-vars-methods----------------------------------------------
R> variable.names(vars)
    eye    temp     age   ztemp 
  "eye"  "temp"   "age" "ztemp" 
R> desc(vars) 
                         eye                         temp 
                 "eye color"                "temperature" 
                         age                        ztemp 
            "age of patient" "Zurich daytime temperature" 
R> variables::unit(vars)
      eye      temp       age     ztemp 
       NA        NA   "years" "Celsius" 
R> support(vars)
$eye
[1] blue  brown green grey  mixed
Levels: blue brown green grey mixed

$temp
[1] cold     lukewarm warm     hot     
Levels: cold < lukewarm < warm < hot

$age
 [1] 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
[24] 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70
[47] 71 72 73 74 75

$ztemp
[1] -10  35

R> bounds(vars)
$eye
[1] NA

$temp
[1] cold hot 
Levels: cold < lukewarm < warm < hot

$age
[1] 25 75

$ztemp
[1] -273.15     Inf

R> is.bounded(vars)
  eye  temp   age ztemp 
 TRUE  TRUE  TRUE  TRUE 
R> mkgrid(vars, n = 20)
$eye
[1] blue  brown green grey  mixed
Levels: blue brown green grey mixed

$temp
[1] cold     lukewarm warm     hot     
Levels: cold < lukewarm < warm < hot

$age
 [1] 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
[24] 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70
[47] 71 72 73 74 75

$ztemp
 [1] -15.0000000 -12.1052632  -9.2105263  -6.3157895  -3.4210526
 [6]  -0.5263158   2.3684211   5.2631579   8.1578947  11.0526316
[11]  13.9473684  16.8421053  19.7368421  22.6315789  25.5263158
[16]  28.4210526  31.3157895  34.2105263  37.1052632  40.0000000

R> 
R> ## ----variables-vars-expand-----------------------------------------------
R> nd <- expand.grid(mkgrid(vars))
R> 
R> ## ----variables-check-----------------------------------------------------
R> check(vars, data = nd)
[1] TRUE
R> 
R> ## ----basefun-polynom-----------------------------------------------------
R> xvar <- numeric_var("x", support = c(0.1, pi), bounds= c(0, Inf))
R> x <- as.data.frame(mkgrid(xvar, n = 20))
R> class(pb <- polynomial_basis(xvar, coef = c(TRUE, TRUE, FALSE, TRUE)))
[1] "polynomial_basis" "basis"            "function"        
R> 
R> ## ----basefun-polynom-fun-------------------------------------------------
R> head(pb(x))
     (Intercept)         x x^2         x^3
[1,]           1 0.0000000   0 0.000000000
[2,]           1 0.1653470   0 0.004520524
[3,]           1 0.3306940   0 0.036164195
[4,]           1 0.4960409   0 0.122054158
[5,]           1 0.6613879   0 0.289313560
[6,]           1 0.8267349   0 0.565065547
R> 
R> ## ----basefun-polynom-mm--------------------------------------------------
R> head(model.matrix(pb, data = x))
     (Intercept)         x x^2         x^3
[1,]           1 0.0000000   0 0.000000000
[2,]           1 0.1653470   0 0.004520524
[3,]           1 0.3306940   0 0.036164195
[4,]           1 0.4960409   0 0.122054158
[5,]           1 0.6613879   0 0.289313560
[6,]           1 0.8267349   0 0.565065547
R> 
R> ## ----basefun-polynom-pred------------------------------------------------
R> predict(pb, newdata = x, coef = c(1, 2, 0, 1.75))
 [1]  1.000000  1.338605  1.724675  2.205677  2.829075  3.642335  4.692922
 [8]  6.028303  7.695942  9.743305 12.217857 15.167065 18.638393 22.679308
[15] 27.337274 32.659757 38.694222 45.488136 53.088963 61.544169
R> 
R> ## ----basefun-polynom-pred-deriv------------------------------------------
R> predict(pb, newdata = x, coef = c(1, 2, 0, 1.75), deriv = c(x = 1L))
 [1]  2.000000  2.143533  2.574132  3.291797  4.296528  5.588326  7.167189
 [8]  9.033118 11.186114 13.626175 16.353303 19.367496 22.668756 26.257082
[15] 30.132473 34.294931 38.744455 43.481045 48.504701 53.815423
R> 
R> ## ----basefun-log---------------------------------------------------------
R> class(lb <- log_basis(xvar, ui = "increasing"))
[1] "log_basis" "basis"     "function" 
R> head(X <- model.matrix(lb, data = x))
     (Intercept)      log(x)
[1,]           1 -36.0436534
[2,]           1  -1.7997091
[3,]           1  -1.1065619
[4,]           1  -0.7010968
[5,]           1  -0.4134147
[6,]           1  -0.1902712
R> 
R> ## ----basefun-log-constr--------------------------------------------------
R> attr(X, "constraint")
$ui
     [,1] [,2]
[1,]    0    1

$ci
[1] 0

R> 
R> ## ----basefun-log-pred----------------------------------------------------
R> predict(lb, newdata = x, coef = c(1, 2))
 [1] -71.0873068  -2.5994182  -1.2131238  -0.4021936   0.1731705
 [6]   0.6194576   0.9841008   1.2924021   1.5594649   1.7950310
[11]   2.0057520   2.1963724   2.3703951   2.5304805   2.6786965
[16]   2.8166822   2.9457593   3.0670085   3.1813253   3.2894598
R> predict(lb, newdata = x, coef = c(1, 2), deriv = c(x = 1L))
 [1] 9.007199e+15 1.209578e+01 6.047888e+00 4.031925e+00 3.023944e+00
 [6] 2.419155e+00 2.015963e+00 1.727968e+00 1.511972e+00 1.343975e+00
[11] 1.209578e+00 1.099616e+00 1.007981e+00 9.304443e-01 8.639840e-01
[16] 8.063850e-01 7.559860e-01 7.115162e-01 6.719875e-01 6.366198e-01
R> 
R> ## ----basefun-Bernstein---------------------------------------------------
R> class(bb <- Bernstein_basis(xvar, order = 3, ui = "increasing"))
[1] "Bernstein_basis" "basis"           "function"       
R> head(X <- model.matrix(bb, data = x))
        Bs1(x)      Bs2(x)      Bs3(x)       Bs4(x)
[1,] 1.0986325 -0.09863254 0.000000000 0.000000e+00
[2,] 0.9369214  0.06171364 0.001354996 9.916843e-06
[3,] 0.7892824  0.19433218 0.015949084 4.363204e-04
[4,] 0.6580299  0.29552260 0.044239941 2.207583e-03
[5,] 0.5421999  0.36817664 0.083335831 6.287617e-03
[6,] 0.4408286  0.41518604 0.130345023 1.364033e-02
R> 
R> ## ----basefun-Bernstein-constr--------------------------------------------
R> cf <- c(1, 2, 2.5, 2.6)
R> (cnstr <- attr(X, "constraint"))
$ui
3 x 4 sparse Matrix of class "dgCMatrix"
               
[1,] -1  1  . .
[2,]  . -1  1 .
[3,]  .  . -1 1

$ci
[1] 0 0 0

R> all(cnstr$ui %*% cf > cnstr$ci)
[1] TRUE
R> 
R> ## ----basefun-Bernstein-predict-------------------------------------------
R> predict(bb, newdata = x, coef = cf)
 [1] 0.9013675 1.0637620 1.2189539 1.3654146 1.5032406 1.6325281 1.7533736
 [8] 1.8658735 1.9701242 2.0662220 2.1542634 2.2343447 2.3065623 2.3710127
[15] 2.4277922 2.4769972 2.5187240 2.5530692 2.5801291 2.6000000
R> predict(bb, newdata = x, coef = cf, deriv = c(x = 1))
 [1] 0.98632537 0.96518023 0.91208351 0.85956975 0.80763896 0.75629112
 [7] 0.70552625 0.65534435 0.60574540 0.55672942 0.50829640 0.46044634
[13] 0.41317925 0.36649512 0.32039395 0.27487574 0.22994050 0.18558821
[19] 0.14181889 0.09863254
R> 
R> ## ----basefun-as.basis----------------------------------------------------
R> iv <- as.vars(iris)
R> fb <- as.basis(~ Species + Sepal.Length + Sepal.Width,  data = iv,
+                 remove_intercept = TRUE, negative = TRUE, 
+                 contrasts.args =  list(Species = "contr.sum"))
R> class(fb)
[1] "formula_basis" "basis"         "function"     
R> head(model.matrix(fb, data = iris))
  Speciesversicolor Speciesvirginica Sepal.Length Sepal.Width
1                 0                0         -5.1        -3.5
2                 0                0         -4.9        -3.0
3                 0                0         -4.7        -3.2
4                 0                0         -4.6        -3.1
5                 0                0         -5.0        -3.6
6                 0                0         -5.4        -3.9
R> 
R> ## ----basefun-c-----------------------------------------------------------
R> class(blb <- c(bern = bb, 
+                 log = log_basis(xvar, ui = "increasing", 
+                                 remove_intercept = TRUE)))
[1] "cbind_bases" "bases"      
R> head(X <- model.matrix(blb, data = x))
        Bs1(x)      Bs2(x)      Bs3(x)       Bs4(x)      log(x)
[1,] 1.0986325 -0.09863254 0.000000000 0.000000e+00 -36.0436534
[2,] 0.9369214  0.06171364 0.001354996 9.916843e-06  -1.7997091
[3,] 0.7892824  0.19433218 0.015949084 4.363204e-04  -1.1065619
[4,] 0.6580299  0.29552260 0.044239941 2.207583e-03  -0.7010968
[5,] 0.5421999  0.36817664 0.083335831 6.287617e-03  -0.4134147
[6,] 0.4408286  0.41518604 0.130345023 1.364033e-02  -0.1902712
R> attr(X, "constraint")
$ui
4 x 5 sparse Matrix of class "dgCMatrix"
                 
[1,] -1  1  . . .
[2,]  . -1  1 . .
[3,]  .  . -1 1 .
[4,]  .  .  . . 1

$ci
[1] 0 0 0 0

R> 
R> ## ----basefun-b-----------------------------------------------------------
R> fb <- as.basis(~ g, data = factor_var("g", levels = LETTERS[1:2]))
R> class(bfb <- b(bern = bb, f = fb))
[1] "box_bases" "bases"    
R> nd <- expand.grid(mkgrid(bfb, n = 10))
R> head(X <- model.matrix(bfb, data = nd))
     Bs1(x):(Intercept) Bs2(x):(Intercept) Bs3(x):(Intercept)
[1,]          1.0986325        -0.09863254         0.00000000
[2,]          0.7739072         0.20707468         0.01846902
[3,]          0.5184574         0.38073757         0.09320027
[4,]          0.3264921         0.44297161         0.20033547
[5,]          0.1889422         0.42098449         0.31266696
[6,]          0.0967384         0.34198388         0.40298705
     Bs4(x):(Intercept) Bs1(x):gB Bs2(x):gB Bs3(x):gB Bs4(x):gB
[1,]       0.0000000000         0         0         0         0
[2,]       0.0005490848         0         0         0         0
[3,]       0.0076047915         0         0         0         0
[4,]       0.0302008070         0         0         0         0
[5,]       0.0774063566         0         0         0         0
[6,]       0.1582906656         0         0         0         0
R> attr(X, "constraint")
$ui
14 x 8 sparse Matrix of class "dgCMatrix"
                           
 [1,] -1  1  . .  .  .  . .
 [2,]  . -1  1 .  .  .  . .
 [3,]  .  . -1 1  .  .  . .
 [4,]  .  .  . . -1  1  . .
 [5,]  .  .  . .  . -1  1 .
 [6,]  .  .  . .  .  . -1 1
 [7,]  1  .  . .  .  .  . .
 [8,]  .  1  . .  .  .  . .
 [9,]  .  .  1 .  .  .  . .
[10,]  .  .  . 1  .  .  . .
[11,]  .  .  . .  1  .  . .
[12,]  .  .  . .  .  1  . .
[13,]  .  .  . .  .  .  1 .
[14,]  .  .  . .  .  .  . 1

$ci
 [1]    0    0    0    0    0    0 -Inf -Inf -Inf -Inf -Inf -Inf -Inf -Inf

R> 
R> ## ----basefun-b-sumconstr-------------------------------------------------
R> bfb <- b(bern = bb, f = fb, sumconstr = TRUE)
R> head(X <- model.matrix(bfb, data = nd))
     Bs1(x):(Intercept) Bs2(x):(Intercept) Bs3(x):(Intercept)
[1,]          1.0986325        -0.09863254         0.00000000
[2,]          0.7739072         0.20707468         0.01846902
[3,]          0.5184574         0.38073757         0.09320027
[4,]          0.3264921         0.44297161         0.20033547
[5,]          0.1889422         0.42098449         0.31266696
[6,]          0.0967384         0.34198388         0.40298705
     Bs4(x):(Intercept) Bs1(x):gB Bs2(x):gB Bs3(x):gB Bs4(x):gB
[1,]       0.0000000000         0         0         0         0
[2,]       0.0005490848         0         0         0         0
[3,]       0.0076047915         0         0         0         0
[4,]       0.0302008070         0         0         0         0
[5,]       0.0774063566         0         0         0         0
[6,]       0.1582906656         0         0         0         0
R> attr(X, "constraint")
$ui
6 x 8 sparse Matrix of class "dgTMatrix"
                          
[1,] -1  1  . .  .  .  . .
[2,]  . -1  1 .  .  .  . .
[3,]  .  . -1 1  .  .  . .
[4,] -1  1  . . -1  1  . .
[5,]  . -1  1 .  . -1  1 .
[6,]  .  . -1 1  .  . -1 1

$ci
[1] 0 0 0 0 0 0

R> 
R> ## ----R-ordered-----------------------------------------------------------
R> head(R(sort(unique(CHFLS$R_happy))))
[1] (NA, Very unhappy]              (Very unhappy, Not too happy]  
[3] (Not too happy, Somewhat happy] (Somewhat happy, NA]           
R> 
R> ## ----R-integer-----------------------------------------------------------
R> R(1:5, bounds = c(1, 5))
[1] (NA, 1] (1, 2]  (2, 3]  (3, 4]  (4, NA]
R> 
R> ## ----R-numeric-----------------------------------------------------------
R> x <- rnorm(10)
R> xt <- round(x[x > -1 & x <= 2], 3)
R> xl <- xt - sample(c(Inf, (0:(length(xt) - 2)) / length(xt)), 
+                    replace = FALSE)
R> xr <- xt + sample(c(Inf, (0:(length(xt) - 2)) / length(xt)), 
+                    replace = FALSE)
R> R(c(1.2, rep(NA, length(xt))), cleft = c(NA, xl), cright = c(NA, xr), 
+    tleft = -1, tright = 2)
[1] {1.2| (-1, 2]}                                    
[2] {(0.421666666666667, 1.255]| (-1, 2]}             
[3] {(-0.014, 0.652666666666667]| (-1, 2]}            
[4] {(0.749, 1.58233333333333]| (-1, 2]}              
[5] {(0.949333333333333, Inf]| (-1, 2]}               
[6] {(-Inf, -0.823]| (-1, 2]}                         
[7] {(-0.168666666666667, 0.664666666666667]| (-1, 2]}
R> 
R> ## ----R-Surv--------------------------------------------------------------
R> head(geyser$duration)
[1] 4.016667        2.150000        [4.000000, Inf] [4.000000, Inf]
[5] [4.000000, Inf] [0.000000,   2]
R> head(R(geyser$duration))
[1] 4.0166667 2.15      (4, Inf]  (4, Inf]  (4, Inf]  (0, 2]   
R> 
R> ## ----mlt-chi-p-----------------------------------------------------------
R> pY <- function(x) pchisq(x, df = 20)
R> dY <- function(x) dchisq(x, df = 20)
R> qY <- function(p) qchisq(p, df = 20)
R> 
R> ## ----mlt-chi-B-----------------------------------------------------------
R> yvar <- numeric_var("y", support = qY(c(.001, 1 - .001)), 
+                      bounds = c(0, Inf))
R> By <- Bernstein_basis(yvar, order = ord <- 15, ui = "increasing")
R> 
R> ## ----mlt-chi-mlt---------------------------------------------------------
R> mod <- ctm(By)
R> 
R> ## ----mlt-chi-trafo-------------------------------------------------------
R> h <- function(x) qnorm(pY(x))
R> x <- seq(from = support(yvar)[["y"]][1], to = support(yvar)[["y"]][2], 
+           length.out = ord + 1)
R> 
R> ## ----mlt-chi-coef--------------------------------------------------------
R> mlt::coef(mod) <- h(x)
R> 
R> ## ----mlt-chi-sim---------------------------------------------------------
R> d <- as.data.frame(mkgrid(yvar, n = 500))
R> d$grid <- d$y
R> d$y <- simulate(mod, newdata = d)
R> 
R> ## ----mlt-chi-fit---------------------------------------------------------
R> fmod <- mlt(mod, data = d, scale = TRUE)
R> 
R> ## ----mlt-chi-model-------------------------------------------------------
R> coef(mod)
     Bs1(y)      Bs2(y)      Bs3(y)      Bs4(y)      Bs5(y)      Bs6(y) 
-3.09023231 -2.24395775 -1.56832579 -0.99651738 -0.49547433 -0.04621458 
     Bs7(y)      Bs8(y)      Bs9(y)     Bs10(y)     Bs11(y)     Bs12(y) 
 0.36325683  0.74104644  1.09291321  1.42310925  1.73487215  2.03072963 
    Bs13(y)     Bs14(y)     Bs15(y)     Bs16(y) 
 2.31269685  2.58240889  2.84121268  3.09023231 
R> coef(fmod)
     Bs1(y)      Bs2(y)      Bs3(y)      Bs4(y)      Bs5(y)      Bs6(y) 
-3.63037425 -1.81311088 -1.81311065 -1.55172868  0.07315753  0.07315763 
     Bs7(y)      Bs8(y)      Bs9(y)     Bs10(y)     Bs11(y)     Bs12(y) 
 0.07315755  0.57514161  1.53126306  1.53127949  1.53127958  1.53127949 
    Bs13(y)     Bs14(y)     Bs15(y)     Bs16(y) 
 2.39078422  2.55763431  2.55763431  3.57779001 
R> logLik(fmod)
'log Lik.' -1606.467 (df=16)
R> logLik(fmod, parm = coef(mod))
'log Lik.' -1609.197 (df=16)
R> 
R> ## ----mlt-chi-plot--------------------------------------------------------
R> ## compute true density
R> d$dtrue <- dY(d$grid)
R> d$dest <- predict(fmod, q = sort(d$grid), type = "density")
R> plot(mod, newdata = d, type = "density", col = "black", 
+       xlab = "y", ylab = "Density", ylim = c(0, max(d$dest)))
R> lines(d$grid, d$dtrue, lty = 2)
R> lines(sort(d$grid), d$dest[order(d$grid)], lty = 3)
R> legend("topright", lty = 1:3, bty = "n", 
+         legend = c("True", "Approximated", "Estimated"))
R> 
R> ## ----mlt-coef, echo = FALSE, results = "hide"----------------------------
R> ### print coefs for regression tests
R> objs <- ls()
R> mltobj <- objs[grep("^mlt_", objs)]
R> sapply(mltobj, function(m) eval(parse(text = paste("coef(", m, ")"))))
$mlt_BH
   Bs1(medvc)    Bs2(medvc)    Bs3(medvc)    Bs4(medvc)    Bs5(medvc) 
-11.065961212  -9.169217031  -7.492169090  -4.460820782  -4.460820782 
   Bs6(medvc)    Bs7(medvc)          crim            zn         indus 
 -3.672323293  -3.407426633   0.043695172  -0.007386482  -0.011534241 
        chas1           nox            rm           age           dis 
 -0.604227560   4.854164935  -0.485064861   0.002666899   0.313188132 
          rad           tax       ptratio             b         lstat 
 -0.079214987   0.003680147   0.223960713  -0.002630374   0.164968520 

$mlt_BHi
Bs1(medvc):(Intercept) Bs2(medvc):(Intercept) Bs3(medvc):(Intercept) 
          -12.72123173            -6.31515714            -4.06471664 
Bs4(medvc):(Intercept) Bs5(medvc):(Intercept) Bs6(medvc):(Intercept) 
            2.21374357             2.21374861             3.63784697 
Bs7(medvc):(Intercept)        Bs1(medvc):crim        Bs2(medvc):crim 
            4.26097607             3.12053951             3.43181621 
       Bs3(medvc):crim        Bs4(medvc):crim        Bs5(medvc):crim 
            3.43181627             3.43181612             3.43181614 
       Bs6(medvc):crim        Bs7(medvc):crim          Bs1(medvc):zn 
            3.43181605             3.43181605            -2.96244550 
         Bs2(medvc):zn          Bs3(medvc):zn          Bs4(medvc):zn 
           -1.30002790            -1.30002243            -1.30002727 
         Bs5(medvc):zn          Bs6(medvc):zn          Bs7(medvc):zn 
           -1.30002729            -0.92250799            -0.92250799 
      Bs1(medvc):indus       Bs2(medvc):indus       Bs3(medvc):indus 
           -0.67034358            -0.67033920            -0.40417817 
      Bs4(medvc):indus       Bs5(medvc):indus       Bs6(medvc):indus 
           -0.27214608            -0.27214608            -0.27215218 
      Bs7(medvc):indus       Bs1(medvc):chas1       Bs2(medvc):chas1 
           -0.27215227            -0.58727853            -0.58727541 
      Bs3(medvc):chas1       Bs4(medvc):chas1       Bs5(medvc):chas1 
           -0.58722633            -0.27398565            -0.27398560 
      Bs6(medvc):chas1       Bs7(medvc):chas1         Bs1(medvc):nox 
           -0.27398566            -0.27398567             2.61127201 
        Bs2(medvc):nox         Bs3(medvc):nox         Bs4(medvc):nox 
            2.61127167             2.58492035             2.58491781 
        Bs5(medvc):nox         Bs6(medvc):nox         Bs7(medvc):nox 
            2.58491784             2.58491788             2.58491787 
         Bs1(medvc):rm          Bs2(medvc):rm          Bs3(medvc):rm 
            0.37850481            -2.25847294            -2.25847287 
         Bs4(medvc):rm          Bs5(medvc):rm          Bs6(medvc):rm 
           -7.03158083            -7.03158386            -7.03158394 
         Bs7(medvc):rm         Bs1(medvc):age         Bs2(medvc):age 
           -7.03158394             1.78122756             1.78123499 
        Bs3(medvc):age         Bs4(medvc):age         Bs5(medvc):age 
            1.78122999             0.27588949             0.27588760 
        Bs6(medvc):age         Bs7(medvc):age         Bs1(medvc):dis 
           -0.08652611            -0.08652616             3.26561668 
        Bs2(medvc):dis         Bs3(medvc):dis         Bs4(medvc):dis 
            4.44280140             4.44280396             4.44280390 
        Bs5(medvc):dis         Bs6(medvc):dis         Bs7(medvc):dis 
            4.44280387             4.44283138             4.85812088 
        Bs1(medvc):rad         Bs2(medvc):rad         Bs3(medvc):rad 
           -1.16707514            -1.16706831            -3.39115242 
        Bs4(medvc):rad         Bs5(medvc):rad         Bs6(medvc):rad 
           -3.39115546            -3.39115549            -4.05620451 
        Bs7(medvc):rad         Bs1(medvc):tax         Bs2(medvc):tax 
           -4.07035802             5.03864739             2.22133057 
        Bs3(medvc):tax         Bs4(medvc):tax         Bs5(medvc):tax 
            2.22133051             2.22133254             2.22133258 
        Bs6(medvc):tax         Bs7(medvc):tax     Bs1(medvc):ptratio 
            1.82470352             1.21572810             2.17766075 
    Bs2(medvc):ptratio     Bs3(medvc):ptratio     Bs4(medvc):ptratio 
            2.17765252             2.17765270             2.17765191 
    Bs5(medvc):ptratio     Bs6(medvc):ptratio     Bs7(medvc):ptratio 
            2.17765193             2.17765191             2.17765191 
          Bs1(medvc):b           Bs2(medvc):b           Bs3(medvc):b 
           -0.47500893            -1.42678038            -1.01805471 
          Bs4(medvc):b           Bs5(medvc):b           Bs6(medvc):b 
           -1.01805473            -1.01805476            -1.01805477 
          Bs7(medvc):b       Bs1(medvc):lstat       Bs2(medvc):lstat 
           -1.01805478             5.64377481             5.64377912 
      Bs3(medvc):lstat       Bs4(medvc):lstat       Bs5(medvc):lstat 
            5.64377911             5.64378213             6.49383818 
      Bs6(medvc):lstat       Bs7(medvc):lstat 
            6.86683092             6.86683268 

$mlt_BHi2
Bs1(medvc):(Intercept) Bs2(medvc):(Intercept) Bs3(medvc):(Intercept) 
            -3.3830300             -3.3830300             -3.3830300 
Bs4(medvc):(Intercept) Bs5(medvc):(Intercept) Bs6(medvc):(Intercept) 
            -3.3830300             -3.3830300             -3.3830300 
Bs7(medvc):(Intercept)        Bs1(medvc):crim        Bs2(medvc):crim 
            -3.3830300              2.9984576              3.8105665 
       Bs3(medvc):crim        Bs4(medvc):crim        Bs5(medvc):crim 
             3.8105665              3.8105665              3.8105665 
       Bs6(medvc):crim        Bs7(medvc):crim          Bs1(medvc):zn 
             3.8105665              3.8105665             -1.3725187 
         Bs2(medvc):zn          Bs3(medvc):zn          Bs4(medvc):zn 
            -1.3725036             -1.3725036             -1.3725036 
         Bs5(medvc):zn          Bs6(medvc):zn          Bs7(medvc):zn 
            -1.3725036             -0.6335058             -0.6335058 
      Bs1(medvc):indus       Bs2(medvc):indus       Bs3(medvc):indus 
            -1.3502791             -1.3502791             -0.2213357 
      Bs4(medvc):indus       Bs5(medvc):indus       Bs6(medvc):indus 
            -0.2213357             -0.2213357             -0.2213357 
      Bs7(medvc):indus       Bs1(medvc):chas1       Bs2(medvc):chas1 
            -0.2213357             -2.0538454             -0.4600075 
      Bs3(medvc):chas1       Bs4(medvc):chas1       Bs5(medvc):chas1 
            -0.4600075             -0.4600075             -0.4600076 
      Bs6(medvc):chas1       Bs7(medvc):chas1         Bs1(medvc):nox 
            -0.4600076             -0.4600076              2.0951614 
        Bs2(medvc):nox         Bs3(medvc):nox         Bs4(medvc):nox 
             2.0951614              2.0951614              2.0951614 
        Bs5(medvc):nox         Bs6(medvc):nox         Bs7(medvc):nox 
             2.0951614              2.0951614              2.0951614 
         Bs1(medvc):rm          Bs2(medvc):rm          Bs3(medvc):rm 
            -3.1541924             -3.1541924             -3.1541924 
         Bs4(medvc):rm          Bs5(medvc):rm          Bs6(medvc):rm 
            -3.1541924             -3.1541924             -3.1541924 
         Bs7(medvc):rm         Bs1(medvc):age         Bs2(medvc):age 
            -3.1262885              0.8562946              0.8562946 
        Bs3(medvc):age         Bs4(medvc):age         Bs5(medvc):age 
             0.8562946              0.8562946              0.8562946 
        Bs6(medvc):age         Bs7(medvc):age         Bs1(medvc):dis 
             0.8562946              0.8562946            -10.5248037 
        Bs2(medvc):dis         Bs3(medvc):dis         Bs4(medvc):dis 
             4.8283181              4.8283183              4.8283183 
        Bs5(medvc):dis         Bs6(medvc):dis         Bs7(medvc):dis 
             4.8283183              4.9738451              6.9504106 
        Bs1(medvc):rad         Bs2(medvc):rad         Bs3(medvc):rad 
            -2.0088838             -2.0088838             -2.0088838 
        Bs4(medvc):rad         Bs5(medvc):rad         Bs6(medvc):rad 
            -2.0088838             -2.0088838             -2.0088838 
        Bs7(medvc):rad         Bs1(medvc):tax         Bs2(medvc):tax 
            -2.0088838              2.1549814              2.1549814 
        Bs3(medvc):tax         Bs4(medvc):tax         Bs5(medvc):tax 
             2.1549814              2.1549814              2.1549814 
        Bs6(medvc):tax         Bs7(medvc):tax     Bs1(medvc):ptratio 
             2.1549814              2.1549814              2.0332745 
    Bs2(medvc):ptratio     Bs3(medvc):ptratio     Bs4(medvc):ptratio 
             2.0332745              2.0332745              2.0332745 
    Bs5(medvc):ptratio     Bs6(medvc):ptratio     Bs7(medvc):ptratio 
             2.0332745              2.0332745              2.0332745 
          Bs1(medvc):b           Bs2(medvc):b           Bs3(medvc):b 
            -1.4725181             -1.4725181             -1.4719984 
          Bs4(medvc):b           Bs5(medvc):b           Bs6(medvc):b 
             1.7873568              1.7873568              1.8499014 
          Bs7(medvc):b       Bs1(medvc):lstat       Bs2(medvc):lstat 
             1.8499014              3.5325515              5.1866286 
      Bs3(medvc):lstat       Bs4(medvc):lstat       Bs5(medvc):lstat 
             5.1866431              7.1546570              7.1547280 
      Bs6(medvc):lstat       Bs7(medvc):lstat 
            11.5038374             11.5038374 

$mlt_CHFLS_1
 R_happy1  R_happy2  R_happy3 
-4.687544 -1.903378  1.499261 

$mlt_CHFLS_2
     R_happy1      R_happy2      R_happy3         R_age      R_income 
-4.8016007890 -2.0117558752  1.4126490150 -0.0062807722  0.0002350172 

$mlt_CHFLS_3
     R_happy1:R_healthPoor      R_happy2:R_healthPoor 
                -1.3863056                  0.4055166 
     R_happy3:R_healthPoor  R_happy1:R_healthNot good 
                 2.1972175                 -2.9368997 
 R_happy2:R_healthNot good  R_happy3:R_healthNot good 
                -0.4840551                  2.6703068 
     R_happy1:R_healthFair      R_happy2:R_healthFair 
                -4.7384085                 -1.7034715 
     R_happy3:R_healthFair      R_happy1:R_healthGood 
                 2.3537545                 -6.3647475 
     R_happy2:R_healthGood      R_happy3:R_healthGood 
                -2.5285092                  1.8365672 
R_happy1:R_healthExcellent R_happy2:R_healthExcellent 
               -17.0294683                 -2.4976458 
R_happy3:R_healthExcellent 
                 0.2468644 

$mlt_CHFLS_4
     R_happy1:R_healthPoor      R_happy2:R_healthPoor 
             -7.878330e-01               1.036887e+00 
     R_happy3:R_healthPoor  R_happy1:R_healthNot good 
              2.842032e+00              -2.346346e+00 
 R_happy2:R_healthNot good  R_happy3:R_healthNot good 
              1.150999e-01               3.288169e+00 
     R_happy1:R_healthFair      R_happy2:R_healthFair 
             -4.130485e+00              -1.084947e+00 
     R_happy3:R_healthFair      R_happy1:R_healthGood 
              3.019125e+00              -5.768645e+00 
     R_happy2:R_healthGood      R_happy3:R_healthGood 
             -1.931220e+00               2.469515e+00 
R_happy1:R_healthExcellent R_happy2:R_healthExcellent 
             -1.622195e+01              -1.932621e+00 
R_happy3:R_healthExcellent                      R_age 
              8.230943e-01               1.173828e-02 
                  R_income 
              2.492679e-04 

$mlt_CHFLS_5
      R_happy1:(Intercept)       R_happy2:(Intercept) 
                -1.3869219                  0.4049632 
      R_happy3:(Intercept)  R_happy1:R_healthNot good 
                 2.1945340                 -1.5492047 
 R_happy2:R_healthNot good  R_happy3:R_healthNot good 
                -0.8890132                  0.4753352 
     R_happy1:R_healthFair      R_happy2:R_healthFair 
                -3.3527298                 -2.1085531 
     R_happy3:R_healthFair      R_happy1:R_healthGood 
                 0.1593671                 -4.9761137 
     R_happy2:R_healthGood      R_happy3:R_healthGood 
                -2.9334884                 -0.3578186 
R_happy1:R_healthExcellent R_happy2:R_healthExcellent 
               -12.4150935                 -2.9026536 
R_happy3:R_healthExcellent 
                -1.9475290 

$mlt_CHFLS_6
   R_happy1:R_age    R_happy2:R_age    R_happy3:R_age R_happy1:R_income 
        -6.757948         -2.415478          3.020223        -47.142047 
R_happy2:R_income R_happy3:R_income 
       -17.917305          1.867952 

$mlt_CHFLS_7
      R_happy1:(Intercept)       R_happy2:(Intercept) 
                -0.8934129                  0.9374630 
      R_happy3:(Intercept)  R_happy1:R_healthNot good 
                 2.5684079                 -1.5632759 
 R_happy2:R_healthNot good  R_happy3:R_healthNot good 
                -0.9329027                  0.4474289 
     R_happy1:R_healthFair      R_happy2:R_healthFair 
                -3.2919932                 -2.0870138 
     R_happy3:R_healthFair      R_happy1:R_healthGood 
                 0.1584496                 -4.9291438 
     R_happy2:R_healthGood      R_happy3:R_healthGood 
                -2.9382313                 -0.3853836 
R_happy1:R_healthExcellent R_happy2:R_healthExcellent 
               -12.3351301                 -2.9419816 
R_happy3:R_healthExcellent             R_happy1:R_age 
                -2.0229429                 -0.5181697 
            R_happy2:R_age             R_happy3:R_age 
                -0.5181696                 -0.5181696 
         R_happy1:R_income          R_happy2:R_income 
                -6.1179830                 -5.7145645 
         R_happy3:R_income 
                -1.8009041 

$mlt_d
Bs1(duration) Bs2(duration) Bs3(duration) Bs4(duration) Bs5(duration) 
   -4.1804827    -0.5363118    -0.3758452    -0.3758452    -0.3758452 
Bs6(duration) Bs7(duration) Bs8(duration) Bs9(duration) 
   -0.3758451    -0.3758452    -0.2232097     2.0039945 

$mlt_GBSG2_1
      Bs1(y)       Bs2(y)       Bs3(y)       Bs4(y)       Bs5(y) 
-5.518462045 -1.027669099 -1.027669099 -1.027669045 -0.798157929 
      Bs6(y)       Bs7(y)       Bs8(y)       Bs9(y)      Bs10(y) 
-0.344847795 -0.344847776 -0.344847717 -0.125348941  0.288646612 
     Bs11(y)     horThyes          age menostatPost        tsize 
 0.288646683 -0.348707936 -0.009932002  0.267642672  0.007765951 
    tgrade.L     tgrade.Q       pnodes      progrec       estrec 
 0.560223057 -0.201942423  0.048761983 -0.002210539  0.000182990 

$mlt_GBSG2_2
  (Intercept)        log(y)      horThyes           age  menostatPost 
-7.8167973984  1.0000000000  0.3321614005  0.0094196280 -0.2685364763 
        tsize      tgrade.L      tgrade.Q        pnodes       progrec 
-0.0073180053 -0.5193491789  0.2139210801 -0.0461663602  0.0020671109 
       estrec 
-0.0001788297 

$mlt_GBSG2_3
  (Intercept)        log(y)      horThyes           age  menostatPost 
-1.065457e+01  1.390271e+00  3.730891e-01  9.480255e-03 -2.709161e-01 
        tsize      tgrade.L      tgrade.Q        pnodes       progrec 
-8.015296e-03 -5.727666e-01  2.050385e-01 -5.280043e-02  2.284781e-03 
       estrec 
-2.483986e-04 

$mlt_GBSG2_4
  Bs1(y):horThno   Bs2(y):horThno   Bs3(y):horThno   Bs4(y):horThno 
     -5.18080228      -0.88136230      -0.88136230      -0.88136230 
  Bs5(y):horThno   Bs6(y):horThno   Bs7(y):horThno   Bs8(y):horThno 
     -0.81023653      -0.24107595      -0.24107595      -0.24107571 
  Bs9(y):horThno  Bs10(y):horThno  Bs11(y):horThno  Bs1(y):horThyes 
     -0.09187497      -0.09187216       0.56806783      -6.02942061 
 Bs2(y):horThyes  Bs3(y):horThyes  Bs4(y):horThyes  Bs5(y):horThyes 
     -1.23997951      -1.23995670      -1.23873735      -0.99232915 
 Bs6(y):horThyes  Bs7(y):horThyes  Bs8(y):horThyes  Bs9(y):horThyes 
     -0.75983338      -0.75970126      -0.75956324      -0.15960939 
Bs10(y):horThyes Bs11(y):horThyes 
     -0.15960932      -0.15960933 

$mlt_GBSG2_5
  Bs1(y):horThno   Bs2(y):horThno   Bs3(y):horThno   Bs4(y):horThno 
    -5.156653174     -0.857376992     -0.857376974     -0.857376960 
  Bs5(y):horThno   Bs6(y):horThno   Bs7(y):horThno   Bs8(y):horThno 
    -0.784202156     -0.217095215     -0.217094293     -0.217029447 
  Bs9(y):horThno  Bs10(y):horThno  Bs11(y):horThno  Bs1(y):horThyes 
    -0.067223325     -0.067223344      0.593314127     -6.002493879 
 Bs2(y):horThyes  Bs3(y):horThyes  Bs4(y):horThyes  Bs5(y):horThyes 
    -1.215372079     -1.215372069     -1.207951899     -0.964042471 
 Bs6(y):horThyes  Bs7(y):horThyes  Bs8(y):horThyes  Bs9(y):horThyes 
    -0.733448986     -0.733435699     -0.733429913     -0.131619178 
Bs10(y):horThyes Bs11(y):horThyes              age 
    -0.131619025     -0.131618999     -0.000464507 

$mlt_GBSG2_6
     Bs1(y)      Bs2(y)      Bs3(y)      Bs4(y)      Bs5(y)      Bs6(y) 
-5.29858795 -0.88356160 -0.88356162 -0.88356167 -0.73450369 -0.28814296 
     Bs7(y)      Bs8(y)      Bs9(y)     Bs10(y)     Bs11(y)    horThyes 
-0.28814298 -0.28814302 -0.09605106  0.24273152  0.24273228 -0.36655680 

$mlt_GBSG2_7
 Bs1(y):(Intercept)  Bs2(y):(Intercept)  Bs3(y):(Intercept) 
        -5.18073010         -0.88133279         -0.88133257 
 Bs4(y):(Intercept)  Bs5(y):(Intercept)  Bs6(y):(Intercept) 
        -0.88133253         -0.80830313         -0.24105215 
 Bs7(y):(Intercept)  Bs8(y):(Intercept)  Bs9(y):(Intercept) 
        -0.24105195         -0.24104850         -0.09117333 
Bs10(y):(Intercept) Bs11(y):(Intercept)     Bs1(y):horThyes 
        -0.09105916          0.56813479         -0.84928679 
    Bs2(y):horThyes     Bs3(y):horThyes     Bs4(y):horThyes 
        -0.35863794         -0.35863576         -0.35862820 
    Bs5(y):horThyes     Bs6(y):horThyes     Bs7(y):horThyes 
        -0.17760236         -0.51879729         -0.51879747 
    Bs8(y):horThyes     Bs9(y):horThyes    Bs10(y):horThyes 
        -0.51855019         -0.06615278         -0.06626645 
   Bs11(y):horThyes 
        -0.72546034 

$mlt_GBSG2_8
  Bs1(y):horThno:Bs1(age)   Bs2(y):horThno:Bs1(age) 
              -3.69249205                2.12691557 
  Bs3(y):horThno:Bs1(age)   Bs4(y):horThno:Bs1(age) 
               2.12691557                2.12691557 
  Bs5(y):horThno:Bs1(age)   Bs6(y):horThno:Bs1(age) 
               2.64135533                2.64135540 
  Bs7(y):horThno:Bs1(age)   Bs8(y):horThno:Bs1(age) 
               2.64135540                2.64135540 
  Bs9(y):horThno:Bs1(age)  Bs10(y):horThno:Bs1(age) 
               2.64135540                4.22121613 
 Bs11(y):horThno:Bs1(age)  Bs1(y):horThyes:Bs1(age) 
               4.22121736               -1.71445996 
 Bs2(y):horThyes:Bs1(age)  Bs3(y):horThyes:Bs1(age) 
              -1.58203840               -1.58203839 
 Bs4(y):horThyes:Bs1(age)  Bs5(y):horThyes:Bs1(age) 
              -1.58203839               -1.58203838 
 Bs6(y):horThyes:Bs1(age)  Bs7(y):horThyes:Bs1(age) 
              -0.53508237               -0.53506043 
 Bs8(y):horThyes:Bs1(age)  Bs9(y):horThyes:Bs1(age) 
              -0.53506043               -0.53506043 
Bs10(y):horThyes:Bs1(age) Bs11(y):horThyes:Bs1(age) 
              -0.53506043               -0.53506043 
  Bs1(y):horThno:Bs2(age)   Bs2(y):horThno:Bs2(age) 
              -4.66463940               -3.61567380 
  Bs3(y):horThno:Bs2(age)   Bs4(y):horThno:Bs2(age) 
              -3.61567380               -3.61567380 
  Bs5(y):horThno:Bs2(age)   Bs6(y):horThno:Bs2(age) 
              -3.24975651               -3.20706953 
  Bs7(y):horThno:Bs2(age)   Bs8(y):horThno:Bs2(age) 
              -3.20706946               -3.20706945 
  Bs9(y):horThno:Bs2(age)  Bs10(y):horThno:Bs2(age) 
              -3.20706930               -3.20706928 
 Bs11(y):horThno:Bs2(age)  Bs1(y):horThyes:Bs2(age) 
              -3.20706922               -4.48170547 
 Bs2(y):horThyes:Bs2(age)  Bs3(y):horThyes:Bs2(age) 
              -1.64406879               -1.64406876 
 Bs4(y):horThyes:Bs2(age)  Bs5(y):horThyes:Bs2(age) 
              -1.64406877               -1.64406876 
 Bs6(y):horThyes:Bs2(age)  Bs7(y):horThyes:Bs2(age) 
              -1.64375927               -1.64371731 
 Bs8(y):horThyes:Bs2(age)  Bs9(y):horThyes:Bs2(age) 
              -1.64370939               -1.64079151 
Bs10(y):horThyes:Bs2(age) Bs11(y):horThyes:Bs2(age) 
              -1.64079151               -1.64079151 
  Bs1(y):horThno:Bs3(age)   Bs2(y):horThno:Bs3(age) 
              -5.81230711                0.05056481 
  Bs3(y):horThno:Bs3(age)   Bs4(y):horThno:Bs3(age) 
               0.05056481                0.05056481 
  Bs5(y):horThno:Bs3(age)   Bs6(y):horThno:Bs3(age) 
               0.10852176                1.26559533 
  Bs7(y):horThno:Bs3(age)   Bs8(y):horThno:Bs3(age) 
               1.26559543                1.26559543 
  Bs9(y):horThno:Bs3(age)  Bs10(y):horThno:Bs3(age) 
               1.26559541                1.26559542 
 Bs11(y):horThno:Bs3(age)  Bs1(y):horThyes:Bs3(age) 
               1.26559560              -10.79738919 
 Bs2(y):horThyes:Bs3(age)  Bs3(y):horThyes:Bs3(age) 
              -0.10609881               -0.10607634 
 Bs4(y):horThyes:Bs3(age)  Bs5(y):horThyes:Bs3(age) 
              -0.10602639               -0.06171905 
 Bs6(y):horThyes:Bs3(age)  Bs7(y):horThyes:Bs3(age) 
               0.42513184                0.42513510 
 Bs8(y):horThyes:Bs3(age)  Bs9(y):horThyes:Bs3(age) 
               0.60345715                1.71431247 
Bs10(y):horThyes:Bs3(age) Bs11(y):horThyes:Bs3(age) 
               1.71431247                1.71431247 
  Bs1(y):horThno:Bs4(age)   Bs2(y):horThno:Bs4(age) 
              -6.67668103               -0.58240640 
  Bs3(y):horThno:Bs4(age)   Bs4(y):horThno:Bs4(age) 
              -0.57803023               -0.57803022 
  Bs5(y):horThno:Bs4(age)   Bs6(y):horThno:Bs4(age) 
              -0.57803022               -0.57803022 
  Bs7(y):horThno:Bs4(age)   Bs8(y):horThno:Bs4(age) 
              -0.57744903                0.12457061 
  Bs9(y):horThno:Bs4(age)  Bs10(y):horThno:Bs4(age) 
               0.12457061                0.12457061 
 Bs11(y):horThno:Bs4(age)  Bs1(y):horThyes:Bs4(age) 
               1.73991583               -2.53372848 
 Bs2(y):horThyes:Bs4(age)  Bs3(y):horThyes:Bs4(age) 
              -2.53372814               -2.53372573 
 Bs4(y):horThyes:Bs4(age)  Bs5(y):horThyes:Bs4(age) 
              -1.72329742               -1.72329741 
 Bs6(y):horThyes:Bs4(age)  Bs7(y):horThyes:Bs4(age) 
              -1.72329741               -1.72329741 
 Bs8(y):horThyes:Bs4(age)  Bs9(y):horThyes:Bs4(age) 
              -1.72216694               -1.19995491 
Bs10(y):horThyes:Bs4(age) Bs11(y):horThyes:Bs4(age) 
              -1.19995491               -1.19995491 

$mlt_head
Bs1(head):Bs1(lage) Bs2(head):Bs1(lage) Bs3(head):Bs1(lage) 
        -0.23433114          2.92683356          6.33974656 
Bs4(head):Bs1(lage) Bs1(head):Bs2(lage) Bs2(head):Bs2(lage) 
         6.33974660         -8.13532124         -5.61298736 
Bs3(head):Bs2(lage) Bs4(head):Bs2(lage) Bs1(head):Bs3(lage) 
         0.05343994          3.95259309         -0.52961092 
Bs2(head):Bs3(lage) Bs3(head):Bs3(lage) Bs4(head):Bs3(lage) 
        -0.52961091          1.66316774          3.58119206 
Bs1(head):Bs4(lage) Bs2(head):Bs4(lage) Bs3(head):Bs4(lage) 
        -6.32545993         -6.32546002         -2.39954375 
Bs4(head):Bs4(lage) 
         0.29636387 

$mlt_i
Bs1(waiting) Bs2(waiting) Bs3(waiting) Bs4(waiting) Bs5(waiting) 
  -4.4170560   -0.8544346   -0.4957924   -0.4957922   -0.4957922 
Bs6(waiting) Bs7(waiting) Bs8(waiting) Bs9(waiting) 
  -0.4957922    0.6924308    1.4714237    4.0342457 

$mlt_iris
 oSpecies1:(Intercept)  oSpecies2:(Intercept) oSpecies1:Sepal.Length 
             13.728181              53.578422             -13.867378 
oSpecies2:Sepal.Length  oSpecies1:Sepal.Width  oSpecies2:Sepal.Width 
              8.347304              29.708770              15.966840 
oSpecies1:Petal.Length oSpecies2:Petal.Length  oSpecies1:Petal.Width 
            -35.825550             -52.971958             -34.471215 
 oSpecies2:Petal.Width 
            -43.433117 

$mlt_PSID1976_1
    (Intercept)           hours        nwincome       education 
  -2.4960719635    0.0011754152   -0.0001806024    0.0350875603 
     experience I(experience^2)             age       youngkids 
  -0.0853470093    0.0011091634    0.0322576068    0.5697254032 
        oldkids 
   0.1206583791 

$mlt_PSID1976_2
     Bs1(hours)      Bs2(hours)      Bs3(hours)      Bs4(hours) 
  -2.346317e+00   -1.321075e+00   -1.321075e+00    8.591752e-01 
     Bs5(hours)      Bs6(hours)      Bs7(hours)        nwincome 
   2.142930e+00    2.142930e+00    2.493904e+00   -3.192133e-05 
      education      experience I(experience^2)             age 
   3.585483e-02   -8.535643e-02    1.056934e-03    3.287872e-02 
      youngkids         oldkids 
   5.513237e-01    1.269289e-01 

$mlt_treepipit
ocounts1:Bs1(coverstorey) ocounts2:Bs1(coverstorey) 
                 1.705973                  2.173364 
ocounts3:Bs1(coverstorey) ocounts4:Bs1(coverstorey) 
                 2.173364                  3.109133 
ocounts5:Bs1(coverstorey) ocounts1:Bs2(coverstorey) 
                 4.980606                 -6.365072 
ocounts2:Bs2(coverstorey) ocounts3:Bs2(coverstorey) 
                -6.365072                 -5.551732 
ocounts4:Bs2(coverstorey) ocounts5:Bs2(coverstorey) 
                -5.551732                 -5.551732 
ocounts1:Bs3(coverstorey) ocounts2:Bs3(coverstorey) 
                12.838938                 13.112147 
ocounts3:Bs3(coverstorey) ocounts4:Bs3(coverstorey) 
                13.112147                 13.112147 
ocounts5:Bs3(coverstorey) ocounts1:Bs4(coverstorey) 
                13.112147                 -8.378385 
ocounts2:Bs4(coverstorey) ocounts3:Bs4(coverstorey) 
                -8.378385                 -8.378385 
ocounts4:Bs4(coverstorey) ocounts5:Bs4(coverstorey) 
                -8.378385                 -8.378385 
ocounts1:Bs5(coverstorey) ocounts2:Bs5(coverstorey) 
                 8.881358                  8.881358 
ocounts3:Bs5(coverstorey) ocounts4:Bs5(coverstorey) 
                13.346423                 13.346423 
ocounts5:Bs5(coverstorey) 
                13.346423 

$mlt_w
Bs1(waiting) Bs2(waiting) Bs3(waiting) Bs4(waiting) Bs5(waiting) 
  -4.8137927   -0.4972391   -0.4972391   -0.4972391   -0.4972391 
Bs6(waiting) Bs7(waiting) Bs8(waiting) Bs9(waiting) 
  -0.4972391    0.4987046    2.3184420    2.6377599 

$mlt_w_40
 Bs1(waiting)  Bs2(waiting)  Bs3(waiting)  Bs4(waiting)  Bs5(waiting) 
   -5.6639571    -2.8073101    -2.8073099    -2.8073099    -2.8073088 
 Bs6(waiting)  Bs7(waiting)  Bs8(waiting)  Bs9(waiting) Bs10(waiting) 
   -2.7566002    -0.8960107    -0.8960106    -0.8960106    -0.8960105 
Bs11(waiting) Bs12(waiting) Bs13(waiting) Bs14(waiting) Bs15(waiting) 
   -0.8960105    -0.8960105    -0.8960105    -0.5484649    -0.4363504 
Bs16(waiting) Bs17(waiting) Bs18(waiting) Bs19(waiting) Bs20(waiting) 
   -0.4363504    -0.4363500    -0.4327347    -0.3909195    -0.3880867 
Bs21(waiting) Bs22(waiting) Bs23(waiting) Bs24(waiting) Bs25(waiting) 
   -0.3880440    -0.3880440    -0.3880440    -0.3880440    -0.3880388 
Bs26(waiting) Bs27(waiting) Bs28(waiting) Bs29(waiting) Bs30(waiting) 
   -0.1506264     0.6938409     0.6938410     0.6938410     0.6938410 
Bs31(waiting) Bs32(waiting) Bs33(waiting) Bs34(waiting) Bs35(waiting) 
    0.6938410     0.6938410     1.2448147     1.6910964     1.6910965 
Bs36(waiting) Bs37(waiting) Bs38(waiting) Bs39(waiting) Bs40(waiting) 
    1.6910976     1.6914146     2.4841853     2.6823237     2.6823237 
Bs41(waiting) 
    2.7394833 

R> #library("mlt.docreg")
R> #sapply(mltobj, function(m) eval(parse(text = paste("checkGH(", m, ")"))))
R> 
R> ## ----sessionInfo, echo = FALSE, results = "hide"-------------------------
R> sessionInfo()
R version 3.4.0 (2017-04-21)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 16.04.2 LTS

Matrix products: default
BLAS: /usr/local/lib64/R/lib/libRblas.so
LAPACK: /usr/local/lib64/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=de_CH.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=de_CH.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=de_CH.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=de_CH.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] grid      tools     stats     graphics  grDevices utils     datasets 
[8] methods   base     

other attached packages:
 [1] mgcv_1.8-17         nlme_3.1-131        multcomp_1.4-6     
 [4] TH.data_1.0-8       mvtnorm_1.0-6       colorspace_1.3-2   
 [7] latticeExtra_0.6-28 RColorBrewer_1.1-2  flexsurv_1.1       
[10] sandwich_2.3-4      HSAUR3_1.0-6        nnet_7.3-12        
[13] MASS_7.3-47         gridExtra_2.2.1     lattice_0.20-35    
[16] truncreg_0.2-4      maxLik_1.3-4        miscTools_0.6-22   
[19] prodlim_1.6.1       eha_2.4-4           survival_2.41-3    
[22] mlt_0.2-0           basefun_0.0-38      variables_0.0-30   

loaded via a namespace (and not attached):
 [1] Rcpp_0.12.10       compiler_3.4.0     evaluate_0.10     
 [4] gtable_0.2.0       Matrix_1.2-8       polynom_1.3-9     
 [7] stringr_1.2.0      knitr_1.15.1       BB_2014.10-1      
[10] deSolve_1.14       mstate_0.2.10      orthopolynom_1.0-5
[13] lava_1.5           alabama_2015.3-1   magrittr_1.5      
[16] codetools_0.2-15   splines_3.4.0      numDeriv_2016.8-1 
[19] quadprog_1.5-5     stringi_1.1.5      muhaz_1.2.6       
[22] zoo_1.8-0         
R> 
R> 
> proc.time()
   user  system elapsed 
130.840   2.084 132.975 
