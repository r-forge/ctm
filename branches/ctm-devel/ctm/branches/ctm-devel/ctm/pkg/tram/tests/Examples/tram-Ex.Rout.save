
R version 4.3.2 (2023-10-31) -- "Eye Holes"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "tram"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('tram')
Loading required package: mlt
Loading required package: basefun
Loading required package: variables
Loading required package: mvtnorm
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Aareg")
> ### * Aareg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Aareg
> ### Title: Aalen Additive Hazards Model
> ### Aliases: Aareg
> ### Keywords: models regression survival smooth
> 
> ### ** Examples
> 
> 
>   data("GBSG2", package = "TH.data")
>   library("survival")
>   GBSG2$time <- as.numeric(GBSG2$time)
>   GBSG2$y <- with(GBSG2, Surv(time, cens))
> 
>   ### Cox proportional hazards model
>   m1 <- Coxph(y ~ horTh, data = GBSG2, support = c(1, 1500))
>   logLik(m1)
'log Lik.' -2607.216 (df=8)
> 
>   ### Aalen additive hazards model with time-varying effects
>   m2 <- Aareg(y | horTh ~ 1, data = GBSG2, support = c(1, 1500))
>   logLik(m2)
'log Lik.' -2607.966 (df=12)
> 
>   ### compare the hazard functions
>   nd <- data.frame(horTh = unique(GBSG2$horTh))
>   col <- 1:2
>   lty <- 1:2
>   plot(as.mlt(m1), newdata = nd, type = "hazard", 
+        col = col, lty = lty[1], xlab = "time")
>   plot(as.mlt(m2), newdata = nd, type = "hazard", 
+        col = col, lty = 2, add = TRUE)
>   legend("topright", col = rep(col, each = 2), 
+          lty = rep(1:2), bty = "n",
+          legend = paste(rep(paste("horTh:", 
+                                   levels(nd$horTh)), each = 2),
+                         rep(c("Cox", "Aalen"), 2)))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("BoxCox")
> ### * BoxCox
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BoxCox
> ### Title: (Similar to) Box-Cox Models
> ### Aliases: BoxCox
> ### Keywords: models regression smooth
> 
> ### ** Examples
> 
> 
>   data("BostonHousing2", package = "mlbench")
> 
>   lm(cmedv ~ crim + zn + indus + chas + nox + rm + age + dis + 
+              rad + tax + ptratio + b + lstat, data = BostonHousing2)

Call:
lm(formula = cmedv ~ crim + zn + indus + chas + nox + rm + age + 
    dis + rad + tax + ptratio + b + lstat, data = BostonHousing2)

Coefficients:
(Intercept)         crim           zn        indus        chas1          nox  
  3.637e+01   -1.062e-01    4.772e-02    2.325e-02    2.692e+00   -1.774e+01  
         rm          age          dis          rad          tax      ptratio  
  3.789e+00    5.749e-04   -1.502e+00    3.038e-01   -1.270e-02   -9.239e-01  
          b        lstat  
  9.228e-03   -5.307e-01  

> 
>   BoxCox(cmedv ~ chas + crim + zn + indus + nox + 
+                  rm + age + dis + rad + tax + ptratio + b + lstat, 
+                  data = BostonHousing2)

  Non-normal (Box-Cox-Type) Linear Regression Model 

Call:
BoxCox(formula = cmedv ~ chas + crim + zn + indus + nox + rm + 
    age + dis + rad + tax + ptratio + b + lstat, data = BostonHousing2)

Coefficients:
       chas1         crim           zn        indus          nox           rm 
 0.583348332 -0.043726668  0.006536546  0.012388221 -4.847838876  0.477892294 
         age          dis          rad          tax      ptratio            b 
-0.002987777 -0.310677878  0.081438876 -0.003723606 -0.225009996  0.002615711 
       lstat 
-0.166202396 

Log-Likelihood:
 -1355.894 (df = 20)

> 
> 
> 
> cleanEx()
> nameEx("Colr")
> ### * Colr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Colr
> ### Title: Continuous Outcome Logistic Regression
> ### Aliases: Colr
> ### Keywords: models regression smooth
> 
> ### ** Examples
> 
> 
>   data("BostonHousing2", package = "mlbench")
> 
>   lm(cmedv ~ crim + zn + indus + chas + nox + rm + age + dis + 
+              rad + tax + ptratio + b + lstat, data = BostonHousing2)

Call:
lm(formula = cmedv ~ crim + zn + indus + chas + nox + rm + age + 
    dis + rad + tax + ptratio + b + lstat, data = BostonHousing2)

Coefficients:
(Intercept)         crim           zn        indus        chas1          nox  
  3.637e+01   -1.062e-01    4.772e-02    2.325e-02    2.692e+00   -1.774e+01  
         rm          age          dis          rad          tax      ptratio  
  3.789e+00    5.749e-04   -1.502e+00    3.038e-01   -1.270e-02   -9.239e-01  
          b        lstat  
  9.228e-03   -5.307e-01  

> 
>   Colr(cmedv ~ chas + crim + zn + indus + nox + 
+                rm + age + dis + rad + tax + ptratio + b + lstat, 
+                data = BostonHousing2)

  Continuous Outcome Logistic Regression 

Call:
Colr(formula = cmedv ~ chas + crim + zn + indus + nox + rm + 
    age + dis + rad + tax + ptratio + b + lstat, data = BostonHousing2)

Coefficients:
       chas1         crim           zn        indus          nox           rm 
-0.942113986  0.082016193 -0.009023007 -0.028258752  6.879169021 -1.596149073 
         age          dis          rad          tax      ptratio            b 
 0.009889381  0.490964969 -0.123709662  0.006587032  0.407752275 -0.006215433 
       lstat 
 0.281306137 

Log-Likelihood:
 -1328.019 (df = 20)

> 
> 
> 
> cleanEx()
> nameEx("Coxph")
> ### * Coxph
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Coxph
> ### Title: Cox Proportional Hazards Model
> ### Aliases: Coxph
> ### Keywords: models regression survival smooth
> 
> ### ** Examples
> 
> 
>   data("GBSG2", package = "TH.data")
> 
>   library("survival")
>   (m1 <- coxph(Surv(time, cens) ~ horTh, data = GBSG2))
Call:
coxph(formula = Surv(time, cens) ~ horTh, data = GBSG2)

            coef exp(coef) se(coef)      z      p
horThyes -0.3640    0.6949   0.1250 -2.911 0.0036

Likelihood ratio test=8.82  on 1 df, p=0.002977
n= 686, number of events= 299 
> 
>   (m2 <- Coxph(Surv(time, cens) ~ horTh, data = GBSG2))

  Parametric Linear Cox Regression Model 

Call:
Coxph(formula = Surv(time, cens) ~ horTh, data = GBSG2)

Coefficients:
  horThyes 
-0.3713396 

Log-Likelihood:
 -2623.16 (df = 8)

> 
>   ### McLain & Ghosh (2013)
>   (m3 <- Coxph(Surv(time, cens) ~ horTh, data = GBSG2, 
+                frailty = "Gamma"))

Call:
Coxph(formula = Surv(time, cens) ~ horTh, data = GBSG2, frailty = "Gamma")

Type:  continuous linear transformation model (transformed GammaFrailty(rho = 29.097906) distribution)
Log-Likelihood: -2611.192 (df = 8)

Coefficients: -0.04021965 6.029464 12.24858 12.24858 16.41298 20.0818 26.49741 -1.002725

> 
>   ### Wald intervals
>   confint(m1)
              2.5 %    97.5 %
horThyes -0.6090927 -0.118927
>   confint(m2)
              2.5 %     97.5 %
horThyes -0.6163865 -0.1262927
>   ### profile likelihood interval
>   confint(profile(m2))
     2.5 %     97.5 % 
-0.6204689 -0.1297684 
>   ### score interval
>   confint(score_test(m2))
              2.5 %     97.5 %
horThyes -0.6158706 -0.1268131
>   ### permutation score interval; uses permutation distribution
>   ### see coin::independence_test
>   ## Not run: confint(perm_test(m2))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("Lehmann")
> ### * Lehmann
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Lehmann
> ### Title: Proportional Reverse Time Hazards Linear Regression
> ### Aliases: Lehmann
> ### Keywords: models regression smooth
> 
> ### ** Examples
> 
> 
>   data("BostonHousing2", package = "mlbench")
> 
>   lm(cmedv ~ crim + zn + indus + chas + nox + rm + age + dis + 
+              rad + tax + ptratio + b + lstat, data = BostonHousing2)

Call:
lm(formula = cmedv ~ crim + zn + indus + chas + nox + rm + age + 
    dis + rad + tax + ptratio + b + lstat, data = BostonHousing2)

Coefficients:
(Intercept)         crim           zn        indus        chas1          nox  
  3.637e+01   -1.062e-01    4.772e-02    2.325e-02    2.692e+00   -1.774e+01  
         rm          age          dis          rad          tax      ptratio  
  3.789e+00    5.749e-04   -1.502e+00    3.038e-01   -1.270e-02   -9.239e-01  
          b        lstat  
  9.228e-03   -5.307e-01  

> 
>   Lehmann(cmedv ~ chas + crim + zn + indus + nox + 
+                   rm + age + dis + rad + tax + ptratio + b + lstat, 
+                   data = BostonHousing2)

  Proportional Reverse Time Hazards Linear Regression Model 

Call:
Lehmann(formula = cmedv ~ chas + crim + zn + indus + nox + rm + 
    age + dis + rad + tax + ptratio + b + lstat, data = BostonHousing2)

Coefficients:
       chas1         crim           zn        indus          nox           rm 
 0.409402951 -0.044220272  0.006663756  0.024520371 -4.995295666  1.005577631 
         age          dis          rad          tax      ptratio            b 
-0.008050824 -0.333729145  0.066735634 -0.005567626 -0.254062018  0.002660399 
       lstat 
-0.168819454 

Log-Likelihood:
 -1329.19 (df = 20)

> 
> 
> 
> cleanEx()
> nameEx("Lm")
> ### * Lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Lm
> ### Title: Normal Linear Model
> ### Aliases: Lm
> ### Keywords: models regression
> 
> ### ** Examples
> 
> 
>   data("BostonHousing2", package = "mlbench")
> 
>   lm(cmedv ~ crim + zn + indus + chas + nox + rm + age + dis + 
+              rad + tax + ptratio + b + lstat, data = BostonHousing2)

Call:
lm(formula = cmedv ~ crim + zn + indus + chas + nox + rm + age + 
    dis + rad + tax + ptratio + b + lstat, data = BostonHousing2)

Coefficients:
(Intercept)         crim           zn        indus        chas1          nox  
  3.637e+01   -1.062e-01    4.772e-02    2.325e-02    2.692e+00   -1.774e+01  
         rm          age          dis          rad          tax      ptratio  
  3.789e+00    5.749e-04   -1.502e+00    3.038e-01   -1.270e-02   -9.239e-01  
          b        lstat  
  9.228e-03   -5.307e-01  

> 
>   Lm(cmedv ~ chas + crim + zn + indus + nox + 
+              rm + age + dis + rad + tax + ptratio + b + lstat, 
+              data = BostonHousing2)

  Normal Linear Regression Model 

Call:
Lm(formula = cmedv ~ chas + crim + zn + indus + nox + rm + age + 
    dis + rad + tax + ptratio + b + lstat, data = BostonHousing2)

Coefficients:
        chas1          crim            zn         indus           nox 
 0.5804601369 -0.0229022318  0.0102916112  0.0050123113 -3.8258970465 
           rm           age           dis           rad           tax 
 0.8171925213  0.0001237452 -0.3238563897  0.0655030763 -0.0027396573 
      ptratio             b         lstat 
-0.1992295991  0.0019901578 -0.1144339783 

Log-Likelihood:
 -1494.245 (df = 15)

> 
> 
> 
> cleanEx()
> nameEx("Polr")
> ### * Polr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Polr
> ### Title: Ordered Categorical Regression
> ### Aliases: Polr
> ### Keywords: models regression
> 
> ### ** Examples
> 
> 
>   data("wine", package = "ordinal")
> 
>   library("MASS")
>   polr(rating ~ temp + contact, data = wine)
Call:
polr(formula = rating ~ temp + contact, data = wine)

Coefficients:
  tempwarm contactyes 
  2.503073   1.527786 

Intercepts:
      1|2       2|3       3|4       4|5 
-1.344374  1.250800  3.466871  5.006386 

Residual Deviance: 172.9838 
AIC: 184.9838 
> 
>   Polr(rating ~ temp + contact, data = wine)

  Proportional Odds Regression Model 

Call:
Polr(formula = rating ~ temp + contact, data = wine)

Coefficients:
  tempwarm contactyes 
  2.503109   1.527802 

Log-Likelihood:
 -86.49192 (df = 6)

> 
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’

> nameEx("Survreg")
> ### * Survreg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Survreg
> ### Title: Parametric Survival Models
> ### Aliases: Survreg
> ### Keywords: models regression survival
> 
> ### ** Examples
> 
> 
>   data("GBSG2", package = "TH.data")
> 
>   library("survival")
>   survreg(Surv(time, cens) ~ horTh, data = GBSG2)
Call:
survreg(formula = Surv(time, cens) ~ horTh, data = GBSG2)

Coefficients:
(Intercept)    horThyes 
  7.6084486   0.3059506 

Scale= 0.7780247 

Loglik(model)= -2632.1   Loglik(intercept only)= -2637.3
	Chisq= 10.36 on 1 degrees of freedom, p= 0.00129 
n= 686 
> 
>   Survreg(Surv(time, cens) ~ horTh, data = GBSG2)

  Weibull Linear Regression Model 

Call:
Survreg(formula = Surv(time, cens) ~ horTh, data = GBSG2)

Coefficients:
 horThyes 
0.3932393 

Log-Likelihood:
 -2632.096 (df = 3)

> 
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("mmlt")
> ### * mmlt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mmlt
> ### Title: Multivariate Conditional Transformation Models
> ### Aliases: mmlt mmltoptim coef.cmmlt coef.mmmlt predict.mmlt
> ###   simulate.mmlt
> ### Keywords: models
> 
> ### ** Examples
> 
> 
>   data("cars")
> 
>   ### fit unconditional bivariate distribution of speed and distance to stop
>   ## fit unconditional marginal transformation models
>   m_speed <- BoxCox(speed ~ 1, data = cars, support = ss <- c(4, 25), 
+                     add = c(-5, 5))
>   m_dist <- BoxCox(dist ~ 1, data = cars, support = sd <- c(0, 120), 
+                    add = c(-5, 5))
> 
>   ## fit multivariate unconditional transformation model
>   m_speed_dist <- mmlt(m_speed, m_dist, formula = ~ 1, data = cars)
> 
>   ## log-likelihood
>   logLik(m_speed_dist)
'log Lik.' -348.4534 (df=15)
>   sum(predict(m_speed_dist, newdata = cars, type = "density", log = TRUE))
[1] -348.4534
> 
>   ## Wald test of independence of speed and dist (the "dist.sped.(Intercept)"
>   ## coefficient)
>   summary(m_speed_dist)

 

Call:
mmlt(m_speed, m_dist, formula = ~1, data = cars)

Coefficients:
                      Estimate Std. Error z value Pr(>|z|)    
sped.Bs1(speed)        -2.3342     0.3667  -6.366 1.94e-10 ***
sped.Bs2(speed)        -1.2781     0.3095  -4.129 3.64e-05 ***
sped.Bs3(speed)        -1.2781     0.3095  -4.129 3.64e-05 ***
sped.Bs4(speed)         0.4783     0.5698   0.839  0.40125    
sped.Bs5(speed)         0.5184     0.2734   1.896  0.05800 .  
sped.Bs6(speed)         0.5184     0.2734   1.896  0.05800 .  
sped.Bs7(speed)         2.0653     0.3236   6.383 1.73e-10 ***
dist.Bs1(dist)         -2.6999     0.4591  -5.881 4.09e-09 ***
dist.Bs2(dist)         -0.3250     0.6272  -0.518  0.60432    
dist.Bs3(dist)          0.5147     0.4242   1.213  0.22504    
dist.Bs4(dist)          0.5147     0.4242   1.213  0.22504    
dist.Bs5(dist)          1.4484     0.8769   1.652  0.09860 .  
dist.Bs6(dist)          1.6857     0.5832   2.891  0.00384 ** 
dist.Bs7(dist)          2.3246     0.4504   5.161 2.46e-07 ***
dist.sped.(Intercept)  -1.6332     0.2735  -5.972 2.34e-09 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Log-Likelihood:
 -348.4534 (df = 15)

> 
>   ## LR test comparing to independence model
>   LR <- 2 * (logLik(m_speed_dist) - logLik(m_speed) - logLik(m_dist))
>   pchisq(LR, df = 1, lower.tail = FALSE)
'log Lik.' 1.164858e-15 (df=15)
> 
>   ## constrain lambda to zero and fit independence model
>   ## => log-likelihood is the sum of the marginal log-likelihoods
>   mI <- mmlt(m_speed, m_dist, formula = ~1, data = cars, 
+              fixed = c("dist.sped.(Intercept)" = 0))
>   logLik(m_speed) + logLik(m_dist)
'log Lik.' -380.5183 (df=7)
>   logLik(mI)
'log Lik.' -380.5183 (df=14)
> 
>   ## linear correlation, ie Pearson correlation of speed and dist after
>   ## transformation to bivariate normality
>   (r <- coef(m_speed_dist, type = "Corr"))
, , 1

          sped      dist
sped 1.0000000 0.8528304
dist 0.8528304 1.0000000

>   
>   ## Spearman's rho (rank correlation) of speed and dist on original scale
>   (rs <- coef(m_speed_dist, type = "Spearman"))
, , 1

          sped      dist
sped 1.0000000 0.8413424
dist 0.8413424 1.0000000

> 
>   ## evaluate joint and marginal densities (needs to be more user-friendly)
>   nd <- expand.grid(c(nd_s <- mkgrid(m_speed, 100), nd_d <- mkgrid(m_dist, 100)))
>   nd$d <- predict(m_speed_dist, newdata = nd, type = "density")
> 
>   ## compute marginal densities
>   nd_s <- as.data.frame(nd_s)
>   nd_s$d <- predict(m_speed_dist, newdata = nd_s, margins = 1L,
+                     type = "density")
>   nd_d <- as.data.frame(nd_d)
>   nd_d$d <- predict(m_speed_dist, newdata = nd_d, margins = 2L, 
+                     type = "density")
> 
>   ## plot bivariate and marginal distribution
>   col1 <- rgb(.1, .1, .1, .9)
>   col2 <- rgb(.1, .1, .1, .5)
>   w <- c(.8, .2)
>   layout(matrix(c(2, 1, 4, 3), nrow = 2), width = w, height = rev(w))
>   par(mai = c(1, 1, 0, 0) * par("mai"))
>   sp <- unique(nd$speed)
>   di <- unique(nd$dist)
>   d <- matrix(nd$d, nrow = length(sp))
>   contour(sp, di, d, xlab = "Speed (in mph)", ylab = "Distance (in ft)", xlim = ss, ylim = sd,
+           col = col1)
>   points(cars$speed, cars$dist, pch = 19, col = col2)
>   mai <- par("mai")
>   par(mai = c(0, 1, 0, 1) * mai)
>   plot(d ~ speed, data = nd_s, xlim = ss, type = "n", axes = FALSE, 
+        xlab = "", ylab = "")
>   polygon(nd_s$speed, nd_s$d, col = col2, border = FALSE)
>   par(mai = c(1, 0, 1, 0) * mai)
>   plot(dist ~ d, data = nd_d, ylim = sd, type = "n", axes = FALSE, 
+        xlab = "", ylab = "")
>   polygon(nd_d$d, nd_d$dist, col = col2, border = FALSE)
> 
>   ### NOTE: marginal densities are NOT normal, nor is the joint
>   ### distribution. The non-normal shape comes from the data-driven 
>   ### transformation of both variables to joint normality in this model.
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("mtram")
> ### * mtram
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mtram
> ### Title: Transformation Models for Clustered Data
> ### Aliases: mtram
> ### Keywords: models
> 
> ### ** Examples
> 
> 
>   ### For illustrations see
>   ## vignette("mtram", package = "tram")
>   ## or
>   ## demo("mtram", package = "tram")
> 
> 
> 
> 
> cleanEx()
> nameEx("perm_test")
> ### * perm_test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: perm_test
> ### Title: Permutation Transformation Tests
> ### Aliases: perm_test perm_test.tram
> 
> ### ** Examples
> 
> 
>   ## Tritiated Water Diffusion Across Human Chorioamnion
>   ## Hollander and Wolfe (1999, p. 110, Tab. 4.1)
>   diffusion <- data.frame(
+       pd = c(0.80, 0.83, 1.89, 1.04, 1.45, 1.38, 1.91, 1.64, 0.73, 1.46,
+              1.15, 0.88, 0.90, 0.74, 1.21),
+       age = factor(rep(c("At term", "12-26 Weeks"), c(10, 5)))
+   )
> 
>   ### plot the two quantile functions
>   boxplot(pd ~ age, data = diffusion)
> 
>   ### the Wilcoxon rank sum test, with a confidence interval
>   ### for a median shift
>   wilcox.test(pd ~ age, data = diffusion, conf.int = TRUE, exact = TRUE)

	Wilcoxon rank sum exact test

data:  pd by age
W = 15, p-value = 0.2544
alternative hypothesis: true location shift is not equal to 0
95 percent confidence interval:
 -0.76  0.15
sample estimates:
difference in location 
                -0.305 

> 
>   ### a corresponding parametric transformation model with a log-odds ratio
>   ### difference parameter, ie a difference on the log-odds scale
>   md <- Colr(pd ~ age, data = diffusion)
> 
>   ### assess model fit by plotting estimated distribution fcts
>   agef <- sort(unique(diffusion$age))
>   col <- c("black", "darkred")
>   plot(as.mlt(md), newdata = data.frame(age = agef),
+        type = "distribution", col = col)
>   legend("bottomright", col = col, lty = 1, legend = levels(agef), 
+          bty = "n", pch = 19)
>   ## compare with ECDFs: not too bad (but not good, either)
>   npfit <- with(diffusion, tapply(pd, age, ecdf))
>   lines(npfit[[1]], col = col[1])
>   lines(npfit[[2]], col = col[2])
> 
>   ### Wald confidence interval
>   confint(md)
               2.5 %    97.5 %
ageAt term -3.346448 0.5496213
> 
>   ### Likelihood confidence interval
>   confint(profile(md))
     2.5 %     97.5 % 
-3.4432762  0.4982587 
> 
>   ### Score confidence interval
>   confint(score_test(md))
               2.5 %    97.5 %
ageAt term -3.268073 0.4791082
>   confint(score_test(md, Taylor = TRUE))
Warning in score_test.tram(md, Taylor = TRUE) :
  cannot compute score interval, returning Wald interval
               2.5 %    97.5 %
ageAt term -3.346448 0.5496213
> 
>   ### exact permutation score test
>   (pt <- perm_test(md, confint = TRUE, distribution = "exact"))

	Exact Permutation Transformation Score Test

data:  Colr(formula = pd ~ age, data = diffusion)
Z = 1.3271, p-value = 0.1915
alternative hypothesis: true log-odds ratio for ageAt term is not equal to 0
95 percent confidence interval:
 -3.4225136  0.6038877
sample estimates:
log-odds ratio for ageAt term 
                    -1.398413 

>   (pt <- perm_test(md, confint = TRUE, distribution = "exact", 
+                    Taylor = TRUE))
Warning in perm_test.tram(md, confint = TRUE, distribution = "exact", Taylor = TRUE) :
  cannot compute score interval, returning Wald interval

	Exact Permutation Transformation Score Test

data:  Colr(formula = pd ~ age, data = diffusion)
Z = 1.3271, p-value = 0.1915
alternative hypothesis: true log-odds ratio for ageAt term is not equal to 0
95 percent confidence interval:
 -3.5169102  0.6890073
sample estimates:
log-odds ratio for ageAt term 
                    -1.398413 

> 
>   ### compare with probabilistic indices obtained from asht::wmwTest
>   if (require("asht", warn.conflicts = FALSE)) {
+       print(wt2 <- wmwTest(pd ~ I(relevel(age, "At term")), 
+                       data = diffusion, method = "exact.ce"))
+       ### as log-odds ratios
+       print(PI(prob = wt2$conf.int))
+       print(PI(prob = wt2$estimate))
+   }
Loading required package: asht
Loading required package: exact2x2
Loading required package: exactci
Loading required package: ssanv
Loading required package: testthat
Loading required package: bpcp
Loading required package: survival
Loading required package: ggplot2

Attaching package: ‘ggplot2’

The following object is masked from ‘package:variables’:

    unit

Loading required package: coin

Attaching package: ‘coin’

The following object is masked from ‘package:testthat’:

    expectation

The following object is masked from ‘package:variables’:

    support


	exact Wilcoxon-Man-Whitney test (confidence interval requires
	proportional odds assumption, but test does not)

data:  pd by I(relevel(age, "At term"))
Mann-Whitney estimate = 0.3, p-value = 0.2544
alternative hypothesis: two distributions are not equal
95 percent confidence interval:
 0.08292978 0.63269022
sample estimates:
Mann-Whitney estimate 
                  0.3 

[1] -3.4695871  0.8136834
Mann-Whitney estimate 
            -1.263612 
> 
> 
> 
> cleanEx()

detaching ‘package:asht’, ‘package:coin’, ‘package:bpcp’,
  ‘package:ggplot2’, ‘package:survival’, ‘package:exact2x2’,
  ‘package:exactci’, ‘package:testthat’, ‘package:ssanv’

> nameEx("tram-methods")
> ### * tram-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tram-methods
> ### Title: Methods for Stratified Linear Transformation Models
> ### Aliases: as.mlt.tram model.frame.tram model.matrix.tram
> ###   model.matrix.stram coef.tram coef.Lm coef.Survreg vcov.tram
> ###   logLik.tram estfun.tram predict.tram predict.stram residuals.tram
> ###   plot.tram plot.ROCtram PI PI.tram PI.default OVL OVL.tram OVL.default
> ###   TV TV.tram TV.default L1 L1.tram L1.default ROC ROC.tram ROC.default
> 
> ### ** Examples
> 
> 
>     data("BostonHousing2", package = "mlbench")
> 
>     ### fit non-normal Box-Cox type linear model with two
>     ### baseline functions (for houses near and off Charles River)
>     BC_BH_2 <- BoxCox(cmedv | 0 + chas ~ crim + zn + indus + nox + 
+                       rm + age + dis + rad + tax + ptratio + b + lstat,
+                       data = BostonHousing2)
>     logLik(BC_BH_2)
'log Lik.' -1354.178 (df=26)
> 
>     ### classical likelihood inference
>     summary(BC_BH_2)

 (Stratified) Non-normal (Box-Cox-Type) Linear Regression Model 

Call:
BoxCox(formula = cmedv | 0 + chas ~ crim + zn + indus + nox + 
    rm + age + dis + rad + tax + ptratio + b + lstat, data = BostonHousing2)

Coefficients:
          Estimate Std. Error z value Pr(>|z|)    
crim    -0.0437659  0.0074057  -5.910 3.43e-09 ***
zn       0.0065372  0.0029506   2.216   0.0267 *  
indus    0.0116043  0.0131108   0.885   0.3761    
nox     -4.9080706  0.8459312  -5.802 6.55e-09 ***
rm       0.4924844  0.0955533   5.154 2.55e-07 ***
age     -0.0029632  0.0028476  -1.041   0.2981    
dis     -0.3144112  0.0439520  -7.154 8.46e-13 ***
rad      0.0826306  0.0142873   5.783 7.32e-09 ***
tax     -0.0037949  0.0008033  -4.724 2.31e-06 ***
ptratio -0.2250843  0.0286402  -7.859 3.77e-15 ***
b        0.0026143  0.0005754   4.543 5.53e-06 ***
lstat   -0.1646966  0.0122825 -13.409  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Log-Likelihood:
 -1354.178 (df = 26)
Likelihood-ratio Test: Chisq = 829.0927 on 12 degrees of freedom; p = < 2.2e-16

> 
>     ### coefficients of the linear predictor
>     coef(BC_BH_2)
        crim           zn        indus          nox           rm          age 
-0.043765872  0.006537248  0.011604276 -4.908070636  0.492484386 -0.002963193 
         dis          rad          tax      ptratio            b        lstat 
-0.314411206  0.082630626 -0.003794881 -0.225084312  0.002614309 -0.164696585 
> 
>     ### plot linear predictor (mean of _transformed_ response) 
>     ### vs. observed values
>     plot(predict(BC_BH_2, type = "lp"), BostonHousing2$cmedv)
> 
>     ### all coefficients
>     coef(BC_BH_2, with_baseline = TRUE)
Bs1(cmedv):chas0 Bs2(cmedv):chas0 Bs3(cmedv):chas0 Bs4(cmedv):chas0 
    -9.983050428     -8.594696214     -7.859976417     -4.956465532 
Bs5(cmedv):chas0 Bs6(cmedv):chas0 Bs7(cmedv):chas0 Bs1(cmedv):chas1 
    -4.956465562     -4.454160776     -4.037253413    -11.114682072 
Bs2(cmedv):chas1 Bs3(cmedv):chas1 Bs4(cmedv):chas1 Bs5(cmedv):chas1 
    -8.669143878     -8.669143976     -5.271497932     -5.271497904 
Bs6(cmedv):chas1 Bs7(cmedv):chas1             crim               zn 
    -4.828830306     -4.539343484     -0.043765872      0.006537248 
           indus              nox               rm              age 
     0.011604276     -4.908070636      0.492484386     -0.002963193 
             dis              rad              tax          ptratio 
    -0.314411206      0.082630626     -0.003794881     -0.225084312 
               b            lstat 
     0.002614309     -0.164696585 
> 
>     ### compute predicted median along with 10% and 90% quantile for the first
>     ### observations
>     predict(BC_BH_2, newdata = BostonHousing2[1:3,], type = "quantile",
+             prob = c(.1, .5, .9))
       
prob        [,1]     [,2]     [,3]
    0.1 22.89642 19.98724 23.43964
    0.5 27.62621 23.50814 28.62956
    0.9 37.38451 28.76177 38.97438
> 
>     ### plot the predicted density for these observations
>     plot(BC_BH_2, newdata = BostonHousing2[1:3, -1],
+          which = "distribution", type = "density", K = 1000)
> 
>     ### evaluate the two baseline transformations, with confidence intervals
>     nd <- model.frame(BC_BH_2)[1:2, -1]
>     nd$chas <- factor(c("0", "1"))
>     library("colorspace")
>     col <- diverge_hcl(2, h = c(246, 40), c = 96, l = c(65, 90))
>     fill <- diverge_hcl(2, h = c(246, 40), c = 96, l = c(65, 90), alpha = .3)
>     plot(BC_BH_2, which = "baseline only", newdata = nd, col = col,
+          confidence = "interval", fill = fill, lwd = 2,
+          xlab = "Median Value", ylab = expression(h[Y]))
>     legend("bottomright", lty = 1, col = col, 
+             title = "Near Charles River", legend = c("no", "yes"), bty = "n")
> 
>     ### cars data; with quantile functions
>     plot(dist ~ speed, data = cars)
>     m <- Colr(dist ~ speed, data = cars)
>     q <- predict(as.mlt(m), newdata = data.frame(speed = s <- 6:25),
+                  type = "quantile", prob = c(1, 5, 9) / 10)
>     lines(s, q[1,])
>     lines(s, q[2,])
>     lines(s, q[3,])
> 
>     nd <- data.frame(speed = s <- as.double(1:5 * 5))
>     
>     # Prob(dist at speed s > dist at speed 0)
>     # speed 0 is reference, not a good choice here
>     PI(m, newdata = nd)
          [,1]      [,2]      [,3]      [,4]      [,5]
[1,] 0.8589555 0.9781801 0.9975257 0.9997579 0.9999781
> 
>     # Prob(dist at speed s > dist at speed 15)
>     lp15 <- c(predict(m, newdata = data.frame(speed = 15)))
>     PI(m, newdata = nd, reference = lp15)
           [,1]      [,2] [,3]      [,4]      [,5]
[1,] 0.02181988 0.1410445  0.5 0.8589555 0.9781801
>     PI(m, newdata = nd, reference = nd[3,,drop = FALSE])
           [,1]      [,2] [,3]      [,4]      [,5]
[1,] 0.02181988 0.1410445  0.5 0.8589555 0.9781801
> 
>     # Prob(dist at speed s' > dist at speed s)
>     PI(m, newdata = nd, reference = nd)
          1         2         3         4
2 0.8589555                              
3 0.9781801 0.8589555                    
4 0.9975257 0.9781801 0.8589555          
5 0.9997579 0.9975257 0.9781801 0.8589555
>     # essentially:
>     lp <- predict(m, newdata = nd)
>     PI(object = dist(lp))
          1         2         3         4
2 0.8589555                              
3 0.9781801 0.8589555                    
4 0.9975257 0.9781801 0.8589555          
5 0.9997579 0.9975257 0.9781801 0.8589555
>     # same, with simultaneous confidence intervals
>     PI(m, newdata = nd, reference = nd, conf.level = .95)
     Estimate       lwr       upr
1-2 0.8589555 0.7810311 0.9136358
1-3 0.9781801 0.9324247 0.9936252
2-3 0.8589555 0.7810311 0.9136358
1-4 0.9975257 0.9835327 0.9996665
2-4 0.9781801 0.9324247 0.9936252
3-4 0.8589555 0.7810311 0.9136358
1-5 0.9997579 0.9965062 0.9999849
2-5 0.9975257 0.9835327 0.9996665
3-5 0.9781801 0.9324247 0.9936252
4-5 0.8589555 0.7810311 0.9136358
attr(,"conf.level")
[1] 0.95
attr(,"calpha")
[1] 1.960362
> 
>     # plot ROC curves + confidence bands
>     # compare speed 20 and 25 to speed 15
>     plot(ROC(m, newdata = nd[4:5,,drop = FALSE],
+              reference = nd[3,,drop = FALSE],
+              conf.level = 0.95))
> 
>     # Overlap of conditional densities at speed s' and s
>     OVL(m, newdata = nd, reference = nd)
           1          2          3          4
2 0.42053821                                 
3 0.13239674 0.42053821                      
4 0.03705084 0.13239674 0.42053821           
5 0.01000088 0.03705084 0.13239674 0.42053821
> 
>     ### ROC analysis (takes too long for CRAN Windows)
>     if (require("mlbench") && .Platform$OS.type != "windows") {
+ 
+         layout(matrix(1:4, nrow = 2))
+         data("PimaIndiansDiabetes2", package = "mlbench")
+         dia <- sort(unique(PimaIndiansDiabetes2$diabetes))
+         nd <- data.frame(diabetes = dia, 
+                          age = 29, mass = 32) ### median values
+ 
+         ### unconditional ROC analysis: glucose tolerance test
+         m0 <- Colr(glucose ~ diabetes, data = PimaIndiansDiabetes2)
+         # ROC curve + confidence band
+         plot(ROC(m0, newdata = nd[2,,drop = FALSE], conf.level = .95)) 
+         # Wald interval for AUC
+         PI(m0, newdata = nd[2,,drop = FALSE], conf.level = .95)
+         # score interval for AUC
+         PI(-c(coef(m0), score_test(m0)$conf.int[2:1]))
+ 
+         ### adjusted ROC analysis for age and mass
+         m1 <- Colr(glucose ~ diabetes + age + mass, data = PimaIndiansDiabetes2)
+         # ROC curve + confidence band (this is the same for all ages /
+         # masses)
+         plot(ROC(m1, newdata = nd[2,,drop = FALSE], 
+                      reference = nd[1,,drop = FALSE], 
+                  conf.level = .95))
+         # Wald interval for adjusted AUC
+         PI(m1, newdata = nd[2,,drop = FALSE], reference = nd[1,,drop = FALSE], 
+            conf.level = .95)
+         # Score interval for adjusted AUC
+         PI(-c(coef(m1)[1], score_test(m1, names(coef(m1))[1])$conf.int[2:1]))
+ 
+         ### conditional ROC analysis: AUC regression ~ age + mass
+         m2 <- Colr(glucose ~ diabetes * (age + mass), data = PimaIndiansDiabetes2)
+         # ROC curve for a person with age = 29 and mass = 32
+         plot(ROC(m2, newdata = nd[2,,drop = FALSE], 
+                      reference = nd[1,,drop = FALSE], 
+                  conf.level = .95))
+         # AUC for persons ages 21:81, all with mass = 32
+         nd1 <- data.frame(diabetes = nd[1,"diabetes"], age = 21:81, mass = 32)
+         nd2 <- data.frame(diabetes = nd[2,"diabetes"], age = 21:81, mass = 32)
+         auc <- PI(m2, newdata = nd2, reference = nd1, one2one = TRUE,
+                   conf.level = 0.95)
+         plot(nd1$age, auc[, "Estimate"], xlab = "Age (in years)", ylab =
+              "AUC", ylim = c(0, 1), type = "l")
+         lines(nd1$age, auc[, "lwr"], lty = 3)
+         lines(nd1$age, auc[, "upr"], lty = 3)
+     }
Loading required package: mlbench
> 
> 
> 
> cleanEx()

detaching ‘package:mlbench’, ‘package:colorspace’

> nameEx("tram")
> ### * tram
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tram
> ### Title: Stratified Linear Transformation Models
> ### Aliases: tram tram_data
> ### Keywords: models regression smooth survival
> 
> ### ** Examples
> 
> 
>   data("BostonHousing2", package = "mlbench")
> 
>   ### unconstrained regression coefficients
>   ### BoxCox calls tram internally
>   m1 <- BoxCox(cmedv ~ chas + crim + zn + indus + nox + 
+                rm + age + dis + rad + tax + ptratio + b + lstat, 
+                data = BostonHousing2)
> 
>   ### now with two constraints on regression coefficients
>   m2 <- BoxCox(cmedv ~ chas + crim + zn + indus + nox + 
+                rm + age + dis + rad + tax + ptratio + b + lstat, 
+                data = BostonHousing2, 
+                constraints = c("crim >= 0", "chas1 + rm >= 1.5"))
>   coef(m1)
       chas1         crim           zn        indus          nox           rm 
 0.583348332 -0.043726668  0.006536546  0.012388221 -4.847838876  0.477892294 
         age          dis          rad          tax      ptratio            b 
-0.002987777 -0.310677878  0.081438876 -0.003723606 -0.225009996  0.002615711 
       lstat 
-0.166202396 
>   coef(m2)
        chas1          crim            zn         indus           nox 
 9.135136e-01  2.365750e-08  5.133030e-03  1.189489e-02 -4.505151e+00 
           rm           age           dis           rad           tax 
 5.864864e-01 -4.205709e-03 -2.843814e-01  5.530306e-02 -3.361198e-03 
      ptratio             b         lstat 
-2.132335e-01  2.905001e-03 -1.624564e-01 
> 
>   K <- matrix(0, nrow = 2, ncol = length(coef(m2)))
>   colnames(K) <- names(coef(m2))
>   K[1, "crim"] <- 1
>   K[2, c("chas1", "rm")] <- 1
>   m3 <- BoxCox(cmedv ~ chas + crim + zn + indus + nox + 
+                rm + age + dis + rad + tax + ptratio + b + lstat, 
+                data = BostonHousing2, 
+                constraints = list(K, c(0, 1.5)))
>   all.equal(coef(m2), coef(m3))
[1] TRUE
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  10.735 0.099 10.836 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
