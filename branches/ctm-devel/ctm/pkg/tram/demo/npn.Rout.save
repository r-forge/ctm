
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> ###
> ### Fit models for HCC data presented in
> ### 
> ###	On Nonparanormal Likelihoods
> ###	by Torsten Hothorn
> ###
> 
> set.seed(290875)
> 
> pkgs <- c("openxlsx", "tram", "survival")
> req <- sapply(pkgs, require, char = TRUE)
Loading required package: openxlsx
Loading required package: tram
Loading required package: mlt
Loading required package: basefun
Loading required package: variables
Loading required package: mvtnorm
Loading required package: survival
> if (!all(req)){
+   sapply(pkgs[!req], install.packages)
+   req[!req] <- sapply(pkgs[!req], require, char = TRUE)
+ }
> if (!all(req)) 
+   stop("cannot load dependencies")
> 
> ### Load data
> dat <- read.xlsx("https://datadryad.org/api/v2/files/44697/download", sheet = 1)
> HCC <- with(dat, data.frame(id = 1:nrow(dat),
+                             x = factor(HCC_studyGr),
+                             AFP = log(AFP_ng_per_ml),
+                             PIV = log(PIVKA_delete_range),
+                             OPN = log(OPN),
+                             DKK = log(DKK)))
> ### limits of detection
> PIVm <- max(HCC$PIV)
> AFPm <- max(HCC$AFP)
> 
> ### marginal location-scale models
> mDKK <- BoxCox(
+     DKK ~                               ### probit, h(DKK) via Bernstein
+     x                                   ### location non-HCC / HCC
+     | x,                                ### scale non-HCC / HCC
+     data = HCC)
> mOPN <- BoxCox(OPN ~ x | x, data = HCC)
> HCC$PIVi <- with(HCC, R(       
+     Surv(PIV, event = PIV < PIVm),      ### right censoring
+     as.R.interval = TRUE))              ### empirical likelihood
> mPIV <- BoxCox(PIVi ~
+     x | x,                              ### location-scale
+     data = HCC)
> HCC$AFPi <- with(HCC, R(       
+     Surv(AFP, event = AFP < AFPm),      ### right censoring
+     as.R.interval = TRUE))              ### empirical likelihood
> mAFP <- BoxCox(AFPi ~ x | x,  data = HCC)
> 
> ### joint estimation of marginal and Gaussian copula parameters, s = 2
> ### location-scale transformation discriminant analysis
> m <- Mmlt(mDKK, mOPN, mPIV, mAFP, data = HCC)
> logLik(m)
'log Lik.' -5281.831 (df=42)
> ### marginal parameters
> coef(m, type = "marginal")
$DKK
DKK.Bs1(DKK) DKK.Bs2(DKK) DKK.Bs3(DKK) DKK.Bs4(DKK) DKK.Bs5(DKK) DKK.Bs6(DKK) 
 -1.09527940  -0.76241839   0.03964558   0.45283692   0.86880220   1.57502191 
DKK.Bs7(DKK)       DKK.x1   DKK.scl_x1 
  1.89747858   0.54925423  -0.50870557 

$OPN
OPN.Bs1(OPN) OPN.Bs2(OPN) OPN.Bs3(OPN) OPN.Bs4(OPN) OPN.Bs5(OPN) OPN.Bs6(OPN) 
  -1.2042978   -0.6044947    1.4183316    1.4183318    1.4627031    1.9719933 
OPN.Bs7(OPN)       OPN.x1   OPN.scl_x1 
   2.2392216    0.4540269   -0.9789748 

$PIVi
PIVi.Bs1(PIVi) PIVi.Bs2(PIVi) PIVi.Bs3(PIVi) PIVi.Bs4(PIVi) PIVi.Bs5(PIVi) 
   -0.95130558    -0.18367456     0.08167929     1.77136285     1.77136308 
PIVi.Bs6(PIVi) PIVi.Bs7(PIVi)        PIVi.x1    PIVi.scl_x1 
    2.17346756     2.55726711     0.88612353    -0.65538393 

$AFPi
AFPi.Bs1(AFPi) AFPi.Bs2(AFPi) AFPi.Bs3(AFPi) AFPi.Bs4(AFPi) AFPi.Bs5(AFPi) 
    -0.7747881      0.4370913      1.4284487      1.5923291      2.7584240 
AFPi.Bs6(AFPi) AFPi.Bs7(AFPi)        AFPi.x1    AFPi.scl_x1 
     2.7584240      3.1569894      1.0723483     -0.7534834 

> ### copula parameter: Lambda
> coef(m, type = "Lambdapar")
, , 1

             DKK        OPN      PIVi AFPi
DKK   1.00000000  0.0000000  0.000000    0
OPN  -0.10484138  1.0000000  0.000000    0
PIVi -0.30489652 -0.3237667  1.000000    0
AFPi  0.03576815 -0.1798486 -1.329335    1

> ### standard errors for all parameters
> sqrt(diag(vcov(m)))
         DKK.Bs1(DKK)          DKK.Bs2(DKK)          DKK.Bs3(DKK) 
           0.10220525            0.11359599            0.30083914 
         DKK.Bs4(DKK)          DKK.Bs5(DKK)          DKK.Bs6(DKK) 
           0.43034411            0.31454748            0.13508377 
         DKK.Bs7(DKK)                DKK.x1            DKK.scl_x1 
           0.13993380            0.09298937            0.15284475 
         OPN.Bs1(OPN)          OPN.Bs2(OPN)          OPN.Bs3(OPN) 
           0.09637052            0.10526532            0.14165255 
         OPN.Bs4(OPN)          OPN.Bs5(OPN)          OPN.Bs6(OPN) 
           0.14165255            0.26134766            0.16005631 
         OPN.Bs7(OPN)                OPN.x1            OPN.scl_x1 
           0.16526690            0.08648173            0.15382700 
       PIVi.Bs1(PIVi)        PIVi.Bs2(PIVi)        PIVi.Bs3(PIVi) 
           0.09300331            0.11802007            0.22020914 
       PIVi.Bs4(PIVi)        PIVi.Bs5(PIVi)        PIVi.Bs6(PIVi) 
           0.17504922            0.17504922            0.20676773 
       PIVi.Bs7(PIVi)               PIVi.x1           PIVi.scl_x1 
           0.21740306            0.09396043            0.15597365 
       AFPi.Bs1(AFPi)        AFPi.Bs2(AFPi)        AFPi.Bs3(AFPi) 
           0.08551109            0.13282214            0.34109232 
       AFPi.Bs4(AFPi)        AFPi.Bs5(AFPi)        AFPi.Bs6(AFPi) 
           0.40143152            0.23927587            0.23927587 
       AFPi.Bs7(AFPi)               AFPi.x1           AFPi.scl_x1 
           0.25450614            0.09621668            0.15402452 
  OPN.DKK.(Intercept)  PIVi.DKK.(Intercept)  PIVi.OPN.(Intercept) 
           0.05050893            0.05411981            0.05298288 
 AFPi.DKK.(Intercept)  AFPi.OPN.(Intercept) AFPi.PIVi.(Intercept) 
           0.05481943            0.05414795            0.09619954 
> 
> ### convex approximations
> ## pseudo
> mp <- Mmlt(mDKK, mOPN, mPIV, mAFP, data = HCC, fit = "pseudo")
> logLik(mp)
'log Lik.' -5310.02 (df=6)
> ## sequential
> ms <- Mmlt(mDKK, mOPN, mPIV, mAFP, data = HCC, fit = "sequential")
> logLik(ms)
'log Lik.' -5296.748 (df=12)
> ## ACS
> ma <- Mmlt(mDKK, mOPN, mPIV, mAFP, data = HCC, fit = "ACS", ACSiter = 1)
> logLik(ma)
'log Lik.' -5284.7 (df=6)
> 
> proc.time()
   user  system elapsed 
168.671   0.200 171.235 
