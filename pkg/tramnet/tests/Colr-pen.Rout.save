
R version 4.0.4 (2021-02-15) -- "Lost Library Book"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Tests for COLR models
> 
> ## Depencies
> ## IGNORE_RDIFF_BEGIN
> library("tramnet")
Loading required package: tram
Loading required package: mlt
Loading required package: basefun
Loading required package: variables
Loading required package: CVXR

Attaching package: 'CVXR'

The following object is masked from 'package:stats':

    power

Loading required package: mlrMBO
Loading required package: mlr
Loading required package: ParamHelpers
Warning message: 'mlr' is in 'maintenance-only' mode since July 2019.
Future development will only happen in 'mlr3'
(<https://mlr3.mlr-org.com>). Due to the focus on 'mlr3' there might be
uncaught bugs meanwhile in {mlr} - please consider switching.
Loading required package: smoof
Loading required package: checkmate
Warning message:
no DISPLAY variable so Tk is not available 
> library("survival")
> library("sandwich")
> ## IGNORE_RDIFF_END
> options(digits = 3)
> 
> ## Exact and Right censored
> data("GBSG2", package = "TH.data")
> GBSG2$surv <- with(GBSG2, Surv(time, cens))
> x <- matrix(1 * (GBSG2$horTh == "yes"), ncol = 1)
> colnames(x) <- "horTh"
> 
> yCOLR <- Colr(surv ~ 1, data = GBSG2, log_first = TRUE, order = 10)
> modCOLR <- tramnet(yCOLR, x, lambda = 0, alpha = 0)
> yCOLRb <- Colr(surv ~ horTh, data = GBSG2, log_first = TRUE, order = 10)
> max(abs(coef(yCOLRb, with_baseline = FALSE) -
+         coef(modCOLR, with_baseline = FALSE)))
[1] 1.41e-05
> logLik(yCOLRb)
'log Lik.' -2606 (df=12)
> logLik(modCOLR)
'log Lik.' -2606 (df=NA)
> -modCOLR$result$value
[1] -2606
> logLik(modCOLR, newdata = tramnet:::.get_tramnet_data(modCOLR)[1:10, ])
'log Lik.' -59 (df=NA)
> 
> ## methods
> coef(modCOLR, tol = 0, with_baseline = TRUE)
 Bs1(surv)  Bs2(surv)  Bs3(surv)  Bs4(surv)  Bs5(surv)  Bs6(surv)  Bs7(surv) 
   -2.1005    -1.6468    -1.4018    -0.6926    -0.6926    -0.6926    -0.2410 
 Bs8(surv)  Bs9(surv) Bs10(surv) Bs11(surv)      horTh 
   -0.0263    -0.0263     0.2935     0.7648    -0.4796 
> logLik(modCOLR)
'log Lik.' -2606 (df=NA)
> c(resid(modCOLR)[1:10])
      1       2       3       4       5       6       7       8       9      10 
 0.0931 -0.0658 -0.6044 -0.1480 -0.3839 -0.7158  0.5009  0.6161 -0.6885  0.5853 
> predict(modCOLR, type = "distribution", q = 1)[, 1:10]
 [1] 4.74e-08 2.93e-08 2.93e-08 2.93e-08 4.74e-08 4.74e-08 2.93e-08 4.74e-08
 [9] 4.74e-08 4.74e-08
> predict(modCOLR, type = "quantile", prob = 0.5)[, 1:10]
 [1] 1560 2168 2168 2168 1560 1560 2168 1560 1560 1560
> head(simulate(modCOLR))
Response []
  Date: NULL
  Status: 
  Content-Type: <unknown>
<EMPTY BODY>
> as.data.frame(head(estfun(modCOLR)))
  Bs1(surv) Bs2(surv) Bs3(surv) Bs4(surv) Bs5(surv) Bs6(surv) Bs7(surv)
1  3.67e-07  1.63e-05  3.21e-04  0.003652   0.02631   0.12319   0.36554
2  5.94e-09  4.40e-07  1.44e-05  0.000274   0.00333   0.02652   0.13722
3  9.73e-02  3.07e-01  3.16e-01 -0.045127  -0.41838  -0.46197  -0.27391
4  4.10e-07  1.79e-05  3.47e-04  0.003870   0.02734   0.12516   0.36087
5  6.20e-02  2.59e-01  4.07e-01  0.205692  -0.22943  -0.47058  -0.38061
6  9.39e-01 -6.38e-01 -7.11e-01 -0.250473  -0.04836  -0.00587  -0.00047
  Bs8(surv) Bs9(surv) Bs10(surv) Bs11(surv)   horTh
1  6.13e-01  3.20e-01  -5.85e-01  -7.74e-01  0.0000
2  4.29e-01  6.40e-01  -1.17e-01  -1.19e+00 -0.0658
3 -9.98e-02 -2.24e-02  -2.87e-03  -1.61e-04 -0.6044
4  5.76e-01  2.33e-01  -6.74e-01  -8.00e-01 -0.1480
5 -1.78e-01 -5.02e-02  -7.97e-03  -5.51e-04  0.0000
6 -2.49e-05 -8.47e-07  -1.67e-08  -1.47e-10  0.0000
> plot(modCOLR, type = "survivor")
> plot(modCOLR, type = "density", K = 120)
> print(modCOLR)

Call:
tramnet(model = yCOLR, x = x, lambda = 0, alpha = 0)

Convergence:  optimal
Type:   Continuous Outcome Logistic Regression
Log-Likelihood:  -2606

Coefficients:
horTh 
-0.48 

Sparsity:  1 regression coefficients, 1 of which are non-zero 

Tuning parameters:
lambda  alpha 
     0      0 


> 
> 
> if (FALSE) {
+   ## left censored
+   GBSG2$cens <- as.integer(GBSG2$cens)
+   GBSG2$cens[GBSG2$time < 200] <- 2
+   GBSG2$time[GBSG2$cens == 2] <- 100
+ 
+   yCOLR <- Colr(Surv(time, time, cens, type = "interval") ~ 1, data = GBSG2, log_first = TRUE, order = 10)
+   modCOLR <- tramnet(yCOLR, x, lambda = 0, alpha = 0)
+   yCOLRb <- Colr(Surv(time, time, cens, type = "interval") ~ horTh, data = GBSG2, log_first = TRUE, order = 10)
+   max(abs(coef(yCOLRb, with_baseline = FALSE) -
+           coef(modCOLR, with_baseline = FALSE)))
+   logLik(yCOLRb)
+   logLik(modCOLR)
+ 
+   ## methods
+   coef(modCOLR, tol = 0, with_baseline = TRUE)
+   logLik(modCOLR)
+   resid(modCOLR)[1:10]
+   predict(modCOLR, type = "distribution", q = 1)[, 1:10]
+   predict(modCOLR, type = "quantile", prob = 0.5)[, 1:10]
+   head(simulate(modCOLR))
+   head(estfun(modCOLR))
+   plot(modCOLR, type = "survivor")
+   plot(modCOLR, type = "density", K = 120)
+   print(modCOLR)
+ 
+   ## Unconditional, stratified
+   yCOLR <- Colr(surv | horTh ~ 1, data = GBSG2)
+   modCOLR <- tramnet(yCOLR, x = matrix(0, nrow = nrow(GBSG2)), lambda = 0, alpha = 0)
+   logLik(yCOLR)
+   logLik(modCOLR)
+   resid(modCOLR)[1:10]
+   predict(modCOLR, type = "distribution", q = 1)[, 1:10]
+   predict(modCOLR, type = "quantile", prob = 0.5)[, 1:10]
+   head(simulate(modCOLR))
+   head(estfun(modCOLR))
+   plot(modCOLR, type = "survivor")
+   plot(modCOLR, type = "density", K = 120)
+   print(modCOLR)
+ 
+ 
+   ## interval censored
+   GBSG2$time2 <- GBSG2$time + 50
+   GBSG2$cens[which(GBSG2$cens == 1)[1:100]] <- 3
+ 
+   yCOLR <- Colr(Surv(time, time2, cens, type = "interval") ~ 1, data = GBSG2, log_first = TRUE, order = 10)
+   modCOLR <- tramnet(yCOLR, x, lambda = 0, alpha = 0)
+   yCOLRb <- Colr(Surv(time, time2, cens, type = "interval") ~ horTh, data = GBSG2, log_first = TRUE, order = 10)
+   max(abs(coef(yCOLRb, with_baseline = FALSE) -
+             coef(modCOLR, with_baseline = FALSE)))
+   logLik(yCOLRb)
+   logLik(modCOLR)
+ }
> 
> proc.time()
   user  system elapsed 
   9.87    1.18   10.66 
