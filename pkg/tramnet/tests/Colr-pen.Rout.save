
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Tests for COLR models
> 
> ## Depencies
> ## IGNORE_RDIFF_BEGIN
> library("tramnet")
Loading required package: tram
Loading required package: mlt
Loading required package: basefun
Loading required package: variables
Loading required package: CVXR

Attaching package: 'CVXR'

The following object is masked from 'package:stats':

    power

Loading required package: mlrMBO
Loading required package: mlr
Loading required package: ParamHelpers
'mlr' is in maintenance mode since July 2019. Future development
efforts will go into its successor 'mlr3' (<https://mlr3.mlr-org.com>).
Loading required package: smoof
Loading required package: BBmisc

Attaching package: 'BBmisc'

The following object is masked from 'package:base':

    isFALSE

Loading required package: checkmate
> library("survival")
> library("sandwich")
> ## IGNORE_RDIFF_END
> options(digits = 3)
> 
> ## Exact and Right censored
> data("GBSG2", package = "TH.data")
> GBSG2$surv <- with(GBSG2, Surv(time, cens))
> x <- matrix(1 * (GBSG2$horTh == "yes"), ncol = 1)
> colnames(x) <- "horTh"
> 
> yCOLR <- Colr(surv ~ 1, data = GBSG2, log_first = TRUE, order = 10)
> modCOLR <- tramnet(yCOLR, x, lambda = 0, alpha = 0)
> yCOLRb <- Colr(surv ~ horTh, data = GBSG2, log_first = TRUE, order = 10)
> max(abs(coef(yCOLRb, with_baseline = FALSE) -
+         coef(modCOLR, with_baseline = FALSE)))
[1] 0.000298
> logLik(yCOLRb)
'log Lik.' -2606 (df=12)
> logLik(modCOLR)
'log Lik.' -2606 (df=NA)
> -modCOLR$result$value
[1] -2606
> logLik(modCOLR, newdata = tramnet:::.get_tramnet_data(modCOLR)[1:10, ])
'log Lik.' -59 (df=NA)
> 
> ## methods
> coef(modCOLR, tol = 0, with_baseline = TRUE)
 Bs1(surv)  Bs2(surv)  Bs3(surv)  Bs4(surv)  Bs5(surv)  Bs6(surv)  Bs7(surv) 
   -2.1049    -1.6329    -1.3265    -0.6752    -0.6752    -0.6752    -0.0956 
 Bs8(surv)  Bs9(surv) Bs10(surv) Bs11(surv)      horTh 
   -0.0196    -0.0196     0.4650     0.9569    -0.4795 
> logLik(modCOLR)
'log Lik.' -2606 (df=NA)
> resid(modCOLR)[1:10]
 [1]  0.0936 -0.0644 -0.6049 -0.1474 -0.3846 -0.7157  0.5014  0.6166 -0.6879
[10]  0.5859
> predict(modCOLR, type = "distribution", q = 1)[, 1:10]
 [1] 4.92e-08 3.05e-08 3.05e-08 3.05e-08 4.92e-08 4.92e-08 3.05e-08 4.92e-08
 [9] 4.92e-08 4.92e-08
> predict(modCOLR, type = "quantile", prob = 0.5)[, 1:10]
 [1] 1561 2166 2166 2166 1561 1561 2166 1561 1561 1561
> head(simulate(modCOLR))
Response []
  Date: NULL
  Status: 
  Content-Type: <unknown>
<EMPTY BODY>
> head(estfun(modCOLR))
     Bs1(surv) Bs2(surv) Bs3(surv) Bs4(surv) Bs5(surv) Bs6(surv) Bs7(surv)
[1,]  1.92e-06  6.75e-05   0.00104   0.00931    0.0523   0.18927  0.424167
[2,]  8.23e-08  4.32e-06   0.00010   0.00134    0.0114   0.06352  0.225441
[3,]  1.11e-01  3.20e-01   0.28112  -0.10830   -0.4408  -0.43257 -0.236106
[4,]  2.09e-06  7.23e-05   0.00110   0.00966    0.0533   0.18843  0.408452
[5,]  7.30e-02  2.79e-01   0.39193   0.13843   -0.2838  -0.46049 -0.335369
[6,]  8.86e-01 -6.62e-01  -0.67059  -0.22353   -0.0411  -0.00475 -0.000363
     Bs8(surv) Bs9(surv) Bs10(surv) Bs11(surv)   horTh
[1,]  4.96e-01  3.00e-02  -6.09e-01  -4.99e-01  0.0000
[2,]  4.63e-01  3.59e-01  -4.14e-01  -7.74e-01 -0.0644
[3,] -8.00e-02 -1.68e-02  -2.01e-03  -1.06e-04 -0.6049
[4,]  4.42e-01 -5.72e-02  -6.78e-01  -5.16e-01 -0.1474
[5,] -1.44e-01 -3.77e-02  -5.57e-03  -3.59e-04  0.0000
[6,] -1.84e-05 -5.96e-07  -1.13e-08  -9.43e-11  0.0000
> plot(modCOLR, type = "survivor")
> plot(modCOLR, type = "density", K = 120)
> print(modCOLR)

Call:
tramnet(model = yCOLR, x = x, lambda = 0, alpha = 0)

Convergence:  optimal
Type:   Continuous Outcome Logistic Regression
Log-Likelihood:  -2606

Coefficients:
horTh 
-0.48 

Sparsity:  1 regression coefficients, 1 of which are non-zero 

Tuning parameters:
lambda  alpha 
     0      0 


> 
> ## left censored
> GBSG2$cens <- as.integer(GBSG2$cens)
> GBSG2$cens[GBSG2$time < 200] <- 2
> GBSG2$time[GBSG2$cens == 2] <- 100
> 
> yCOLR <- Colr(Surv(time, time, cens, type = "interval") ~ 1, data = GBSG2, log_first = TRUE, order = 10)
> modCOLR <- tramnet(yCOLR, x, lambda = 0, alpha = 0)
> yCOLRb <- Colr(Surv(time, time, cens, type = "interval") ~ horTh, data = GBSG2, log_first = TRUE, order = 10)
> max(abs(coef(yCOLRb, with_baseline = FALSE) -
+         coef(modCOLR, with_baseline = FALSE)))
[1] 4.29e-05
> logLik(yCOLRb)
'log Lik.' -2621 (df=12)
> logLik(modCOLR)
'log Lik.' -2621 (df=NA)
> 
> ## methods
> coef(modCOLR, tol = 0, with_baseline = TRUE)
 Bs1(Surv(time, time, cens, type = "interval")) 
                                        -2.0156 
 Bs2(Surv(time, time, cens, type = "interval")) 
                                        -1.8652 
 Bs3(Surv(time, time, cens, type = "interval")) 
                                        -1.0690 
 Bs4(Surv(time, time, cens, type = "interval")) 
                                        -1.0244 
 Bs5(Surv(time, time, cens, type = "interval")) 
                                        -0.5345 
 Bs6(Surv(time, time, cens, type = "interval")) 
                                        -0.5345 
 Bs7(Surv(time, time, cens, type = "interval")) 
                                        -0.2938 
 Bs8(Surv(time, time, cens, type = "interval")) 
                                         0.0546 
 Bs9(Surv(time, time, cens, type = "interval")) 
                                         0.0546 
Bs10(Surv(time, time, cens, type = "interval")) 
                                         0.3990 
Bs11(Surv(time, time, cens, type = "interval")) 
                                         1.0016 
                                          horTh 
                                        -0.4442 
> logLik(modCOLR)
'log Lik.' -2621 (df=NA)
> resid(modCOLR)[1:10]
 [1]  0.1146 -0.0287 -0.5632 -0.1091 -0.3486 -0.6645  0.5178  0.6238 -0.6363
[10]  0.5947
> predict(modCOLR, type = "distribution", q = 1)[, 1:10]
 [1] 0.00175 0.00113 0.00113 0.00113 0.00175 0.00175 0.00113 0.00175 0.00175
[10] 0.00175
> predict(modCOLR, type = "quantile", prob = 0.5)[, 1:10]
 [1] 1499 2088 2088 2088 1499 1499 2088 1499 1499 1499
> head(simulate(modCOLR))
Response []
  Date: NULL
  Status: 
  Content-Type: <unknown>
<EMPTY BODY>
> head(estfun(modCOLR))
     Bs1(Surv(time, time, cens, type = "interval"))
[1,]                                       1.09e-06
[2,]                                       4.72e-08
[3,]                                       6.77e-02
[4,]                                       1.18e-06
[5,]                                       4.30e-02
[6,]                                       5.82e-01
     Bs2(Surv(time, time, cens, type = "interval"))
[1,]                                       4.11e-05
[2,]                                       2.66e-06
[3,]                                       2.52e-01
[4,]                                       4.41e-05
[5,]                                       2.03e-01
[6,]                                      -4.05e-02
     Bs3(Surv(time, time, cens, type = "interval"))
[1,]                                       6.87e-04
[2,]                                       6.63e-05
[3,]                                       3.33e-01
[4,]                                       7.27e-04
[5,]                                       3.71e-01
[6,]                                      -5.79e-01
     Bs4(Surv(time, time, cens, type = "interval"))
[1,]                                       0.006631
[2,]                                       0.000957
[3,]                                       0.071988
[4,]                                       0.006898
[5,]                                       0.264369
[6,]                                      -0.427886
     Bs5(Surv(time, time, cens, type = "interval"))
[1,]                                        0.04041
[2,]                                        0.00877
[3,]                                       -0.32141
[4,]                                        0.04129
[5,]                                       -0.12161
[6,]                                       -0.15809
     Bs6(Surv(time, time, cens, type = "interval"))
[1,]                                         0.1591
[2,]                                         0.0526
[3,]                                        -0.4637
[4,]                                         0.1592
[5,]                                        -0.4185
[6,]                                        -0.0357
     Bs7(Surv(time, time, cens, type = "interval"))
[1,]                                        0.39173
[2,]                                        0.20244
[3,]                                       -0.32503
[4,]                                        0.38050
[5,]                                       -0.39888
[6,]                                       -0.00527
     Bs8(Surv(time, time, cens, type = "interval"))
[1,]                                       0.520500
[2,]                                       0.457087
[3,]                                      -0.136635
[4,]                                       0.475977
[5,]                                      -0.210984
[6,]                                      -0.000512
     Bs9(Surv(time, time, cens, type = "interval"))
[1,]                                       1.21e-01
[2,]                                       4.23e-01
[3,]                                      -3.51e-02
[4,]                                       3.96e-02
[5,]                                      -6.65e-02
[6,]                                      -3.17e-05
     Bs10(Surv(time, time, cens, type = "interval"))
[1,]                                       -5.77e-01
[2,]                                       -3.48e-01
[3,]                                       -5.12e-03
[4,]                                       -6.46e-01
[5,]                                       -1.17e-02
[6,]                                       -1.14e-06
     Bs11(Surv(time, time, cens, type = "interval"))   horTh
[1,]                                       -5.48e-01  0.0000
[2,]                                       -8.26e-01 -0.0287
[3,]                                       -3.26e-04 -0.5632
[4,]                                       -5.67e-01 -0.1091
[5,]                                       -8.99e-04  0.0000
[6,]                                       -1.82e-08  0.0000
> plot(modCOLR, type = "survivor")
> plot(modCOLR, type = "density", K = 120)
> print(modCOLR)

Call:
tramnet(model = yCOLR, x = x, lambda = 0, alpha = 0)

Convergence:  optimal
Type:   Continuous Outcome Logistic Regression
Log-Likelihood:  -2621

Coefficients:
 horTh 
-0.444 

Sparsity:  1 regression coefficients, 1 of which are non-zero 

Tuning parameters:
lambda  alpha 
     0      0 


> 
> ## Unconditional, stratified
> yCOLR <- Colr(surv | horTh ~ 1, data = GBSG2)
> modCOLR <- tramnet(yCOLR, x = matrix(0, nrow = nrow(GBSG2)), lambda = 0, alpha = 0)
> logLik(yCOLR)
'log Lik.' -2621 (df=14)
> logLik(modCOLR)
'log Lik.' -2621 (df=NA)
> resid(modCOLR)[1:10]
 [1]  0.1078 -0.0525 -0.6240 -0.1474 -0.4002 -0.7503  0.5123  0.6228 -0.7256
[10]  0.5923
> predict(modCOLR, type = "distribution", q = 1)[, 1:10]
 [1] 0.01236 0.00742 0.00742 0.00742 0.01236 0.01236 0.00742 0.01236 0.01236
[10] 0.01236
> predict(modCOLR, type = "quantile", prob = 0.5)[, 1:10]
 [1] 1511 2123 2123 2123 1511 1511 2123 1511 1511 1511
> head(simulate(modCOLR))
Response []
  Date: NULL
  Status: 
  Content-Type: <unknown>
<EMPTY BODY>
> head(estfun(modCOLR))
     Bs1(surv):(Intercept) Bs2(surv):(Intercept) Bs3(surv):(Intercept)
[1,]               0.02580                0.1921                0.5201
[2,]               0.00487                0.0568                0.2504
[3,]               0.22309               -0.3313               -0.3627
[4,]               0.02345                0.1702                0.4430
[5,]               0.33880               -0.1576               -0.3648
[6,]              -0.16329               -0.5195               -0.0642
     Bs4(surv):(Intercept) Bs5(surv):(Intercept) Bs6(surv):(Intercept)
[1,]               0.52092             -1.58e-01             -6.55e-01
[2,]               0.47536              1.98e-01             -5.16e-01
[3,]              -0.12912             -2.20e-02             -1.85e-03
[4,]               0.39700             -2.33e-01             -6.38e-01
[5,]              -0.17457             -3.79e-02             -3.99e-03
[6,]              -0.00323             -8.14e-05             -1.03e-06
     Bs7(surv):(Intercept) Bs1(surv):horThyes Bs2(surv):horThyes
[1,]             -3.38e-01            0.00000             0.0000
[2,]             -5.21e-01            0.00487             0.0568
[3,]             -6.17e-05            0.22309            -0.3313
[4,]             -3.10e-01            0.02345             0.1702
[5,]             -1.65e-04            0.00000             0.0000
[6,]             -5.20e-09            0.00000             0.0000
     Bs3(surv):horThyes Bs4(surv):horThyes Bs5(surv):horThyes
[1,]              0.000              0.000              0.000
[2,]              0.250              0.475              0.198
[3,]             -0.363             -0.129             -0.022
[4,]              0.443              0.397             -0.233
[5,]              0.000              0.000              0.000
[6,]              0.000              0.000              0.000
     Bs6(surv):horThyes Bs7(surv):horThyes
[1,]            0.00000           0.00e+00
[2,]           -0.51627          -5.21e-01
[3,]           -0.00185          -6.17e-05
[4,]           -0.63785          -3.10e-01
[5,]            0.00000           0.00e+00
[6,]            0.00000           0.00e+00
> plot(modCOLR, type = "survivor")
> plot(modCOLR, type = "density", K = 120)
> print(modCOLR)

Call:
tramnet(model = yCOLR, x = matrix(0, nrow = nrow(GBSG2)), lambda = 0, 
    alpha = 0)

Convergence:  optimal
Type:   Continuous Outcome Logistic Regression
Log-Likelihood:  -2621

Coefficients:
numeric(0)

Sparsity:  0 regression coefficients, 0 of which are non-zero 

Tuning parameters:
lambda  alpha 
     0      0 


> 
> 
> if (FALSE) {
+   ## interval censored
+   GBSG2$time2 <- GBSG2$time + 50
+   GBSG2$cens[which(GBSG2$cens == 1)[1:100]] <- 3
+ 
+   yCOLR <- Colr(Surv(time, time2, cens, type = "interval") ~ 1, data = GBSG2, log_first = TRUE, order = 10)
+   modCOLR <- tramnet(yCOLR, x, lambda = 0, alpha = 0)
+   yCOLRb <- Colr(Surv(time, time2, cens, type = "interval") ~ horTh, data = GBSG2, log_first = TRUE, order = 10)
+   max(abs(coef(yCOLRb, with_baseline = FALSE) -
+             coef(modCOLR, with_baseline = FALSE)))
+   logLik(yCOLRb)
+   logLik(modCOLR)
+ }
> 
> proc.time()
   user  system elapsed 
 17.284   0.224  17.502 
