
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Tests for Lehmann alternative models
> 
> ## Dependencies
> ## IGNORE_RDIFF_BEGIN
> library("tramnet")
Loading required package: tram
Loading required package: mlt
Loading required package: basefun
Loading required package: variables
Loading required package: CVXR

Attaching package: 'CVXR'

The following object is masked from 'package:stats':

    power

Loading required package: mlrMBO
Loading required package: mlr
Loading required package: ParamHelpers
Loading required package: smoof
Loading required package: BBmisc

Attaching package: 'BBmisc'

The following object is masked from 'package:base':

    isFALSE

Loading required package: checkmate
> library("survival")
> ## IGNORE_RDIFF_END
> options(digits = 3)
> 
> ## Data
> data("GBSG2", package = "TH.data")
> GBSG2$surv <- with(GBSG2, Surv(time, rep(1, nrow(GBSG2))))
> x <- matrix(1 * (GBSG2$horTh == "yes"), ncol = 1) ## create matrix of covariates
> colnames(x) <- "horTh"
> 
> ## Exact
> yLehmann <- Lehmann(surv ~ 1, data = GBSG2, log_first = TRUE, order = 10)
> modLehmann <- tramnet(yLehmann, x, lambda = 0, alpha = 0)
> 
> yLehmannb <- Lehmann(surv ~ horTh, data = GBSG2, log_first = TRUE, order = 10)
> max(abs(coef(yLehmannb, with_baseline = FALSE) -
+         coef(modLehmann, with_baseline = FALSE)))
[1] 4.81e-06
> logLik(yLehmannb)
'log Lik.' -5348 (df=12)
> logLik(modLehmann)
'log Lik.' -5348 (df=NA)
> 
> ## left censored
> GBSG2$cens <- 1
> GBSG2$cens <- as.integer(GBSG2$cens)
> GBSG2$cens[GBSG2$time < 100] <- 2
> GBSG2$time[GBSG2$cens == 2] <- 100
> 
> yCOLR <- Lehmann(Surv(time, time, cens, type = "interval") ~ 1, data = GBSG2, log_first = TRUE, order = 10)
> modCOLR <- tramnet(yCOLR, x, lambda = 0, alpha = 0)
> yCOLRb <- Lehmann(Surv(time, time, cens, type = "interval") ~ horTh, data = GBSG2, log_first = TRUE, order = 10)
> max(abs(coef(yCOLRb, with_baseline = FALSE) -
+         coef(modCOLR, with_baseline = FALSE)))
[1] 5.97e-06
> logLik(yCOLRb)
'log Lik.' -5270 (df=12)
> logLik(modCOLR)
'log Lik.' -5270 (df=NA)
> 
> 
> proc.time()
   user  system elapsed 
   45.8     0.6    46.5 
