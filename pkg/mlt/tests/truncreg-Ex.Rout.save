
R version 3.1.3 (2015-03-09) -- "Smooth Sidewalk"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library("mlt")
Loading required package: basefun
Loading required package: Matrix

Attaching package: 'Matrix'

The following objects are masked from 'package:base':

    crossprod, tcrossprod

Loading required package: polynom
Loading required package: numDeriv
> library("truncreg")
Loading required package: maxLik
Loading required package: miscTools

Please cite the 'maxLik' package as:
Henningsen, Arne and Toomet, Ott (2011). maxLik: A package for maximum likelihood estimation in R. Computational Statistics 26(3), 443-458. DOI 10.1007/s00180-010-0217-1.

If you have questions, suggestions, or comments regarding the 'maxLik' package, please use a forum or 'tracker' at maxLik's R-Forge site:
https://r-forge.r-project.org/projects/maxlik/

Attaching package: 'maxLik'

The following object is masked from 'package:numDeriv':

    hessian

> 
> 
> ## Left-truncated 
> set.seed(29)
> n <- 1000	
> x <- runif(n, max = 2 * pi)
> y <- rnorm(n, 2*x + 1, .25)
> d <- data.frame(y = y, x = x)
> ## truncated response
> tr <- 2.5
> d$yt <- ifelse(d$y > tr, d$y, NA)
> d$trunc_left <- tr
> 
> tmod <- truncreg(yt ~ x, data = d, point = tr, direction = "left")
> coef(tmod)
(Intercept)           x       sigma 
  1.0192835   1.9917670   0.2575485 
> logLik(tmod)
'log Lik.' -33.99032 (df=3)
> vcov(tmod)
              (Intercept)             x         sigma
(Intercept)  4.971662e-04 -1.146545e-04 -7.445133e-06
x           -1.146545e-04  3.145827e-05  1.637489e-06
sigma       -7.445133e-06  1.637489e-06  3.940881e-05
> 
> ## MLT
> fm <- as.formula("~ x")
> yb <- polynomial_basis(c(TRUE, TRUE), var = "yt", ci = c(-Inf, 0))
> m <- model(yb, shifting = fm, todistr = "Normal")
> mltmod <- mlt(m, data = d[!is.na(d$yt),,drop = FALSE], trunc = c("left" = "trunc_left"))
Gradient[1] "Mean relative difference: 2.00001e-05"
Hessian:[1] TRUE
> (cf <- coef(mltmod))
(Intercept)          yt           x 
  -3.957637    3.882763   -7.733560 
> c(-cf[1] / cf[2], -cf[3] / cf[2], 1 / cf[2])
(Intercept)           x          yt 
  1.0192835   1.9917670   0.2575485 
> logLik(mltmod)
'log Lik.' -33.99032 (df=3)
> vcov(mltmod)
             (Intercept)           yt           x
(Intercept)  0.017689296 -0.009565421  0.01722587
yt          -0.009565421  0.008956892 -0.01774419
x            0.017225873 -0.017744189  0.03562564
> 
> #library("numDeriv")
> 
> solve(numDeriv::hessian(mltmod$loglik, coef(mltmod)))
             [,1]         [,2]        [,3]
[1,]  0.017689296 -0.009565421  0.01722587
[2,] -0.009565421  0.008956892 -0.01774419
[3,]  0.017225874 -0.017744190  0.03562564
> 
> 
> ## right-truncated
> 
> set.seed(29)
> n <- 1000	
> x <- runif(n, max = 2 * pi)
> y <- rnorm(n, 2*x + 1, .25)
> d <- data.frame(y = y, x = x)
> ## truncated response
> tr <- 11
> d$yt <- ifelse(d$y < tr, d$y, NA)
> d$trunc_right <- tr
> 
> tmod <- truncreg(yt ~ x, data = d, point = tr, direction = "right")
> coef(tmod)
(Intercept)           x       sigma 
  1.0003424   1.9951261   0.2640064 
> logLik(tmod)
'log Lik.' -50.51895 (df=3)
> vcov(tmod)
              (Intercept)             x         sigma
(Intercept)  3.312328e-04 -1.021957e-04 -2.840592e-06
x           -1.021957e-04  4.352541e-05  1.854537e-06
sigma       -2.840592e-06  1.854537e-06  4.525610e-05
> 
> ## MLT
> fm <- as.formula("~ x")
> yb <- polynomial_basis(c(TRUE, TRUE), var = "yt", ci = c(-Inf, 0))
> m <- model(yb, shifting = fm, todistr = "Normal")
> mltmod <- mlt(m, data = d[!is.na(d$yt),,drop = FALSE], trunc = c("right" = "trunc_right"))
Gradient[1] "Mean relative difference: 0.00152262"
Hessian:[1] "Mean relative difference: 1.225984e-05"
Warning messages:
1: In .log(.dealinf(mmr, beta, offset, d$p, 1) - .dealinf(mml, beta,  :
  negative contribution to likelihood; constraints violated!
2: In .log(.dealinf(mmr, beta, offset, d$p, 1) - .dealinf(mml, beta,  :
  negative contribution to likelihood; constraints violated!
3: In .log(.dealinf(mmr, beta, offset, d$p, 1) - .dealinf(mml, beta,  :
  negative contribution to likelihood; constraints violated!
4: In .log(.dealinf(mmr, beta, offset, d$p, 1) - .dealinf(mml, beta,  :
  negative contribution to likelihood; constraints violated!
5: In .log(.dealinf(mmr, beta, offset, d$p, 1) - .dealinf(mml, beta,  :
  negative contribution to likelihood; constraints violated!
6: In .log(.dealinf(mmr, beta, offset, d$p, 1) - .dealinf(mml, beta,  :
  negative contribution to likelihood; constraints violated!
> (cf <- coef(mltmod))
(Intercept)          yt           x 
  -3.789083    3.787786   -7.557111 
> c(-cf[1] / cf[2], -cf[3] / cf[2], 1 / cf[2])
(Intercept)           x          yt 
  1.0003424   1.9951261   0.2640064 
> logLik(mltmod)
'log Lik.' -50.51895 (df=3)
> vcov(mltmod)
             (Intercept)           yt           x
(Intercept)  0.014383309 -0.009473336  0.01733345
yt          -0.009473336  0.009315775 -0.01848536
x            0.017333447 -0.018485362  0.03730403
> 
> #library("numDeriv")
> 
> solve(numDeriv::hessian(mltmod$loglik, coef(mltmod)))
             [,1]         [,2]        [,3]
[1,]  0.014235534 -0.009322142  0.01703086
[2,] -0.009322142  0.009161311 -0.01817633
[3,]  0.017030861 -0.018176328  0.03668579
Warning message:
In .log(.dealinf(mmr, beta, offset, d$p, 1) - .dealinf(mml, beta,  :
  negative contribution to likelihood; constraints violated!
> 
> 
> 
> proc.time()
   user  system elapsed 
  2.216   0.053   2.257 
