
R version 3.1.3 (2015-03-09) -- "Smooth Sidewalk"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library("mlt")
Loading required package: basefun
Loading required package: Matrix

Attaching package: 'Matrix'

The following objects are masked from 'package:base':

    crossprod, tcrossprod

Loading required package: polynom
Loading required package: numDeriv
> library("eha")
Loading required package: survival
> set.seed(29)
> 
> ## ************** Exponential - AFT *********************************
> 
> ### true dgp
> rY <- function(n, ...) rexp(n, ...)
> pY <- function(x, ...) pexp(x, ...)
> dY <- function(x, ...) dexp(x, ...)
> 
> gf <- gl(3, 1)
> g <- rep(gf, 100)
> y <- rY(length(g), rate = (1:nlevels(g))[g])
> mydata <- data.frame(y = y, g = g)
> 
> boxplot(y ~ g, data = mydata)
> 
> Bb <- log_basis(var = "y", support = range(y))
> Bx <- as.basis(~ g)
> m <- model(Bb, shifting = Bx, todist = "MinExtrVal")
> 
> ## Estimate coefficients
> coef(opt <- mlt(m, data = mydata, fixed = c("log(y)" = 1)))
Gradient[1] "Mean relative difference: 8.3109e-05"
Hessian:[1] TRUE
[1]  1.0000000 -0.1230066  0.7915167  1.1190537
> 
> coef(aft <- survreg(Surv(y, rep(TRUE, nrow(mydata))) ~ g, data = mydata,
+                     dist = "exponential"))
(Intercept)          g2          g3 
  0.1230066  -0.7915161  -1.1190543 
> 
> coef(cox <- coxph(Surv(y, rep(TRUE, nrow(mydata))) ~ g, data = mydata))
      g2       g3 
0.699808 1.022699 
> 
> coef(phreg <- phreg(Surv(y, rep(TRUE, nrow(mydata))) ~ g, data = mydata, 
+                     dist = "weibull", shape = 1))
        g2         g3 log(scale) 
 0.7915161  1.1190543  0.1230066 
> 
> ## Compare standard errors
> ## MLT
> sqrt(diag(vcov(opt)))[c("g2", "g3")]
       g2        g3 
0.1414213 0.1414214 
> ## Cox
> sqrt(diag(vcov(cox)))
       g2        g3 
0.1523056 0.1557383 
> ## phreg
> sqrt(diag(phreg$var))[c("g2", "g3")]
       g2        g3 
0.1414214 0.1414214 
> 
> ## Compare log-Likelihoods
> logLik(aft)
'log Lik.' -145.845 (df=3)
> logLik(opt)
'log Lik.' -145.845 (df=3)
> 
> 
> ## Use a Weibull-AFT for estimation (Weibull shape parameter should be nu = 1)
> 
> ## Estimate coefficients
> (cf <- coef(opt2 <- mlt(m, data = mydata)))
Gradient[1] "Mean relative difference: 0.0001329982"
Hessian:[1] TRUE
     log(y) (Intercept)          g2          g3 
  0.9238443  -0.0759685   0.7234014   1.0274557 
> cf[-1] / cf[1]
(Intercept)          g2          g3 
-0.08223085  0.78303386  1.11215249 
> 
> coef(aft2 <- survreg(Surv(y, rep(TRUE, nrow(mydata))) ~ g, data = mydata,
+                      dist = "weibull"))
(Intercept)          g2          g3 
  0.0822325  -0.7830360  -1.1121547 
> 
> ## Compare Weibull shape paramters
> 1 / cf[1]
  log(y) 
1.082433 
> aft2$scale
[1] 1.082433
> 
> ## Compare log-Likelihoods
> logLik(opt2)
'log Lik.' -144.2832 (df=4)
> logLik(aft2)
'log Lik.' -144.2832 (df=4)
> 
> sqrt(diag(vcov(opt2)))[c("g2", "g3")]
       g2        g3 
0.1462997 0.1502460 
> sqrt(diag(vcov(aft2)))[c("g2", "g3")]
       g2        g3 
0.1531531 0.1531334 
> 
> 
> ## *************** Right-censored
> 
> mydata <- data.frame(y = Surv(y, sample(0:1, length(y), replace = TRUE)), g = g)
> coef(opt <- mlt(m, data = mydata, fixed = c("log(y)" = 1)))
Gradient[1] "Mean relative difference: 5.781776e-05"
Hessian:[1] TRUE
[1]  1.0000000 -0.9905065  1.0241375  1.2525848
> 
> ## Estimate coefficients 
> coef(aft <- survreg(y ~ g, data = mydata, dist = "expo"))
(Intercept)          g2          g3 
  0.9905072  -1.0241384  -1.2525857 
> coef(cox <- coxph(y ~ g, data = mydata))
       g2        g3 
0.9425123 1.1675680 
> coef(phreg <- phreg(y ~ g, data = mydata, dist = "weibull", shape = 1))
        g2         g3 log(scale) 
 1.0241384  1.2525857  0.9905072 
> 
> ## Compare standard errors
> ## MLT
> sqrt(diag(vcov(opt)))[c("g2", "g3")]
       g2        g3 
0.2065852 0.2112885 
> ## Cox
> sqrt(diag(vcov(cox)))
       g2        g3 
0.2222954 0.2314696 
> ## phreg
> sqrt(diag(phreg$var))[c("g2", "g3")]
       g2        g3 
0.2065852 0.2112886 
> 
> 
> 
> ## ************** Left-censored
> 
> mydata <- data.frame(y = Surv(y, sample(0:1, length(y), replace = TRUE), 
+                      type = "left"), g = g)
> 
> ## Estimate coefficients
> coef(opt <- mlt(m, data = mydata,  fixed = c("log(y)" = 1)))
Gradient[1] "Mean relative difference: 0.004125379"
Hessian:[1] TRUE
[1] 1.0000000 0.2828844 0.7853477 1.1284821
> 
> coef(aft <- survreg(y ~ g, data = mydata, dist = "expo"))
(Intercept)          g2          g3 
 -0.2828844  -0.7853477  -1.1284822 
> 
> ## Compare standard errors
> ## MLT
> sqrt(diag(vcov(opt)))[c("g2", "g3")]
       g2        g3 
0.1485644 0.1486573 
> ## phreg
> sqrt(diag(phreg$var))[c("g2", "g3")]
       g2        g3 
0.2065852 0.2112886 
> 
> 
> try(coef(cox <- coxph(y ~ g, data = mydata)))
Error in coxph(y ~ g, data = mydata) : 
  Cox model doesn't support "left" survival data
> try(coef(phreg <- phreg(y ~ g, data = mydata, dist = "weibull", shape = 1)))
Error in phreg(y ~ g, data = mydata, dist = "weibull", shape = 1) : 
  This model doesn't support "left" survival data
> 
> 
> 
> ## *************** Intervall-censored
> mydata <- data.frame(y = Surv(y, y + 1, sample(0:3, length(y), replace = TRUE),
+                      type = "interval"), g = g)
> 
> coef(opt<- mlt(m, data = mydata, fixed = c("log(y)" = 1)))
Gradient[1] "Mean relative difference: 1.677142e-05"
Hessian:[1] TRUE
[1]  1.0000000 -0.5531928  0.8600625  1.2789399
> coef(aft <- survreg(y ~ g, data = mydata, dist = "expo"))
(Intercept)          g2          g3 
  0.5531934  -0.8600648  -1.2789393 
> 
> ## Compare standard errors
> ## MLT
> sqrt(diag(vcov(opt)))[c("g2", "g3")]
       g2        g3 
0.1740433 0.1726433 
> ## phreg
> sqrt(diag(phreg$var))[c("g2", "g3")]
       g2        g3 
0.2065852 0.2112886 
> 
> 
> try(coef(cox <- coxph(y ~ g, data = mydata)))
Error in coxph(y ~ g, data = mydata) : 
  Cox model doesn't support "interval" survival data
> try(coef(phreg <- phreg(y ~ g, data = mydata, dist = "weibull", shape = 1)))
Error in phreg(y ~ g, data = mydata, dist = "weibull", shape = 1) : 
  This model doesn't support "interval" survival data
> 
> 
> 
> 
> ## ************** Weibull - AFT *********************************
> 
> set.seed(196)
> 
> ### true dgp
> rY <- function(n, ...) rweibull(n, ...)
> pY <- function(x, ...) pweibull(x, ...)
> dY <- function(x, ...) dweibull(x, ...)
> 
> gf <- gl(3, 1)
> g <- rep(gf, 100)
> y <- rY(length(g), scale = (1:nlevels(g))[g], shape = 3)
> mydata <- data.frame(y = y, g = g)
> 
> boxplot(y ~ g, data = mydata)
> 
> Bb <- log_basis(var = "y", support = range(y))
> Bx <- as.basis(~ g)
> m <- model(Bb, shifting = Bx, todist = "MinExtrVal")
> 
> ## Estimate coefficients
> 
> ## PH-scale
> (cf <- coef(opt <- mlt(m, data = mydata)))
Gradient[1] "Mean relative difference: 0.0001941862"
Hessian:[1] TRUE
     log(y) (Intercept)          g2          g3 
 3.10039797 -0.02638596 -2.12855795 -3.37407198 
> 
> (coef_cox <- coef(cox <- coxph(Surv(y, rep(TRUE, nrow(mydata))) ~ g, 
+                  	          data = mydata)))
       g2        g3 
-2.113511 -3.405349 
> 
> (coef_phreg <- coef(phreg <- phreg(Surv(y, rep(TRUE, nrow(mydata))) ~ g,
+                                    data = mydata, dist = "weibull")))
         g2          g3  log(scale)  log(shape) 
-2.12855989 -3.37407494  0.00851049  1.13153109 
> 
> ## AFT-scale
> coef(aft <- survreg(Surv(y, rep(TRUE, nrow(mydata))) ~ g, data = mydata,
+                     dist = "weibull"))
(Intercept)          g2          g3 
 0.00851049  0.68654367  1.08827090 
> 
> cf[-1] / cf[1]
 (Intercept)           g2           g3 
-0.008510506 -0.686543462 -1.088270606 
> coef_cox * aft$scale
        g2         g3 
-0.6816897 -1.0983578 
> coef_phreg[c("g2", "g3")] * aft$scale
        g2         g3 
-0.6865437 -1.0882709 
> 
> ## Compare shape parameters
> 1 / cf[1]
   log(y) 
0.3225392 
> 1 / exp(coef_phreg[c("log(shape)")])
log(shape) 
  0.322539 
> aft$scale
[1] 0.322539
> 
> ## Compare standard errors
> sqrt(diag(vcov(opt)))[c("g2", "g3")]
       g2        g3 
0.1695251 0.2038083 
> sqrt(diag(vcov(cox)))
       g2        g3 
0.1855397 0.2196354 
> sqrt(diag(phreg$var))[c("g2", "g3")]
       g2        g3 
0.1695251 0.2038084 
> 
> ## Compare log-Likelihoods
> logLik(aft)
'log Lik.' -259.0559 (df=4)
> logLik(opt)
'log Lik.' -259.0559 (df=4)
> 
> 
> ## ************************* Right-censored
> 
> mydata <- data.frame(y = Surv(y, sample(0:1, length(y), replace = TRUE)), g = g)
> 
> ## Estimate coefficients
> (cf <- coef(opt <- mlt(m, data = mydata)))
Gradient[1] "Mean relative difference: 0.000160409"
Hessian:[1] TRUE
     log(y) (Intercept)          g2          g3 
  2.9704379  -0.5337426  -2.1300104  -3.3635876 
> cf[-1] / cf[1]
(Intercept)          g2          g3 
 -0.1796848  -0.7170695  -1.1323541 
> 
> coef(aft <- survreg(y ~ g, data = mydata, dist = "weibull"))
(Intercept)          g2          g3 
  0.1796848   0.7170695   1.1323542 
> 
> coef_cox <- coef(cox <- coxph(y ~ g, data = mydata))
> coef_cox * aft$scale
        g2         g3 
-0.7135292 -1.1563405 
> 
> coefs_phreg <- coef(phreg <- phreg(y ~ g, data = mydata, dist = "weibull"))
> coefs_phreg[c("g2", "g3")] * aft$scale
        g2         g3 
-0.7170695 -1.1323542 
> 
> ## Compare standard errors
> sqrt(diag(vcov(opt)))[c("g2", "g3")]
       g2        g3 
0.2245735 0.2703786 
> sqrt(diag(vcov(cox)))
       g2        g3 
0.2441318 0.2938864 
> sqrt(diag(phreg$var))[c("g2", "g3")]
       g2        g3 
0.2245735 0.2703786 
> 
> ## Compare log-Likelihoods
> logLik(opt)
'log Lik.' -244.3803 (df=4)
> logLik(aft)
'log Lik.' -244.3803 (df=4)
> 
> 
> ## ****************** Left-censored
> 
> mydata <- data.frame(y = Surv(y, sample(0:1, length(y), replace = TRUE), 
+                      type = "left"), g = g)
> 
> ## Estimate coefficients
> (cf <- coef(opt <- mlt(m, data = mydata)))
Gradient[1] "Mean relative difference: 4.085317e-05"
Hessian:[1] TRUE
     log(y) (Intercept)          g2          g3 
  2.1201727   0.5300823  -1.5420718  -2.3381619 
> cf[-1] / cf[1]
(Intercept)          g2          g3 
  0.2500185  -0.7273331  -1.1028167 
> 
> coef(aft <- survreg(y ~ g, data = mydata, dist = "weibull"))
(Intercept)          g2          g3 
 -0.2500185   0.7273333   1.1028169 
> 
> ## Compare log-Likelihoods
> logLik(opt)
'log Lik.' -229.4246 (df=4)
> logLik(aft)
'log Lik.' -229.4246 (df=4)
> 
> 
> ## ************** Interval-censored
> 
> mydata <- data.frame(y = Surv(y, y + 1, sample(0:3, length(y), replace = TRUE),
+                      type = "interval"), g = g)
> 
> ## Estimate coefficients
> (cf <- coef(opt <- mlt(m, data = mydata)))
Gradient[1] "Mean relative difference: 3.697288e-05"
Hessian:[1] TRUE
     log(y) (Intercept)          g2          g3 
  2.7086329  -0.4274823  -1.7414275  -2.7584069 
> cf[-1] / cf[1]
(Intercept)          g2          g3 
 -0.1578222  -0.6429175  -1.0183760 
> 
> coef(aft <- survreg(y ~ g, data = mydata, dist = "weibull"))
(Intercept)          g2          g3 
  0.1578214   0.6429186   1.0183773 
> 
> ## Compare log-Likelihoods
> logLik(opt)
'log Lik.' -270.1912 (df=4)
> logLik(aft)
'log Lik.' -270.1912 (df=4)
> 
> 
> proc.time()
   user  system elapsed 
  3.009   0.070   3.066 
