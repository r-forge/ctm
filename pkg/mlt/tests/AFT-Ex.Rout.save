
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library("mlt")
Loading required package: basefun
Loading required package: Matrix
Loading required package: polynom
Loading required package: numDeriv
> library("eha")
Loading required package: survival
> set.seed(29)
> 
> ## ************** Exponential - AFT *********************************
> 
> ### true dgp
> rY <- function(n, ...) rexp(n, ...)
> pY <- function(x, ...) pexp(x, ...)
> dY <- function(x, ...) dexp(x, ...)
> 
> gf <- gl(3, 1)
> g <- rep(gf, 100)
> y <- rY(length(g), rate = (1:nlevels(g))[g])
> mydata <- data.frame(y = y, g = g)
> 
> boxplot(y ~ g, data = mydata)
> 
> Bb <- log_basis(var = "y", support = range(y))
> Bx <- as.basis(~ g, remove_intercept = FALSE)
> m <- model(Bb, shifting = Bx, todist = "MinExtrVal")
> 
> ## Estimate coefficients
> coef(opt <- mlt(m, data = mydata, fixed = c("log(y)" = 1)))
iter:  0  f-value:  164.5395  pgrad:  37.38274 
iter:  10  f-value:  145.8508  pgrad:  0.7869284 
iter:  20  f-value:  145.845  pgrad:  0.03773067 
iter:  0  f-value:  176.2909  pgrad:  108.4028 
iter:  10  f-value:  145.86  pgrad:  2.910091 
iter:  20  f-value:  145.845  pgrad:  0.001732568 
Score: 1.000074  Hessian: 5.99033e-09 
     log(y) (Intercept)          g2          g3 
  1.0000000  -0.1230055   0.7915146   1.1190530 
> 
> coef(aft <- survreg(Surv(y, rep(TRUE, nrow(mydata))) ~ g, data = mydata,
+                     dist = "exponential"))
(Intercept)          g2          g3 
  0.1230066  -0.7915161  -1.1190543 
> 
> coef(cox <- coxph(Surv(y, rep(TRUE, nrow(mydata))) ~ g, data = mydata))
      g2       g3 
0.699808 1.022699 
> 
> coef(phreg <- phreg(Surv(y, rep(TRUE, nrow(mydata))) ~ g, data = mydata, 
+                     dist = "weibull", shape = 1))
        g2         g3 log(scale) 
 0.7915161  1.1190543  0.1230066 
> 
> ## Compare standard errors
> ## MLT
> sqrt(diag(vcov(opt)))[c("g2", "g3")]
       g2        g3 
0.1414213 0.1414213 
> ## Cox
> sqrt(diag(vcov(cox)))
       g2        g3 
0.1523056 0.1557383 
> ## phreg
> sqrt(diag(phreg$var))[c("g2", "g3")]
       g2        g3 
0.1414214 0.1414214 
> 
> ## Compare log-Likelihoods
> logLik(aft)
'log Lik.' -145.845 (df=3)
> logLik(opt)
'log Lik.' -145.845 (df=3)
> 
> 
> ## Use a Weibull-AFT for estimation (Weibull shape parameter should be nu = 1)
> 
> ## Estimate coefficients
> (cf <- coef(opt2 <- mlt(m, data = mydata)))
iter:  0  f-value:  273.693  pgrad:  457.8191 
iter:  10  f-value:  152.4848  pgrad:  15.04079 
iter:  20  f-value:  144.4947  pgrad:  2.087788 
iter:  30  f-value:  144.2872  pgrad:  2.239663 
iter:  40  f-value:  144.2832  pgrad:  0.006458833 
iter:  0  f-value:  144.2832  pgrad:  6.778886e-05 
Score: 1.000014  Hessian: 3.275954e-08 
     log(y) (Intercept)          g2          g3 
  0.9238448  -0.0759686   0.7234021   1.0274565 
Warning message:
In mlt(m, data = mydata) : NB not met
> cf[-1] / cf[1]
(Intercept)          g2          g3 
-0.08223091  0.78303420  1.11215270 
> 
> coef(aft2 <- survreg(Surv(y, rep(TRUE, nrow(mydata))) ~ g, data = mydata,
+                      dist = "weibull"))
(Intercept)          g2          g3 
  0.0822325  -0.7830360  -1.1121547 
> 
> ## Compare Weibull shape paramters
> 1 / cf[1]
  log(y) 
1.082433 
> aft2$scale
[1] 1.082433
> 
> ## Compare log-Likelihoods
> logLik(opt2)
'log Lik.' -144.2832 (df=4)
> logLik(aft2)
'log Lik.' -144.2832 (df=4)
> 
> sqrt(diag(vcov(opt2)))[c("g2", "g3")]
       g2        g3 
0.1462996 0.1502460 
> sqrt(diag(vcov(aft2)))[c("g2", "g3")]
       g2        g3 
0.1531531 0.1531334 
> 
> 
> ## *************** Right-censored
> 
> mydata <- data.frame(y = Surv(y, sample(0:1, length(y), replace = TRUE)), g = g)
> coef(opt <- mlt(m, data = mydata, fixed = c("log(y)" = 1)))
iter:  0  f-value:  220.1503  pgrad:  145.1462 
iter:  10  f-value:  171.3808  pgrad:  1.259213 
iter:  20  f-value:  171.2178  pgrad:  0.03247465 
iter:  0  f-value:  359.8636  pgrad:  366.7013 
iter:  10  f-value:  171.7393  pgrad:  11.77245 
iter:  20  f-value:  171.2178  pgrad:  0.01818192 
Score: 1.000042  Hessian: 3.025207e-10 
     log(y) (Intercept)          g2          g3 
  1.0000000  -0.9669759   1.0006068   1.2290541 
> 
> ## Estimate coefficients 
> coef(aft <- survreg(y ~ g, data = mydata, dist = "expo"))
(Intercept)          g2          g3 
  0.9669767  -1.0006079  -1.2290552 
> coef(cox <- coxph(y ~ g, data = mydata))
       g2        g3 
0.8462725 1.0343735 
> coef(phreg <- phreg(y ~ g, data = mydata, dist = "weibull", shape = 1))
        g2         g3 log(scale) 
 1.0006079  1.2290552  0.9669767 
> 
> ## Compare standard errors
> ## MLT
> sqrt(diag(vcov(opt)))[c("g2", "g3")]
       g2        g3 
0.2052406 0.2099741 
> ## Cox
> sqrt(diag(vcov(cox)))
       g2        g3 
0.2215402 0.2298889 
> ## phreg
> sqrt(diag(phreg$var))[c("g2", "g3")]
       g2        g3 
0.2052407 0.2099742 
> 
> 
> 
> ## ************** Left-censored
> 
> mydata <- data.frame(y = Surv(y, sample(0:1, length(y), replace = TRUE), 
+                      type = "left"), g = g)
> 
> ## Estimate coefficients
> coef(opt <- mlt(m, data = mydata,  fixed = c("log(y)" = 1)))
iter:  0  f-value:  236.0075  pgrad:  124.9442 
iter:  10  f-value:  191.9798  pgrad:  0.1138687 
iter:  20  f-value:  191.9795  pgrad:  0.008088819 
iter:  0  f-value:  230.3107  pgrad:  114.8446 
iter:  10  f-value:  191.9897  pgrad:  0.5548637 
iter:  20  f-value:  191.9795  pgrad:  0.002391739 
Score: 1.000085  Hessian: 6.51994e-10 
     log(y) (Intercept)          g2          g3 
  1.0000000   0.3913268   0.7907721   0.8952332 
> 
> coef(aft <- survreg(y ~ g, data = mydata, dist = "expo"))
(Intercept)          g2          g3 
 -0.3913267  -0.7907722  -0.8952333 
> 
> ## Compare standard errors
> ## MLT
> sqrt(diag(vcov(opt)))[c("g2", "g3")]
       g2        g3 
0.1514390 0.1485206 
> ## phreg
> sqrt(diag(phreg$var))[c("g2", "g3")]
       g2        g3 
0.2052407 0.2099742 
> 
> 
> try(coef(cox <- coxph(y ~ g, data = mydata)))
Error in coxph(y ~ g, data = mydata) : 
  Cox model doesn't support "left" survival data
> try(coef(phreg <- phreg(y ~ g, data = mydata, dist = "weibull", shape = 1)))
Error in phreg(y ~ g, data = mydata, dist = "weibull", shape = 1) : 
  This model doesn't support "left" survival data
> 
> 
> 
> ## *************** Intervall-censored
> mydata <- data.frame(y = Surv(y, y + 1, sample(0:3, length(y), replace = TRUE),
+                      type = "interval"), g = g)
> 
> coef(opt<- mlt(m, data = mydata, fixed = c("log(y)" = 1)))
iter:  0  f-value:  365.1111  pgrad:  203.6494 
iter:  10  f-value:  276.4065  pgrad:  3.525097 
iter:  20  f-value:  275.6352  pgrad:  0.006422738 
iter:  0  f-value:  349.1775  pgrad:  210.4335 
iter:  10  f-value:  275.7208  pgrad:  1.253729 
iter:  20  f-value:  275.6352  pgrad:  0.04736629 
Score: 1.000014  Hessian: 5.213963e-10 
     log(y) (Intercept)          g2          g3 
  1.0000000  -0.5235630   0.8244432   1.2689316 
> coef(aft <- survreg(y ~ g, data = mydata, dist = "expo"))
(Intercept)          g2          g3 
  0.5235629  -0.8244424  -1.2689331 
> 
> ## Compare standard errors
> ## MLT
> sqrt(diag(vcov(opt)))[c("g2", "g3")]
       g2        g3 
0.1725323 0.1709445 
> ## phreg
> sqrt(diag(phreg$var))[c("g2", "g3")]
       g2        g3 
0.2052407 0.2099742 
> 
> 
> try(coef(cox <- coxph(y ~ g, data = mydata)))
Error in coxph(y ~ g, data = mydata) : 
  Cox model doesn't support "interval" survival data
> try(coef(phreg <- phreg(y ~ g, data = mydata, dist = "weibull", shape = 1)))
Error in phreg(y ~ g, data = mydata, dist = "weibull", shape = 1) : 
  This model doesn't support "interval" survival data
> 
> 
> 
> 
> ## ************** Weibull - AFT *********************************
> 
> set.seed(196)
> 
> ### true dgp
> rY <- function(n, ...) rweibull(n, ...)
> pY <- function(x, ...) pweibull(x, ...)
> dY <- function(x, ...) dweibull(x, ...)
> 
> gf <- gl(3, 1)
> g <- rep(gf, 100)
> y <- rY(length(g), scale = (1:nlevels(g))[g], shape = 3)
> mydata <- data.frame(y = y, g = g)
> 
> boxplot(y ~ g, data = mydata)
> 
> Bb <- log_basis(var = "y", support = range(y))
> Bx <- as.basis(~ g, remove_intercept = FALSE)
> m <- model(Bb, shifting = Bx, todist = "MinExtrVal")
> 
> ## Estimate coefficients
> 
> ## PH-scale
> (cf <- coef(opt <- mlt(m, data = mydata)))
iter:  0  f-value:  475.6143  pgrad:  181.8812 
iter:  10  f-value:  300.0763  pgrad:  19.71995 
iter:  20  f-value:  259.8997  pgrad:  3.001715 
iter:  30  f-value:  259.0671  pgrad:  0.6063851 
iter:  40  f-value:  259.0566  pgrad:  0.3120391 
iter:  50  f-value:  259.0559  pgrad:  0.004278604 
iter:  0  f-value:  259.0559  pgrad:  6.023226e-05 
Score: 1.000564  Hessian: 2.204424e-07 
     log(y) (Intercept)          g2          g3 
 3.10039805 -0.02638663 -2.12855797 -3.37407235 
Warning message:
In mlt(m, data = mydata) : NB not met
> 
> (coef_cox <- coef(cox <- coxph(Surv(y, rep(TRUE, nrow(mydata))) ~ g, 
+                  	          data = mydata)))
       g2        g3 
-2.113511 -3.405349 
> 
> (coef_phreg <- coef(phreg <- phreg(Surv(y, rep(TRUE, nrow(mydata))) ~ g,
+                                    data = mydata, dist = "weibull")))
         g2          g3  log(scale)  log(shape) 
-2.12855989 -3.37407494  0.00851049  1.13153109 
> 
> ## AFT-scale
> coef(aft <- survreg(Surv(y, rep(TRUE, nrow(mydata))) ~ g, data = mydata,
+                     dist = "weibull"))
(Intercept)          g2          g3 
 0.00851049  0.68654367  1.08827090 
> 
> cf[-1] / cf[1]
 (Intercept)           g2           g3 
-0.008510725 -0.686543451 -1.088270700 
> coef_cox * aft$scale
        g2         g3 
-0.6816897 -1.0983578 
> coef_phreg[c("g2", "g3")] * aft$scale
        g2         g3 
-0.6865437 -1.0882709 
> 
> ## Compare shape parameters
> 1 / cf[1]
   log(y) 
0.3225392 
> 1 / exp(coef_phreg[c("log(shape)")])
log(shape) 
  0.322539 
> aft$scale
[1] 0.322539
> 
> ## Compare standard errors
> sqrt(diag(vcov(opt)))[c("g2", "g3")]
       g2        g3 
0.1695251 0.2038084 
> sqrt(diag(vcov(cox)))
       g2        g3 
0.1855397 0.2196354 
> sqrt(diag(phreg$var))[c("g2", "g3")]
       g2        g3 
0.1695251 0.2038084 
> 
> ## Compare log-Likelihoods
> logLik(aft)
'log Lik.' -259.0559 (df=4)
> logLik(opt)
'log Lik.' -259.0559 (df=4)
> 
> 
> ## ************************* Right-censored
> 
> mydata <- data.frame(y = Surv(y, sample(0:1, length(y), replace = TRUE)), g = g)
> 
> ## Estimate coefficients
> (cf <- coef(opt <- mlt(m, data = mydata)))
iter:  0  f-value:  384.0693  pgrad:  135.63 
iter:  10  f-value:  268.3802  pgrad:  20.5458 
iter:  20  f-value:  247.8291  pgrad:  4.889914 
iter:  30  f-value:  244.4073  pgrad:  0.4896467 
iter:  40  f-value:  244.3807  pgrad:  0.291798 
iter:  50  f-value:  244.3803  pgrad:  0.01232507 
iter:  60  f-value:  244.3803  pgrad:  0.0009521273 
iter:  0  f-value:  244.3803  pgrad:  9.713667e-06 
Score: 1.000874  Hessian: 1.294502e-09 
     log(y) (Intercept)          g2          g3 
  2.9704379  -0.5337426  -2.1300104  -3.3635876 
Warning messages:
1: In mlt(m, data = mydata) : NB not met
2: In spg(par = beta, fn = loglikfct, gr = scorefct, project = "projectLinear",  :
  convergence tolerance satisified at intial parameter values.
> cf[-1] / cf[1]
(Intercept)          g2          g3 
 -0.1796848  -0.7170695  -1.1323541 
> 
> coef(aft <- survreg(y ~ g, data = mydata, dist = "weibull"))
(Intercept)          g2          g3 
  0.1796848   0.7170695   1.1323542 
> 
> coef_cox <- coef(cox <- coxph(y ~ g, data = mydata))
> coef_cox * aft$scale
        g2         g3 
-0.7135292 -1.1563405 
> 
> coefs_phreg <- coef(phreg <- phreg(y ~ g, data = mydata, dist = "weibull"))
> coefs_phreg[c("g2", "g3")] * aft$scale
        g2         g3 
-0.7170695 -1.1323542 
> 
> ## Compare standard errors
> sqrt(diag(vcov(opt)))[c("g2", "g3")]
       g2        g3 
0.2245735 0.2703786 
> sqrt(diag(vcov(cox)))
       g2        g3 
0.2441318 0.2938864 
> sqrt(diag(phreg$var))[c("g2", "g3")]
       g2        g3 
0.2245735 0.2703786 
> 
> ## Compare log-Likelihoods
> logLik(opt)
'log Lik.' -244.3803 (df=4)
> logLik(aft)
'log Lik.' -244.3803 (df=4)
> 
> 
> ## ****************** Left-censored
> 
> mydata <- data.frame(y = Surv(y, sample(0:1, length(y), replace = TRUE), 
+                      type = "left"), g = g)
> 
> ## Estimate coefficients
> (cf <- coef(opt <- mlt(m, data = mydata)))
iter:  0  f-value:  319.8111  pgrad:  124.1204 
iter:  10  f-value:  236.7122  pgrad:  21.19246 
iter:  20  f-value:  229.5851  pgrad:  1.523486 
iter:  30  f-value:  229.4248  pgrad:  0.1803261 
iter:  40  f-value:  229.4246  pgrad:  0.0122489 
iter:  50  f-value:  229.4246  pgrad:  0.007381118 
iter:  0  f-value:  229.4246  pgrad:  1.857103e-05 
Score: 0.9999923  Hessian: 2.324109e-08 
     log(y) (Intercept)          g2          g3 
  2.1201728   0.5300824  -1.5420719  -2.3381620 
Warning message:
In mlt(m, data = mydata) : NB not met
> cf[-1] / cf[1]
(Intercept)          g2          g3 
  0.2500185  -0.7273331  -1.1028167 
> 
> coef(aft <- survreg(y ~ g, data = mydata, dist = "weibull"))
(Intercept)          g2          g3 
 -0.2500185   0.7273333   1.1028169 
> 
> ## Compare log-Likelihoods
> logLik(opt)
'log Lik.' -229.4246 (df=4)
> logLik(aft)
'log Lik.' -229.4246 (df=4)
> 
> 
> ## ************** Interval-censored
> 
> mydata <- data.frame(y = Surv(y, y + 1, sample(0:3, length(y), replace = TRUE),
+                      type = "interval"), g = g)
> 
> ## Estimate coefficients
> (cf <- coef(opt <- mlt(m, data = mydata)))
iter:  0  f-value:  368.8032  pgrad:  101.9544 
iter:  10  f-value:  278.4969  pgrad:  8.257101 
iter:  20  f-value:  270.6314  pgrad:  2.030634 
iter:  30  f-value:  271.2684  pgrad:  18.77217 
iter:  40  f-value:  270.1912  pgrad:  0.009385417 
iter:  50  f-value:  270.1912  pgrad:  0.001482476 
iter:  0  f-value:  270.1912  pgrad:  0.0001793998 
Score: 1.000005  Hessian: 3.632765e-08 
     log(y) (Intercept)          g2          g3 
   2.708629   -0.427483   -1.741423   -2.758401 
Warning message:
In mlt(m, data = mydata) : NB not met
> cf[-1] / cf[1]
(Intercept)          g2          g3 
 -0.1578226  -0.6429168  -1.0183753 
> 
> coef(aft <- survreg(y ~ g, data = mydata, dist = "weibull"))
(Intercept)          g2          g3 
  0.1578214   0.6429186   1.0183773 
> 
> ## Compare log-Likelihoods
> logLik(opt)
'log Lik.' -270.1912 (df=4)
> logLik(aft)
'log Lik.' -270.1912 (df=4)
> 
> 
> proc.time()
   user  system elapsed 
  4.598   0.074   4.679 
