
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library("mlt")
Loading required package: basefun
Loading required package: variables
> library("lattice")
> 
> data("faithful")
> 
> aic <- numeric(20)
> 
> for (o in 2:(length(aic) + 1)) {
+ Bs <- Bernstein_basis(numeric_var("waiting", support = range(faithful$waiting) + c(-5, 5)),
+                       order = o, ui = "incre")
+ m <- ctm(Bs)
+ mod <- mlt(m, data = faithful)
+ yp <- mkgrid(mod, 50)[["waiting"]]
+ 
+ aic[o - 1] <- AIC(mod)
+ 
+ pd <- data.frame(waiting = yp)
+ pd$p <- predict(mod, q = yp, type = "distribution")
+ 
+ plot(p ~ waiting, data = pd,
+      col = "red", pch = 21, main = paste("order", o, "aic", aic[o - 1]))
+ lines(ecdf(faithful$waiting))
+ 
+ }
> 
> plot(aic)
> 
> o <- which.min(aic) + 1
> Bs <- Bernstein_basis(numeric_var("waiting", support = range(faithful$waiting) + c(-5, 5)),
+                       order = o, ui = "incre")
> m <- ctm(Bs)
> mod <- mlt(m, data = faithful)
> 
> abline(h = AIC(mod))
> 
> pd$d <- predict(mod, q = yp, type = "density")
> 
> plot(d ~ waiting, data = pd, type = "l", col = "red", lwd = 3)
> lines(density(faithful$waiting))
> lines(rug(faithful$waiting))
> abline(h = 0)
> 
> p <- 1:99 / 100
> q <- predict(mod, p = p, n = 100, type = "quantile")
> 
> plot(p, q)
> lines(p, quantile(faithful$waiting, p))
> 
> Bs <- Bernstein_basis(numeric_var("waiting", support = range(faithful$waiting) + c(-5, 5)),
+                       order = o, ui = "incre")
> m <- ctm(Bs)
> mod <- mlt(m, data = faithful)
> 
> # H1 <- mod$optim(coef(mod), hessian = TRUE)$hessian
> H2 <- mod$hessian(coef(mod), weights(mod))
> 
> X <- model.matrix(m, faithful)
> Xprime <- model.matrix(m, faithful, deriv = c(waiting = 1))
> w <- drop((Xprime %*% coef(mod))^2)
> H3 <- crossprod(X) + crossprod(Xprime * w, Xprime)
> max(abs(H3 - H2))
[1] 9.885597
> 
> cov2cor(vcov(mod))
             Bs1(waiting) Bs2(waiting) Bs3(waiting) Bs4(waiting) Bs5(waiting)
Bs1(waiting)    1.0000000   -0.9652656    0.9032053   -0.8310317    0.7513995
Bs2(waiting)   -0.9652656    1.0000000   -0.9793104    0.9309906   -0.8628108
Bs3(waiting)    0.9032053   -0.9793104    1.0000000   -0.9835441    0.9383219
Bs4(waiting)   -0.8310317    0.9309906   -0.9835441    1.0000000   -0.9837278
Bs5(waiting)    0.7513995   -0.8628108    0.9383219   -0.9837278    1.0000000
Bs6(waiting)   -0.6649918    0.7788034   -0.8677581    0.9357829   -0.9824465
Bs7(waiting)    0.5741523   -0.6830278    0.7767008   -0.8583342    0.9286162
Bs8(waiting)   -0.4756211    0.5730197   -0.6625697    0.7479342   -0.8313483
Bs9(waiting)    0.3573296   -0.4341439    0.5079552   -0.5821468    0.6606656
             Bs6(waiting) Bs7(waiting) Bs8(waiting) Bs9(waiting)
Bs1(waiting)   -0.6649918    0.5741523   -0.4756211    0.3573296
Bs2(waiting)    0.7788034   -0.6830278    0.5730197   -0.4341439
Bs3(waiting)   -0.8677581    0.7767008   -0.6625697    0.5079552
Bs4(waiting)    0.9357829   -0.8583342    0.7479342   -0.5821468
Bs5(waiting)   -0.9824465    0.9286162   -0.8313483    0.6606656
Bs6(waiting)    1.0000000   -0.9794871    0.9079639   -0.7427120
Bs7(waiting)   -0.9794871    1.0000000   -0.9699965    0.8292216
Bs8(waiting)    0.9079639   -0.9699965    1.0000000   -0.9214160
Bs9(waiting)   -0.7427120    0.8292216   -0.9214160    1.0000000
> 
> if (FALSE) {
+ library("multcomp") ### since 1.0-3
+ 
+ mp <- parm(coef(mod), vcov(mod))
+ y <- mkgrid(mod, 30)$waiting
+ g <- glht(mp, linfct = model.matrix(mod$model,
+     data = data.frame(waiting = y)))
+ 
+ mc <- confint(g)
+ umc <- confint(g, calpha = qnorm(.975))
+ p <- mod$model$todistr$p
+ plot(y, p(mc$confint[, "Estimate"]), type = "l")
+ lines(y, p(mc$confint[, "lwr"]))
+ lines(y, p(mc$confint[, "upr"]))
+ lines(y, p(umc$confint[, "lwr"]))
+ lines(y, p(umc$confint[, "upr"]))
+ 
+ library("survival")
+ cm <- coxph(Surv(waiting, rep(TRUE, nrow(faithful))) ~ 1, data = faithful)
+ plot(survfit(cm))
+ lines(y, 1 - p(mc$confint[, "Estimate"]), col = "red")
+ lines(y, 1 - p(mc$confint[, "lwr"]), col = "red")
+ lines(y, 1 - p(mc$confint[, "upr"]), col = "red")
+ }
> 
> proc.time()
   user  system elapsed 
 11.340   0.032  11.363 
