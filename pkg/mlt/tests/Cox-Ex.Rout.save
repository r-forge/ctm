
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library("mlt")
Loading required package: basefun
Loading required package: variables
> library("survival")
> set.seed(29)
> 
> ### true dgp
> rY <- function(n, ...) rexp(n, ...)
> pY <- function(x, ...) pexp(x, ...)
> dY <- function(x, ...) dexp(x, ...)
> 
> ### tree groups
> gf <- gl(3, 1)
> g <- rep(gf, 100)
> y <- rY(length(g), rate = (1:nlevels(g))[g])
> mydata <- data.frame(y = y, g = g)
> 
> boxplot(y ~ g, data = mydata)
> 
> ### uncensored, Cox model, h = bernstein
> Bb <- Bernstein_basis(numeric_var("y", support = c(0, max(y) + .1)), order = 5,
+                       ui = "increasing")
> s <- as.basis(~ g, data = data.frame(g = gf), remove_intercept = TRUE)
> m <- ctm(response = Bb, shifting = s, todist = "MinExtrVal")
> (cf1 <- coef(opt <- mlt(m, data = mydata)))
    Bs1(y)     Bs2(y)     Bs3(y)     Bs4(y)     Bs5(y)     Bs6(y)         g2 
-2.5706841  1.1035976  1.1035976  1.1035976  1.1035976  1.8004141  0.9323836 
        g3 
 1.2627559 
> coef(cph <- coxph(Surv(y, rep(TRUE, nrow(mydata))) ~ g, data = mydata))
      g2       g3 
0.699808 1.022699 
> yn <- mkgrid(Bb, 50)$y
> yn <- yn[yn > 0]
> a <- predict(opt, newdata = data.frame(g = gf[1]), q = yn)
> layout(matrix(1:4, ncol = 2))
> plot(yn, a, type = "l", col = "red")
> lines(yn, log(yn))
> a <- predict(opt, newdata = data.frame(g = gf), q = yn, type = "survivor")
> plot(yn, a[,1], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[1])))
> plot(yn, a[,2], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[2])))
> plot(yn, a[,3], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[3])))
> 
> ### h = c(log, bernstein)
> lb <- log_basis(numeric_var("y", support = c(.Machine$double.eps, max(y))), ui = "increasing")
> m <- ctm(response = c(blog = lb, bBern = Bb), shifting = s, todist = "MinExtrVal")
> (cf1 <- coef(opt <- mlt(m, data = mydata)))
      log(y)       Bs1(y)       Bs2(y)       Bs3(y)       Bs4(y)       Bs5(y) 
 0.838722371 -0.305718475 -0.002507165 -0.002507165 -0.002507165 -0.002507165 
      Bs6(y)           g2           g3 
 0.275029916  0.764302707  1.068695261 
> ## sample from this model
> sam <- simulate(opt, newdata = data.frame(g = gf), nsim = 100)
> nd <- data.frame(y = unlist(sam), g = rep(gf, length(sam)))
> opt2 <- mlt(m, data = nd)
> ## visualise
> yn <- mkgrid(Bb, 50)$y
> yn <- yn[yn > 0]
> a <- predict(opt, newdata = data.frame(g = gf[1]), q = yn)
> layout(matrix(1:4, ncol = 2))
> plot(yn, a, type = "l", col = "red")
> lines(yn, log(yn))
> a <- predict(opt, newdata = data.frame(g = gf), q = yn, type = "survivor")
> plot(yn, a[,1], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[1])))
> plot(yn, a[,2], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[2])))
> plot(yn, a[,3], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[3])))
> 
> ### right censoring
> mydata <- data.frame(y = Surv(y, sample(0:1, length(y), replace = TRUE)), g = g)
> coef(opt <- mlt(m, data = mydata))
    log(y)     Bs1(y)     Bs2(y)     Bs3(y)     Bs4(y)     Bs5(y)     Bs6(y) 
 0.8548881 -0.8701425 -0.7839422 -0.7839422 -0.7839422 -0.7839422 -0.2774362 
        g2         g3 
 0.8692641  1.1418619 
> coef(cph <- coxph(y ~ g, data = mydata))
       g2        g3 
0.7891759 1.0616941 
> 
> ### left censoring
> mydata <- data.frame(y = Surv(y, sample(0:1, length(y), replace = TRUE), type = "left"), g = g)
> coef(opt <- mlt(m, data = mydata))
     log(y)      Bs1(y)      Bs2(y)      Bs3(y)      Bs4(y)      Bs5(y) 
 0.38199124 -0.04274403  0.97763056  0.97763056  0.97763056  0.97763056 
     Bs6(y)          g2          g3 
 1.19852459  0.33285740  0.53879516 
> 
> ### interval censoring
> Bb <- Bernstein_basis(numeric_var("y", support = c(0, max(y + 1) + .1)), order = 5,
+                       ui = "increasing")
> mydata <- data.frame(y = Surv(y, y + 1, sample(0:3, length(y), replace = TRUE), type = "interval"), 
+                      g = g)
> m <- ctm(response = c(blog = lb, bBern = Bb), shifting = s, todist = "MinExtrVal")
> coef(opt <- mlt(m, data = mydata))
    log(y)     Bs1(y)     Bs2(y)     Bs3(y)     Bs4(y)     Bs5(y)     Bs6(y) 
 0.5103199 -1.2644809  0.1631430  0.1631430  0.1631430  0.1631430  1.1422497 
        g2         g3 
 0.7207449  0.9519242 
> 
> ### uncensored, time-varying coefficints in both groups
> mydata <- data.frame(y = y, g = g)
> m <- ctm(response = c(blog = lb, bBern = Bb), 
+            interacting = as.basis(~ g, data = mydata),
+            todist = "MinExtrVal")
> coef(opt <- mlt(m, data = mydata))
Note: method with signature 'dsparseMatrix#dsparseMatrix' chosen for function 'kronecker',
 target signature 'dgTMatrix#dgCMatrix'.
 "TsparseMatrix#sparseMatrix" would also be valid
log(y):(Intercept) Bs1(y):(Intercept) Bs2(y):(Intercept) Bs3(y):(Intercept) 
      0.8084396338      -0.0585289040      -0.0585289040      -0.0585289040 
Bs4(y):(Intercept) Bs5(y):(Intercept) Bs6(y):(Intercept)          log(y):g2 
     -0.0585289040      -0.0585289040       0.7419099124      -0.1425827986 
         Bs1(y):g2          Bs2(y):g2          Bs3(y):g2          Bs4(y):g2 
     -0.0002167961       1.2846969023       1.2846969023       1.2846969023 
         Bs5(y):g2          Bs6(y):g2          log(y):g3          Bs1(y):g3 
      1.2846969023       1.3206711349       0.1662900802       1.0300389883 
         Bs2(y):g3          Bs3(y):g3          Bs4(y):g3          Bs5(y):g3 
      1.0300389883       1.0300389883       1.0300389883       3.5188704660 
         Bs6(y):g3 
      2.7184316496 
There were 14 warnings (use warnings() to see them)
> coef(cph <- coxph(Surv(y, rep(TRUE, nrow(mydata))) ~ g, data = mydata))
      g2       g3 
0.699808 1.022699 
> ## visualize
> a <- predict(opt, newdata = data.frame(g = gf[1]), q = yn)
> layout(matrix(1:4, ncol = 2))
> plot(yn, a, type = "l", col = "red")
> lines(yn, log(yn))
> a <- predict(opt, newdata = data.frame(g = gf), q = yn, type = "survivor")
> plot(yn, a[,1], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[1])))
> plot(yn, a[,2], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[2])))
> plot(yn, a[,3], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[3])))
> 
> 
> proc.time()
   user  system elapsed 
  8.916   0.052   8.960 
