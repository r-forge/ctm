
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library("mlt")
Loading required package: basefun
Loading required package: variables
> library("survival")
> set.seed(29)
> 
> ### true dgp
> rY <- function(n, ...) rexp(n, ...)
> pY <- function(x, ...) pexp(x, ...)
> dY <- function(x, ...) dexp(x, ...)
> 
> ### tree groups
> gf <- gl(3, 1)
> g <- rep(gf, 100)
> y <- rY(length(g), rate = (1:nlevels(g))[g])
> mydata <- data.frame(y = y, g = g)
> 
> boxplot(y ~ g, data = mydata)
> 
> ### uncensored, Cox model, h = bernstein
> Bb <- Bernstein_basis(numeric_var("y", support = c(0, max(y) + .1), bounds = c(0, Inf)), 
+                       order = 5, ui = "increasing")
> s <- as.basis(~ g, data = data.frame(g = gf), remove_intercept = TRUE)
> m <- ctm(response = Bb, shifting = s, todist = "MinExtrVal")
> (cf1 <- coef(opt <- mlt(m, data = mydata)))
    Bs1(y)     Bs2(y)     Bs3(y)     Bs4(y)     Bs5(y)     Bs6(y)         g2 
-2.5706492  1.1035859  1.1035859  1.1035859  1.1035859  1.8004264  0.9323839 
        g3 
 1.2627526 
> coef(cph <- coxph(Surv(y, rep(TRUE, nrow(mydata))) ~ g, data = mydata))
      g2       g3 
0.699808 1.022699 
> yn <- mkgrid(Bb, 50)$y
> yn <- yn[yn > 0]
> a <- predict(opt, newdata = data.frame(g = gf[1]), q = yn)
> layout(matrix(1:4, ncol = 2))
> plot(yn, a, type = "l", col = "red")
> lines(yn, log(yn))
> a <- predict(opt, newdata = data.frame(g = gf), q = yn, type = "survivor")
> plot(yn, a[,1], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[1])))
> plot(yn, a[,2], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[2])))
> plot(yn, a[,3], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[3])))
> 
> ### h = bernstein(log())
> logBb <- Bernstein_basis(numeric_var("y", support = c(1, max(y) + .1), bounds = c(min(y) / 2, Inf)), 
+                          order = 5, ui = "increasing", log_first = TRUE)
> m <- ctm(response = logBb, shifting = s, todist = "MinExtrVal")
> (cf1 <- coef(opt <- mlt(m, data = mydata)))
    Bs1(y)     Bs2(y)     Bs3(y)     Bs4(y)     Bs5(y)     Bs6(y)         g2 
-0.1178082  0.1944438  0.7590058  0.9091408  0.9091408  1.6572210  0.7425515 
        g3 
 1.0379601 
> ## sample from this model
> sam <- simulate(opt, newdata = data.frame(g = gf), nsim = 100)
> nd <- data.frame(y = unlist(sam), g = rep(gf, length(sam)))
> opt2 <- mlt(m, data = nd)
> ## visualise
> yn <- mkgrid(Bb, 50)$y
> yn <- yn[yn > 0]
> a <- predict(opt, newdata = data.frame(g = gf[1]), q = yn)
> layout(matrix(1:4, ncol = 2))
> plot(yn, a, type = "l", col = "red")
> lines(yn, log(yn))
> a <- predict(opt, newdata = data.frame(g = gf), q = yn, type = "survivor")
> plot(yn, a[,1], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[1])))
> plot(yn, a[,2], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[2])))
> plot(yn, a[,3], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[3])))
> 
> ### right censoring
> mydata <- data.frame(y = Surv(y, sample(0:1, length(y), replace = TRUE)), g = g)
> coef(opt <- mlt(m, data = mydata, scale = TRUE))
    Bs1(y)     Bs2(y)     Bs3(y)     Bs4(y)     Bs5(y)     Bs6(y)         g2 
-0.8001701 -0.5067528 -0.3021118  0.2543729  0.2543729  1.2022233  0.6669575 
        g3 
 1.1941690 
> coef(cph <- coxph(y ~ g, data = mydata))
       g2        g3 
0.5963114 1.1590696 
> 
> ### left censoring
> mydata <- data.frame(y = Surv(y, sample(0:1, length(y), replace = TRUE), type = "left"), g = g)
> coef(opt <- mlt(m, data = mydata, scale = TRUE))
   Bs1(y)    Bs2(y)    Bs3(y)    Bs4(y)    Bs5(y)    Bs6(y)        g2        g3 
0.4381039 0.6472794 1.0505030 1.0505030 1.0505030 1.7944770 0.4889079 0.6648251 
> 
> ### interval censoring
> mydata <- data.frame(y = Surv(y, y + 1, sample(0:3, length(y), replace = TRUE), type = "interval"), 
+                      g = g)
> coef(opt <- mlt(m, data = mydata, scale = TRUE))
    Bs1(y)     Bs2(y)     Bs3(y)     Bs4(y)     Bs5(y)     Bs6(y)         g2 
-0.4800571 -0.1852375  0.2686561  0.5746432  0.5746432  1.2724920  0.8012506 
        g3 
 0.9886372 
> 
> ### uncensored, time-varying coefficients in both groups
> mydata <- data.frame(y = y, g = g)
> m <- ctm(response = logBb, 
+            interacting = as.basis(~ g, data = mydata),
+            todist = "MinExtrVal")
> coef(opt <- mlt(m, data = mydata, maxit = 5000, scale = TRUE))
Bs1(y):(Intercept) Bs2(y):(Intercept) Bs3(y):(Intercept) Bs4(y):(Intercept) 
        -0.1217383          0.1461328          0.7859991          0.8485231 
Bs5(y):(Intercept) Bs6(y):(Intercept)          Bs1(y):g2          Bs2(y):g2 
         0.8485231          1.6371710          0.7481326          0.8003261 
         Bs3(y):g2          Bs4(y):g2          Bs5(y):g2          Bs6(y):g2 
         0.7777003          0.7151763          0.7151763          2.7576592 
         Bs1(y):g3          Bs2(y):g3          Bs3(y):g3          Bs4(y):g3 
         1.0898326          1.1579143          0.5180481          1.3490348 
         Bs5(y):g3          Bs6(y):g3 
         5.2495552         10.4349764 
> coef(cph <- coxph(Surv(y, rep(TRUE, nrow(mydata))) ~ g, data = mydata))
      g2       g3 
0.699808 1.022699 
> ## visualize
> a <- predict(opt, newdata = data.frame(g = gf[1]), q = yn)
> layout(matrix(1:4, ncol = 2))
> plot(yn, a, type = "l", col = "red")
> lines(yn, log(yn))
> a <- predict(opt, newdata = data.frame(g = gf), q = yn, type = "survivor")
> plot(yn, a[,1], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[1])))
> plot(yn, a[,2], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[2])))
> plot(yn, a[,3], type = "l", col = "red", ylim = c(0, 1))
> lines(survfit(cph, newdata = data.frame(g = gf[3])))
> 
> 
> proc.time()
   user  system elapsed 
  1.551   0.079   1.625 
