
R version 4.0.4 (2021-02-15) -- "Lost Library Book"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mlt"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('mlt')
Loading required package: basefun
Loading required package: variables
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("R")
> ### * R
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: R
> ### Title: Response Variables
> ### Aliases: R R.Surv R.factor R.ordered R.numeric R.integer R.list
> ###   R.response as.Surv as.Surv.response
> 
> ### ** Examples
> 
> 
>  library("survival")
>  
>  ### randomly right-censored continuous observations
>  time <- as.double(1:9)
>  event <- rep(c(FALSE, TRUE), length = length(time))
> 
>  Surv(time, event)
[1] 1+ 2  3+ 4  5+ 6  7+ 8  9+
>  R(Surv(time, event))
[1] ( 1, Inf]  2        ( 3, Inf]  4        ( 5, Inf]  6        ( 7, Inf]
[8]  8        ( 9, Inf]
> 
>  ### right-censoring, left-truncation
>  ltm <- 1:9 / 10
>  Surv(ltm, time, event)
[1] (0.1,1+] (0.2,2]  (0.3,3+] (0.4,4]  (0.5,5+] (0.6,6]  (0.7,7+] (0.8,8] 
[9] (0.9,9+]
>  R(Surv(ltm, time, event))
[1] {( 1, Inf]| > 0.1} { 2| > 0.2}        {( 3, Inf]| > 0.3} { 4| > 0.4}       
[5] {( 5, Inf]| > 0.5} { 6| > 0.6}        {( 7, Inf]| > 0.7} { 8| > 0.8}       
[9] {( 9, Inf]| > 0.9}
> 
>  ### interval-censoring
>  Surv(ltm, time, type = "interval2")
[1] [0.1, 1] [0.2, 2] [0.3, 3] [0.4, 4] [0.5, 5] [0.6, 6] [0.7, 7] [0.8, 8]
[9] [0.9, 9]
>  R(Surv(ltm, time, type = "interval2"))
[1] (0.1, 1] (0.2, 2] (0.3, 3] (0.4, 4] (0.5, 5] (0.6, 6] (0.7, 7] (0.8, 8]
[9] (0.9, 9]
> 
>  ### interval-censoring, left/right-truncation
>  lc <- as.double(1:4)
>  lt <- c(NA, NA, 7, 8)
>  rt <- c(NA, 9, NA, 10)
>  x <- c(3, NA, NA, NA)
>  rc <- as.double(11:14)
>  R(x, cleft = lt, cright = rt)
[1]  3       (NA,  9] ( 7, NA] ( 8, 10]
>  as.Surv(R(x, cleft = lt, cright = rt))
[1] 3       9-      7+      [8, 10]
>  R(x, tleft = 1, cleft = lt, cright = rt)
[1] { 3| > 1}       {(NA,  9]| > 1} {( 7, NA]| > 1} {( 8, 10]| > 1}
>  R(x, tleft = 1, cleft = lt, cright = rt, tright = 15)
[1] { 3| (1, 15]}       {(NA,  9]| (1, 15]} {( 7, NA]| (1, 15]}
[4] {( 8, 10]| (1, 15]}
>  R(x, tleft = lc, cleft = lt, cright = rt, tright = rc)
[1] { 3| (1, 11]}       {(NA,  9]| (2, 12]} {( 7, NA]| (3, 13]}
[4] {( 8, 10]| (4, 14]}
> 
>  ### discrete observations: counts
>  x <- 0:9
>  R(x)
 [1] (NA, 0] ( 0, 1] ( 1, 2] ( 2, 3] ( 3, 4] ( 4, 5] ( 5, 6] ( 6, 7] ( 7, 8]
[10] ( 8, 9]
>  ### partially interval-censored counts
>  rx <- c(rep(NA, 6), rep(15L, 4))
>  R(x, cright = rx)
 [1] (NA,  0] ( 0,  1] ( 1,  2] ( 2,  3] ( 3,  4] ( 4,  5] ( 5, 15] ( 6, 15]
 [9] ( 7, 15] ( 8, 15]
> 
>  ### ordered factor
>  x <- gl(5, 2, labels = LETTERS[1:5], ordered = TRUE)
>  R(x)
 [1] (NA, A] (NA, A] (A, B]  (A, B]  (B, C]  (B, C]  (C, D]  (C, D]  (D, NA]
[10] (D, NA]
>  ### interval-censoring (ie, observations can have multiple levels)
>  lx <- ordered(c("A", "A", "B", "C", "D", "E"), 
+                levels = LETTERS[1:5], labels = LETTERS[1:5])
>  rx <- ordered(c("B", "D", "E", "D", "D", "E"), 
+                levels = LETTERS[1:5], labels = LETTERS[1:5])
>  R(rx, cleft = lx, cright = rx)
[1] (A, B]  (A, D]  (B, NA] (C, D]  (D, D]  (E, NA]
> 
> 
> 
> 
> cleanEx()

detaching ‘package:survival’

> nameEx("mlt")
> ### * mlt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlt
> ### Title: Most Likely Transformations
> ### Aliases: mlt
> 
> ### ** Examples
> 
>  
>   ### set-up conditional transformation model for conditional
>   ### distribution of dist given speed
>   dist <- numeric_var("dist", support = c(2.0, 100), bounds = c(0, Inf))
>   speed <- numeric_var("speed", support = c(5.0, 23), bounds = c(0, Inf)) 
>   ctmm <- ctm(response = Bernstein_basis(dist, order = 4, ui = "increasing"),
+               interacting = Bernstein_basis(speed, order = 3))
> 
>   ### fit model
>   mltm <- mlt(ctmm, data = cars)
> 
>   ### plot data
>   plot(cars)
>   ### predict quantiles and overlay data with model via a "quantile sheet"
>   q <- predict(mltm, newdata = data.frame(speed = 0:24), type = "quantile", 
+                p = 2:8 / 10, K = 500)
>   tmp <- apply(q, 1, function(x) lines(0:24, x, type = "l"))
> 
> 
> 
> 
> cleanEx()
> nameEx("mltoptim")
> ### * mltoptim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mltoptim
> ### Title: Control Optimisation
> ### Aliases: mltoptim
> ### Keywords: list
> 
> ### ** Examples
> 
> 
>   ### set-up linear transformation model for conditional
>   ### distribution of dist given speed
>   dist <- numeric_var("dist", support = c(2.0, 100), bounds = c(0, Inf))
>   ctmm <- ctm(response = Bernstein_basis(dist, order = 4, ui = "increasing"),
+               shifting = ~ speed, data = cars)
> 
>   ### use auglag with kkt2.check = TRUE => the numerically determined
>   ### hessian is returned as "optim_hessian" slot
>   op <- mltoptim(auglag = list(maxtry = 5, kkt2.check = TRUE))[1]
>   mltm <- mlt(ctmm, data = cars, scale = FALSE, optim = op)
> 
>   ### compare analytical and numerical hessian
>   all.equal(c(Hessian(mltm)), c(mltm$optim_hessian), tol = 1e-4)
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("predict")
> ### * predict
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot-predict-simulate
> ### Title: Plots, Predictions and Samples from mlt Objects
> ### Aliases: predict.ctm predict.mlt simulate.ctm simulate.mlt plot.ctm
> ###   plot.mlt
> 
> ### ** Examples
> 
> 
>   library("survival")
>   op <- options(digits = 2)
> 
>   ### GBSG2 dataset
>   data("GBSG2", package = "TH.data")
> 
>   ### right-censored response
>   GBSG2$y <- with(GBSG2, Surv(time, cens))
> 
>   ### define Bernstein(log(time)) parameterisation
>   ### of transformation function. The response
>   ### is bounded (log(0) doesn't work, so we use log(1))
>   ### support defines the support of the Bernstein polynomial
>   ### and add can be used to make the grid wider (see below)
>   rvar <- numeric_var("y", bounds = c(0, Inf), 
+                       support = c(100, 2000))
>   rb <- Bernstein_basis(rvar, order = 6, ui = "increasing")
>   ### dummy coding of menopausal status
>   hb <- as.basis(~ 0 + menostat, data = GBSG2)
>   ### treatment contrast of hormonal treatment
>   xb <- as.basis(~ horTh, data = GBSG2, remove_intercept = TRUE)
> 
>   ### set-up and fit Cox model, stratified by menopausal status
>   m <- ctm(rb, interacting = hb, shifting = xb, todistr = "MinExtrVal")
>   fm <- mlt(m, data = GBSG2)
> 
>   ### generate grid for all three variables
>   ### note that the response grid ranges between 1 (bounds[1])
>   ### and 2000 (support[2])
>   (d <- mkgrid(m, n = 10))
$y
 [1]    0  222  444  667  889 1111 1333 1556 1778 2000

$menostat
[1] Pre  Post
Levels: Pre Post

$horTh
[1] no  yes
Levels: no yes

>   ### data.frame of menopausal status and treatment
>   nd <- do.call("expand.grid", d[-1])
> 
>   ### plot model on different scales, for all four combinations
>   ### of menopausal status and hormonal treatment
>   typ <- c("distribution", "survivor", "density", "hazard", 
+            "cumhazard", "odds")
>   layout(matrix(1:6, nrow = 2))
>   nl <- sapply(typ, function(tp) 
+       ### K = 500 makes densities and hazards smooth
+       plot(fm, newdata = nd, type = tp, col = 1:nrow(nd), K = 500))
>   legend("topleft", lty = 1, col = 1:nrow(nd), 
+          legend = do.call("paste", nd), bty = "n")
> 
>   ### plot calls predict, which generates a grid with K = 50
>   ### response values
>   ### note that a K x nrow(newdata) matrix is returned
>   ### (for reasons explained in the next example)
>   predict(fm, newdata = nd, type = "survivor")
          
y          [,1] [,2] [,3] [,4]
      0    1.00 1.00 1.00 1.00
   40.8    0.99 1.00 1.00 1.00
   81.6    0.99 1.00 0.99 1.00
    122    0.99 0.99 0.99 0.99
    163    0.98 0.99 0.98 0.99
    204    0.97 0.98 0.98 0.99
    245    0.95 0.97 0.97 0.98
    286    0.94 0.96 0.96 0.97
    327    0.92 0.94 0.95 0.96
    367    0.90 0.92 0.93 0.95
    408    0.88 0.90 0.92 0.93
    449    0.86 0.88 0.90 0.92
    490    0.83 0.85 0.88 0.90
    531    0.81 0.83 0.87 0.88
    571    0.79 0.80 0.85 0.86
    612    0.77 0.78 0.84 0.85
    653    0.75 0.76 0.82 0.83
    694    0.73 0.73 0.81 0.81
    735    0.71 0.71 0.79 0.80
    776    0.69 0.69 0.78 0.78
    816    0.68 0.68 0.77 0.77
    857    0.66 0.66 0.76 0.76
    898    0.65 0.64 0.75 0.75
    939    0.64 0.63 0.74 0.73
    980    0.63 0.62 0.73 0.72
  1.02e+03 0.62 0.61 0.73 0.71
  1.06e+03 0.61 0.59 0.72 0.70
  1.1e+03  0.60 0.58 0.71 0.70
  1.14e+03 0.60 0.57 0.71 0.69
  1.18e+03 0.59 0.56 0.70 0.68
  1.22e+03 0.58 0.55 0.70 0.67
  1.27e+03 0.58 0.54 0.69 0.66
  1.31e+03 0.57 0.53 0.69 0.65
  1.35e+03 0.56 0.52 0.68 0.64
  1.39e+03 0.56 0.51 0.68 0.64
  1.43e+03 0.55 0.50 0.67 0.63
  1.47e+03 0.54 0.49 0.67 0.62
  1.51e+03 0.54 0.48 0.66 0.61
  1.55e+03 0.53 0.47 0.66 0.60
  1.59e+03 0.53 0.46 0.65 0.59
  1.63e+03 0.52 0.45 0.65 0.59
  1.67e+03 0.52 0.44 0.64 0.58
  1.71e+03 0.51 0.43 0.64 0.57
  1.76e+03 0.51 0.42 0.63 0.56
  1.8e+03  0.50 0.41 0.63 0.55
  1.84e+03 0.49 0.40 0.62 0.54
  1.88e+03 0.49 0.39 0.62 0.54
  1.92e+03 0.48 0.39 0.61 0.53
  1.96e+03 0.47 0.38 0.61 0.52
  2e+03    0.47 0.37 0.60 0.51
> 
>   ### newdata can take a list, and evaluates the survivor
>   ### function on the grid defined by newdata 
>   ### using a linear array model formulation and is 
>   ### extremely efficient (wrt computing time and memory)
>   ### d[1] (the response grid) varies fastest
>   ### => the first dimension of predict() is always the response,
>   ### not the dimension of the predictor variables (like one 
>   ### might expect)
>   predict(fm, newdata = d, type = "survivor")
, , horTh = no

          menostat
y           Pre Post
      0    1.00 1.00
    222    0.96 0.97
    444    0.86 0.88
    667    0.74 0.75
    889    0.65 0.65
  1.11e+03 0.60 0.58
  1.33e+03 0.56 0.52
  1.56e+03 0.53 0.47
  1.78e+03 0.50 0.42
  2e+03    0.47 0.37

, , horTh = yes

          menostat
y           Pre Post
      0    1.00 1.00
    222    0.97 0.98
    444    0.90 0.92
    667    0.82 0.82
    889    0.75 0.75
  1.11e+03 0.71 0.69
  1.33e+03 0.68 0.65
  1.56e+03 0.66 0.60
  1.78e+03 0.63 0.56
  2e+03    0.60 0.51

> 
>   ### owing to this structure, the result can be quickly stored in 
>   ### a data frame as follows
>   cd <- do.call("expand.grid", d)
>   cd$surv <- c(S <- predict(fm, newdata = d, type = "survivor"))
> 
>   ### works for distribution functions
>   all.equal(1 - S, predict(fm, newdata = d, type = "distribution"))
[1] TRUE
>   ### cumulative hazard functions
>   all.equal(-log(S), predict(fm, newdata = d, type = "cumhazard"))
[1] TRUE
>   ### log-cumulative hazard functions (= trafo, for Cox models)
>   all.equal(log(-log(S)), predict(fm, newdata = d, type = "logcumhazard"))
[1] TRUE
>   all.equal(log(-log(S)), predict(fm, newdata = d, type = "trafo"))
[1] TRUE
>   ### densities, hazards, or odds functions
>   predict(fm, newdata = d, type = "density")
, , horTh = no

          menostat
y              Pre    Post
      0    0.00000 0.00000
    222    0.00031 0.00025
    444    0.00057 0.00057
    667    0.00047 0.00054
    889    0.00029 0.00037
  1.11e+03 0.00019 0.00027
  1.33e+03 0.00015 0.00025
  1.56e+03 0.00014 0.00024
  1.78e+03 0.00014 0.00023
  2e+03    0.00021 0.00024

, , horTh = yes

          menostat
y              Pre    Post
      0    0.00000 0.00000
    222    0.00021 0.00017
    444    0.00040 0.00040
    667    0.00035 0.00040
    889    0.00023 0.00028
  1.11e+03 0.00015 0.00022
  1.33e+03 0.00012 0.00020
  1.56e+03 0.00011 0.00021
  1.78e+03 0.00012 0.00020
  2e+03    0.00018 0.00022

>   predict(fm, newdata = d, type = "hazard")
, , horTh = no

          menostat
y              Pre    Post
      0    0.00000 0.00000
    222    0.00032 0.00025
    444    0.00066 0.00065
    667    0.00064 0.00072
    889    0.00045 0.00056
  1.11e+03 0.00032 0.00046
  1.33e+03 0.00027 0.00047
  1.56e+03 0.00026 0.00051
  1.78e+03 0.00028 0.00054
  2e+03    0.00044 0.00065

, , horTh = yes

          menostat
y              Pre    Post
      0    0.00000 0.00000
    222    0.00022 0.00017
    444    0.00044 0.00044
    667    0.00043 0.00049
    889    0.00030 0.00038
  1.11e+03 0.00021 0.00031
  1.33e+03 0.00018 0.00031
  1.56e+03 0.00017 0.00034
  1.78e+03 0.00019 0.00036
  2e+03    0.00030 0.00044

>   predict(fm, newdata = d, type = "odds")
, , horTh = no

          menostat
y            Pre  Post
      0    0.000 0.000
    222    0.039 0.026
    444    0.164 0.137
    667    0.354 0.336
    889    0.529 0.543
  1.11e+03 0.661 0.725
  1.33e+03 0.770 0.911
  1.56e+03 0.877 1.131
  1.78e+03 0.991 1.396
  2e+03    1.148 1.727

, , horTh = yes

          menostat
y            Pre  Post
      0    0.000 0.000
    222    0.026 0.018
    444    0.107 0.090
    667    0.225 0.214
    889    0.329 0.337
  1.11e+03 0.405 0.442
  1.33e+03 0.467 0.544
  1.56e+03 0.526 0.661
  1.78e+03 0.587 0.797
  2e+03    0.670 0.960

>   ### and quantiles (10 and 20%)
>   predict(fm, newdata = d[-1], type = "quantile", prob = 1:2 / 10)
, , horTh = no

       menostat
prob    Pre Post
    0.1 369  407
    0.2 548  577

, , horTh = yes

       menostat
prob    Pre Post
    0.1 452  486
    0.2 714  728

> 
>   ### note that some quantiles are only defined as intervals
>   ### (> 2000, in this case). Intervals are returned as an "response" 
>   ### object, see ?R. Unfortunately, these can't be stored as array, so
>   ### a data.frame is returned where the quantile varies first
>   p <- c(list(prob = 1:9/10), d[-1])
>   np <- do.call("expand.grid", p)
>   (Q <- predict(fm, newdata = d[-1], type = "quantile", prob = 1:9 / 10))
 [1]  369         548         755        1123        1794        (2000, Inf]
 [7] (2000, Inf] (2000, Inf] (2000, Inf]  407         577         763       
[13] 1038        1429        1855        (2000, Inf] (2000, Inf] (2000, Inf]
[19]  452         714        1192        1993        (2000, Inf] (2000, Inf]
[25] (2000, Inf] (2000, Inf] (2000, Inf]  486         728        1082       
[31] 1566        (2000, Inf] (2000, Inf] (2000, Inf] (2000, Inf] (2000, Inf]
>   np$Q <- Q
>   np
   prob menostat horTh Q.tleft Q.cleft Q.exact Q.cright Q.tright Q.approxy
1   0.1      Pre    no      NA      NA     369       NA       NA       369
2   0.2      Pre    no      NA      NA     548       NA       NA       548
3   0.3      Pre    no      NA      NA     755       NA       NA       755
4   0.4      Pre    no      NA      NA    1123       NA       NA      1123
5   0.5      Pre    no      NA      NA    1794       NA       NA      1794
6   0.6      Pre    no      NA    2000      NA      Inf       NA      2000
7   0.7      Pre    no      NA    2000      NA      Inf       NA      2000
8   0.8      Pre    no      NA    2000      NA      Inf       NA      2000
9   0.9      Pre    no      NA    2000      NA      Inf       NA      2000
10  0.1     Post    no      NA      NA     407       NA       NA       407
11  0.2     Post    no      NA      NA     577       NA       NA       577
12  0.3     Post    no      NA      NA     763       NA       NA       763
13  0.4     Post    no      NA      NA    1038       NA       NA      1038
14  0.5     Post    no      NA      NA    1429       NA       NA      1429
15  0.6     Post    no      NA      NA    1855       NA       NA      1855
16  0.7     Post    no      NA    2000      NA      Inf       NA      2000
17  0.8     Post    no      NA    2000      NA      Inf       NA      2000
18  0.9     Post    no      NA    2000      NA      Inf       NA      2000
19  0.1      Pre   yes      NA      NA     452       NA       NA       452
20  0.2      Pre   yes      NA      NA     714       NA       NA       714
21  0.3      Pre   yes      NA      NA    1192       NA       NA      1192
22  0.4      Pre   yes      NA      NA    1993       NA       NA      1993
23  0.5      Pre   yes      NA    2000      NA      Inf       NA      2000
24  0.6      Pre   yes      NA    2000      NA      Inf       NA      2000
25  0.7      Pre   yes      NA    2000      NA      Inf       NA      2000
26  0.8      Pre   yes      NA    2000      NA      Inf       NA      2000
27  0.9      Pre   yes      NA    2000      NA      Inf       NA      2000
28  0.1     Post   yes      NA      NA     486       NA       NA       486
29  0.2     Post   yes      NA      NA     728       NA       NA       728
30  0.3     Post   yes      NA      NA    1082       NA       NA      1082
31  0.4     Post   yes      NA      NA    1566       NA       NA      1566
32  0.5     Post   yes      NA    2000      NA      Inf       NA      2000
33  0.6     Post   yes      NA    2000      NA      Inf       NA      2000
34  0.7     Post   yes      NA    2000      NA      Inf       NA      2000
35  0.8     Post   yes      NA    2000      NA      Inf       NA      2000
36  0.9     Post   yes      NA    2000      NA      Inf       NA      2000
> 
>   ### simulating from the model works by inverting the distribution 
>   ### function; some obs are right-censored at 2000
>   (s <- simulate(fm, newdata = nd, nsim = 3))
[[1]]
[1] 1778        (2000, Inf] (2000, Inf] 1469       

[[2]]
[1] (2000, Inf] (2000, Inf] 753         (2000, Inf]

[[3]]
[1]  417  697 1904  197

>   ### convert to Surv
>   sapply(s, as.Surv)
[[1]]
[1] 1778  2000+ 2000+ 1469 

[[2]]
[1] 2000+ 2000+  753  2000+

[[3]]
[1]  417  697 1904  197

> 
>   ### generate 3 parametric bootstrap samples from the model
>   tmp <- GBSG2[, c("menostat", "horTh")]
>   s <- simulate(fm, newdata = tmp, nsim = 3)
>   ### refit the model using the simulated response
>   lapply(s, function(y) {
+     tmp$y <- y
+     coef(mlt(m, data = tmp))
+   })
[[1]]
 Bs1(y):menostatPre  Bs2(y):menostatPre  Bs3(y):menostatPre  Bs4(y):menostatPre 
            -5.5019             -0.9038             -0.9038             -0.8911 
 Bs5(y):menostatPre  Bs6(y):menostatPre  Bs7(y):menostatPre Bs1(y):menostatPost 
            -0.5429             -0.5429             -0.2786             -5.4488 
Bs2(y):menostatPost Bs3(y):menostatPost Bs4(y):menostatPost Bs5(y):menostatPost 
            -0.8316             -0.8316             -0.8316             -0.2780 
Bs6(y):menostatPost Bs7(y):menostatPost            horThyes 
            -0.1823             -0.0091             -0.3266 

[[2]]
 Bs1(y):menostatPre  Bs2(y):menostatPre  Bs3(y):menostatPre  Bs4(y):menostatPre 
             -4.663              -0.673              -0.673              -0.576 
 Bs5(y):menostatPre  Bs6(y):menostatPre  Bs7(y):menostatPre Bs1(y):menostatPost 
             -0.427              -0.358              -0.196              -4.344 
Bs2(y):menostatPost Bs3(y):menostatPost Bs4(y):menostatPost Bs5(y):menostatPost 
             -0.881              -0.881              -0.571              -0.452 
Bs6(y):menostatPost Bs7(y):menostatPost            horThyes 
             -0.156              -0.054              -0.164 

[[3]]
 Bs1(y):menostatPre  Bs2(y):menostatPre  Bs3(y):menostatPre  Bs4(y):menostatPre 
             -4.151              -0.600              -0.600              -0.600 
 Bs5(y):menostatPre  Bs6(y):menostatPre  Bs7(y):menostatPre Bs1(y):menostatPost 
             -0.509              -0.217              -0.169              -4.662 
Bs2(y):menostatPost Bs3(y):menostatPost Bs4(y):menostatPost Bs5(y):menostatPost 
             -0.680              -0.680              -0.477              -0.237 
Bs6(y):menostatPost Bs7(y):menostatPost            horThyes 
             -0.077               0.027              -0.558 

> 
>   options(op)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:survival’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.416 0.044 2.46 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
