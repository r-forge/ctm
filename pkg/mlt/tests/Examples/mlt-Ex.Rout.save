
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "mlt"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('mlt')
Loading required package: basefun
Loading required package: variables
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("R")
> ### * R
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: R
> ### Title: Response Variable
> ### Aliases: R R.Surv R.factor R.ordered R.numeric R.integer R.list
> ###   R.response as.Surv as.Surv.response
> 
> ### ** Examples
> 
> 
>  ### ordered factor
>  R(gl(3, 3, labels = LETTERS[1:3]))
Warning in R.factor(gl(3, 3, labels = LETTERS[1:3])) :
  response is unordered factor;
             results may depend on order of levels
[1] (NA,  1] (NA,  1] (NA,  1] ( 1,  2] ( 1,  2] ( 1,  2] ( 2, NA] ( 2, NA]
[9] ( 2, NA]
> 
> 
> 
> 
> cleanEx()
> nameEx("mlt")
> ### * mlt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mlt
> ### Title: Most Likely Transformations
> ### Aliases: mlt
> 
> ### ** Examples
> 
>  
>   ### set-up conditional transformation model for conditional
>   ### distribution of dist given speed
>   dist <- numeric_var("dist", support = c(2.0, 100), bounds = c(0, Inf))
>   speed <- numeric_var("speed", support = c(5.0, 23), bounds = c(0, Inf)) 
>   ctmm <- ctm(response = Bernstein_basis(dist, order = 4, ui = "increasing"),
+               interacting = Bernstein_basis(speed, order = 3))
> 
>   ### fit model
>   (mltm <- mlt(ctmm, data = cars))

Call:
mlt(model = ctmm, data = cars)

Type:  continuous conditional transformation model (transformed normal distribution)
Log-Likelihood: -194.5644 (df = 20)

Coefficients: -1.185255 4.542524 7.151648 7.151648 7.189737 -2.674317 -0.4341441 -0.4341441 -0.4341439 -0.4340748 -6.501587 2.39635 2.39635 2.39635 5.387072 -10.38913 -1.79617 -1.796151 0.2505833 1.520949

> 
>   ### plot data
>   plot(cars)
>   ### predict quantiles and overlay data with model via a "quantile sheet"
>   q <- predict(mltm, newdata = data.frame(speed = 0:24), type = "quantile", 
+                p = 2:8 / 10, K = 500)
>   tmp <- apply(q, 1, function(x) lines(0:24, x, type = "l"))
> 
>   ### sample from model
>   print(simulate(mltm, seed = 2, nsim = 3, K = 1000), digits = 2)
[[1]]
 [1]  2.2        8.0       12.8        6.2       27.0       32.2      
 [7] 12.4       30.1       20.1       25.3       25.4       21.0      
[13] 35.6       19.4       25.1       45.5       70.8       23.4      
[19] 29.1       20.5       39.1       30.6       48.7       26.2      
[25] 32.3       36.4       28.7       35.3       78.3       30.6      
[31] 21.6       34.7       61.6       66.6       46.8       55.3      
[37] 68.1       42.5       61.8       41.1       90.4       47.0      
[43] 39.3       52.1       (100, Inf] 98.7       (100, Inf] 76.5      
[49] 83.0       (100, Inf]

[[2]]
 [1]  0.0093  0.0191 14.6546 21.6297 10.5696 24.9308 28.1975 50.5218 23.3006
[10] 29.7015 31.8283 43.3976 30.8220 21.5299 41.0937 28.9559 27.6771 29.5889
[19] 23.1879 20.0429 27.5103 28.4717 18.4993 27.3888 27.3456 47.1185 33.2656
[28] 59.7249 39.6835 45.5395 38.0412 53.3876 26.4686 42.8593 36.0623 69.0679
[37] 84.5995 43.8289 65.1406 48.6250 88.8001 50.7328 50.1021 68.8804 72.7348
[46] 69.3757 79.8318 62.5845 64.3285 90.2024

[[3]]
 [1]  2.4  5.0 26.4 17.8 10.8 19.4 33.7 19.8 12.9 15.0  9.6 34.6 24.3 29.4 38.9
[16] 42.7 47.2 19.6 60.4 35.9 18.1 26.6 77.7 58.0 29.2 47.2 41.9 33.8 50.8 37.6
[31] 33.4 72.5 26.2 80.5 40.0 57.1 51.4 66.0 42.6 50.8 42.3 46.6 60.0 58.4 71.9
[46] 94.1 90.6 74.9 82.0 82.7

> 
> 
> 
> 
> cleanEx()
> nameEx("mltoptim")
> ### * mltoptim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mltoptim
> ### Title: Control Optimisation
> ### Aliases: mltoptim
> ### Keywords: list
> 
> ### ** Examples
> 
> 
>   ### set-up linear transformation model for conditional
>   ### distribution of dist given speed
>   dist <- numeric_var("dist", support = c(2.0, 100), bounds = c(0, Inf))
>   ctmm <- ctm(response = Bernstein_basis(dist, order = 4, ui = "increasing"),
+               shifting = ~ speed, data = cars)
> 
>   ### use auglag with kkt2.check = TRUE => the numerically determined
>   ### hessian is returned as "optim_hessian" slot
>   op <- mltoptim(auglag = list(maxtry = 5, kkt2.check = TRUE))[1]
>   mltm <- mlt(ctmm, data = cars, scale = FALSE, optim = op)
> 
>   ### compare analytical and numerical hessian
>   all.equal(c(Hessian(mltm)), c(mltm$optim_hessian), tol = 1e-4)
[1] TRUE
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.217 0.036 1.253 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
