
R version 3.2.1 (2015-06-18) -- "World-Famous Astronaut"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> library("ltm")
Loading required package: mlt
Loading required package: basefun
> library("multcomp")
Loading required package: mvtnorm
Loading required package: survival
Loading required package: TH.data
> 
> coef(a <- ltm(Sepal.Length | Species ~ Sepal.Width, data = iris, trafo = "log"))
  Successful convergence.
Sepal.Width 
   6.437371 
> predict(a)
  [1] -22.53080 -19.31211 -20.59959 -19.95585 -23.17454 -25.10575 -21.88706
  [8] -21.88706 -18.66838 -19.95585 -23.81827 -21.88706 -19.31211 -19.31211
 [15] -25.74948 -28.32443 -25.10575 -22.53080 -24.46201 -24.46201 -21.88706
 [22] -23.81827 -23.17454 -21.24332 -21.88706 -19.31211 -21.88706 -22.53080
 [29] -21.88706 -20.59959 -19.95585 -21.88706 -26.39322 -27.03696 -19.95585
 [36] -20.59959 -22.53080 -23.17454 -19.31211 -21.88706 -22.53080 -14.80595
 [43] -20.59959 -22.53080 -24.46201 -19.31211 -24.46201 -20.59959 -23.81827
 [50] -21.24332 -20.59959 -20.59959 -19.95585 -14.80595 -18.02464 -18.02464
 [57] -21.24332 -15.44969 -18.66838 -17.38090 -12.87474 -19.31211 -14.16222
 [64] -18.66838 -18.66838 -19.95585 -19.31211 -17.38090 -14.16222 -16.09343
 [71] -20.59959 -18.02464 -16.09343 -18.02464 -18.66838 -19.31211 -18.02464
 [78] -19.31211 -18.66838 -16.73716 -15.44969 -15.44969 -17.38090 -17.38090
 [85] -19.31211 -21.88706 -19.95585 -14.80595 -19.31211 -16.09343 -16.73716
 [92] -19.31211 -16.73716 -14.80595 -17.38090 -19.31211 -18.66838 -18.66838
 [99] -16.09343 -18.02464 -21.24332 -17.38090 -19.31211 -18.66838 -19.31211
[106] -19.31211 -16.09343 -18.66838 -16.09343 -23.17454 -20.59959 -17.38090
[113] -19.31211 -16.09343 -18.02464 -20.59959 -19.31211 -24.46201 -16.73716
[120] -14.16222 -20.59959 -18.02464 -18.02464 -17.38090 -21.24332 -20.59959
[127] -18.02464 -19.31211 -18.02464 -19.31211 -18.02464 -24.46201 -18.02464
[134] -18.02464 -16.73716 -19.31211 -21.88706 -19.95585 -19.31211 -19.95585
[141] -19.95585 -19.95585 -17.38090 -20.59959 -21.24332 -19.31211 -16.09343
[148] -19.31211 -21.88706 -19.31211
> 
> library("survival")
> data("GBSG2", package = "TH.data")
> storage.mode(GBSG2$time) <- "double"
> 
> b <- ltm(time ~ horTh , data = GBSG2)
  Successful convergence.
> 
> predict(b)
  [1]  0.0000000 -0.4774833 -0.4774833 -0.4774833  0.0000000  0.0000000
  [7] -0.4774833  0.0000000  0.0000000  0.0000000 -0.4774833 -0.4774833
 [13] -0.4774833  0.0000000 -0.4774833  0.0000000  0.0000000 -0.4774833
 [19] -0.4774833  0.0000000  0.0000000  0.0000000  0.0000000 -0.4774833
 [25]  0.0000000  0.0000000 -0.4774833  0.0000000 -0.4774833  0.0000000
 [31]  0.0000000  0.0000000 -0.4774833  0.0000000  0.0000000 -0.4774833
 [37]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [43]  0.0000000 -0.4774833 -0.4774833  0.0000000  0.0000000 -0.4774833
 [49] -0.4774833  0.0000000 -0.4774833  0.0000000  0.0000000 -0.4774833
 [55]  0.0000000  0.0000000 -0.4774833 -0.4774833  0.0000000 -0.4774833
 [61] -0.4774833  0.0000000  0.0000000  0.0000000 -0.4774833  0.0000000
 [67]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [73] -0.4774833  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [79]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
 [85] -0.4774833 -0.4774833  0.0000000  0.0000000  0.0000000  0.0000000
 [91] -0.4774833  0.0000000 -0.4774833  0.0000000  0.0000000  0.0000000
 [97]  0.0000000  0.0000000 -0.4774833  0.0000000  0.0000000  0.0000000
[103]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
[109]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
[115] -0.4774833  0.0000000  0.0000000 -0.4774833  0.0000000  0.0000000
[121]  0.0000000  0.0000000  0.0000000  0.0000000 -0.4774833  0.0000000
[127] -0.4774833  0.0000000 -0.4774833 -0.4774833 -0.4774833  0.0000000
[133]  0.0000000  0.0000000 -0.4774833 -0.4774833 -0.4774833  0.0000000
[139]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000 -0.4774833
[145] -0.4774833 -0.4774833  0.0000000 -0.4774833  0.0000000  0.0000000
[151]  0.0000000  0.0000000 -0.4774833  0.0000000 -0.4774833  0.0000000
[157] -0.4774833  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
[163]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
[169]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
[175]  0.0000000  0.0000000 -0.4774833 -0.4774833  0.0000000 -0.4774833
[181] -0.4774833  0.0000000 -0.4774833 -0.4774833 -0.4774833 -0.4774833
[187]  0.0000000 -0.4774833  0.0000000  0.0000000 -0.4774833  0.0000000
[193]  0.0000000 -0.4774833  0.0000000 -0.4774833  0.0000000  0.0000000
[199]  0.0000000 -0.4774833  0.0000000  0.0000000 -0.4774833  0.0000000
[205]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
[211]  0.0000000  0.0000000 -0.4774833  0.0000000 -0.4774833  0.0000000
[217]  0.0000000 -0.4774833  0.0000000 -0.4774833 -0.4774833  0.0000000
[223] -0.4774833  0.0000000  0.0000000 -0.4774833 -0.4774833 -0.4774833
[229]  0.0000000  0.0000000  0.0000000  0.0000000 -0.4774833 -0.4774833
[235]  0.0000000 -0.4774833  0.0000000  0.0000000 -0.4774833  0.0000000
[241] -0.4774833 -0.4774833 -0.4774833  0.0000000 -0.4774833  0.0000000
[247]  0.0000000 -0.4774833  0.0000000 -0.4774833 -0.4774833  0.0000000
[253]  0.0000000 -0.4774833  0.0000000  0.0000000 -0.4774833 -0.4774833
[259] -0.4774833  0.0000000 -0.4774833 -0.4774833  0.0000000 -0.4774833
[265]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
[271]  0.0000000 -0.4774833 -0.4774833  0.0000000 -0.4774833 -0.4774833
[277] -0.4774833 -0.4774833  0.0000000  0.0000000 -0.4774833 -0.4774833
[283]  0.0000000 -0.4774833  0.0000000 -0.4774833 -0.4774833 -0.4774833
[289]  0.0000000  0.0000000 -0.4774833  0.0000000 -0.4774833  0.0000000
[295] -0.4774833  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
[301]  0.0000000 -0.4774833  0.0000000 -0.4774833  0.0000000  0.0000000
[307]  0.0000000 -0.4774833  0.0000000  0.0000000  0.0000000  0.0000000
[313]  0.0000000 -0.4774833  0.0000000 -0.4774833  0.0000000 -0.4774833
[319] -0.4774833  0.0000000  0.0000000  0.0000000 -0.4774833  0.0000000
[325]  0.0000000  0.0000000  0.0000000  0.0000000 -0.4774833 -0.4774833
[331]  0.0000000 -0.4774833 -0.4774833  0.0000000  0.0000000 -0.4774833
[337]  0.0000000 -0.4774833  0.0000000 -0.4774833  0.0000000  0.0000000
[343]  0.0000000 -0.4774833  0.0000000  0.0000000  0.0000000 -0.4774833
[349]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000 -0.4774833
[355]  0.0000000  0.0000000 -0.4774833 -0.4774833  0.0000000  0.0000000
[361]  0.0000000 -0.4774833  0.0000000  0.0000000 -0.4774833  0.0000000
[367]  0.0000000 -0.4774833 -0.4774833 -0.4774833  0.0000000  0.0000000
[373]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
[379]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
[385] -0.4774833  0.0000000 -0.4774833 -0.4774833  0.0000000 -0.4774833
[391] -0.4774833  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
[397]  0.0000000 -0.4774833  0.0000000  0.0000000  0.0000000  0.0000000
[403]  0.0000000 -0.4774833 -0.4774833  0.0000000  0.0000000 -0.4774833
[409]  0.0000000  0.0000000  0.0000000  0.0000000 -0.4774833 -0.4774833
[415] -0.4774833 -0.4774833  0.0000000 -0.4774833 -0.4774833  0.0000000
[421] -0.4774833  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
[427]  0.0000000  0.0000000 -0.4774833 -0.4774833 -0.4774833  0.0000000
[433]  0.0000000  0.0000000  0.0000000 -0.4774833 -0.4774833  0.0000000
[439]  0.0000000 -0.4774833  0.0000000  0.0000000  0.0000000  0.0000000
[445]  0.0000000 -0.4774833  0.0000000  0.0000000  0.0000000 -0.4774833
[451]  0.0000000  0.0000000 -0.4774833 -0.4774833 -0.4774833  0.0000000
[457]  0.0000000  0.0000000 -0.4774833 -0.4774833 -0.4774833 -0.4774833
[463]  0.0000000  0.0000000  0.0000000 -0.4774833 -0.4774833 -0.4774833
[469] -0.4774833 -0.4774833  0.0000000  0.0000000  0.0000000  0.0000000
[475] -0.4774833 -0.4774833 -0.4774833 -0.4774833 -0.4774833  0.0000000
[481] -0.4774833  0.0000000 -0.4774833 -0.4774833  0.0000000  0.0000000
[487] -0.4774833  0.0000000 -0.4774833  0.0000000 -0.4774833 -0.4774833
[493] -0.4774833  0.0000000 -0.4774833 -0.4774833  0.0000000  0.0000000
[499]  0.0000000 -0.4774833  0.0000000 -0.4774833 -0.4774833 -0.4774833
[505]  0.0000000  0.0000000  0.0000000 -0.4774833  0.0000000 -0.4774833
[511]  0.0000000  0.0000000  0.0000000 -0.4774833  0.0000000  0.0000000
[517]  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
[523] -0.4774833 -0.4774833  0.0000000 -0.4774833  0.0000000  0.0000000
[529] -0.4774833  0.0000000  0.0000000 -0.4774833  0.0000000  0.0000000
[535]  0.0000000 -0.4774833  0.0000000 -0.4774833 -0.4774833  0.0000000
[541]  0.0000000  0.0000000  0.0000000 -0.4774833  0.0000000  0.0000000
[547]  0.0000000 -0.4774833  0.0000000 -0.4774833  0.0000000 -0.4774833
[553] -0.4774833  0.0000000  0.0000000  0.0000000  0.0000000  0.0000000
[559]  0.0000000 -0.4774833  0.0000000 -0.4774833  0.0000000 -0.4774833
[565]  0.0000000  0.0000000  0.0000000 -0.4774833  0.0000000  0.0000000
[571] -0.4774833  0.0000000  0.0000000 -0.4774833  0.0000000  0.0000000
[577]  0.0000000  0.0000000  0.0000000  0.0000000 -0.4774833 -0.4774833
[583]  0.0000000  0.0000000 -0.4774833  0.0000000  0.0000000 -0.4774833
[589]  0.0000000 -0.4774833  0.0000000  0.0000000  0.0000000  0.0000000
[595]  0.0000000  0.0000000 -0.4774833 -0.4774833 -0.4774833  0.0000000
[601]  0.0000000  0.0000000 -0.4774833  0.0000000  0.0000000  0.0000000
[607]  0.0000000 -0.4774833  0.0000000  0.0000000 -0.4774833  0.0000000
[613]  0.0000000 -0.4774833 -0.4774833  0.0000000 -0.4774833  0.0000000
[619]  0.0000000 -0.4774833  0.0000000  0.0000000  0.0000000  0.0000000
[625]  0.0000000  0.0000000 -0.4774833  0.0000000 -0.4774833 -0.4774833
[631]  0.0000000  0.0000000  0.0000000  0.0000000 -0.4774833 -0.4774833
[637]  0.0000000  0.0000000  0.0000000  0.0000000 -0.4774833 -0.4774833
[643] -0.4774833 -0.4774833  0.0000000  0.0000000 -0.4774833  0.0000000
[649] -0.4774833  0.0000000  0.0000000  0.0000000 -0.4774833 -0.4774833
[655]  0.0000000 -0.4774833 -0.4774833  0.0000000  0.0000000  0.0000000
[661]  0.0000000 -0.4774833  0.0000000  0.0000000 -0.4774833  0.0000000
[667]  0.0000000  0.0000000  0.0000000 -0.4774833 -0.4774833  0.0000000
[673]  0.0000000  0.0000000 -0.4774833  0.0000000 -0.4774833  0.0000000
[679] -0.4774833  0.0000000 -0.4774833  0.0000000 -0.4774833  0.0000000
[685]  0.0000000  0.0000000
> 
> predict(b, newdata = data.frame(horTh = unique(GBSG2$horTh)), q = 100:110, type = "trafo")
       
time         [,1]      [,2]
    100 -3.714037 -4.191520
    101 -3.705573 -4.183056
    102 -3.697108 -4.174591
    103 -3.688644 -4.166127
    104 -3.680179 -4.157663
    105 -3.671715 -4.149198
    106 -3.663250 -4.140734
    107 -3.654786 -4.132269
    108 -3.646321 -4.123805
    109 -3.637857 -4.115340
    110 -3.629393 -4.106876
Warning messages:
1: In model.matrix.Bernstein_basis(object, data = data) :
  more than 50% of observations outside interval
2: In model.matrix.Bernstein_basis(object = object, data = newdata,  :
  more than 50% of observations outside interval
> 
> b <- ltm(time ~ 1, data = GBSG2)
  Successful convergence.
> 
> predict(b, q = 100:110, type = "distribution")
         1          2          3          4          5          6          7 
0.02071450 0.02088609 0.02105907 0.02123345 0.02140924 0.02158646 0.02176512 
         8          9         10         11 
0.02194521 0.02212677 0.02230979 0.02249429 
Warning message:
In model.matrix.Bernstein_basis(object = object, data = newdata,  :
  more than 50% of observations outside interval
> 
> b <- ltm(time | tgrade ~ 1, data = GBSG2)
Note: method with signature 'dsparseMatrix#dsparseMatrix' chosen for function 'kronecker',
 target signature 'dgTMatrix#dgCMatrix'.
 "TsparseMatrix#sparseMatrix" would also be valid
  Successful convergence.
> 
> predict(b, newdata = data.frame(tgrade = unique(GBSG2$tgrade)), q = 100:110, type = "distribution")
       
time          [,1]       [,2]       [,3]
    100 0.01796445 0.03257618 0.01283974
    101 0.01811657 0.03284514 0.01292950
    102 0.01826996 0.03311625 0.01301988
    103 0.01842462 0.03338952 0.01311088
    104 0.01858057 0.03366497 0.01320251
    105 0.01873781 0.03394261 0.01329478
    106 0.01889636 0.03422246 0.01338767
    107 0.01905622 0.03450453 0.01348121
    108 0.01921741 0.03478884 0.01357540
    109 0.01937993 0.03507542 0.01367023
    110 0.01954380 0.03536426 0.01376572
Warning message:
In model.matrix.Bernstein_basis(object = function (data, deriv = 0L,  :
  more than 50% of observations outside interval
> 
> cc <- ltm(Surv(time, cens) | tgrade ~ horTh + menostat + pnodes, data = GBSG2, method = "cloglog")
  Successful convergence.
> 
> predict(cc, newdata = expand.grid(horTh = c("no", "yes"), menostat = "Pre",
+                            pnodes = 100, tgrade = "II"), q = 100:101, type = "trafo")
                
Surv(time, cens)      [,1]      [,2]
             100 0.7942022 0.4093944
             101 0.8026479 0.4178401
Warning messages:
1: In model.matrix.Bernstein_basis(object, data = data) :
  more than 50% of observations outside interval
2: In model.matrix.Bernstein_basis(object = function (data, deriv = 0L,  :
  more than 50% of observations outside interval
> 
> d <- ltm(Surv(time, cens) ~ 1, data = GBSG2, method = "cloglog")
  Successful convergence.
> 
> confint(d, calpha = univariate_calpha())
           q    Estimate        lwr         upr
1   114.7500 -4.05673148 -4.5205712 -3.59289174
2   233.5526 -3.23858608 -3.5504653 -2.92670689
3   352.3553 -2.58324501 -2.8235699 -2.34292009
4   471.1579 -2.06471051 -2.2671740 -1.86224698
5   589.9605 -1.65964825 -1.8348013 -1.48449517
6   708.7632 -1.34726159 -1.5011321 -1.19339112
7   827.5658 -1.10916586 -1.2488172 -0.96951456
8   946.3684 -0.92926265 -1.0613081 -0.79721721
9  1065.1711 -0.79361407 -0.9220657 -0.66516239
10 1183.9737 -0.69031704 -0.8167035 -0.56393059
11 1302.7763 -0.60937757 -0.7341852 -0.48456990
12 1421.5789 -0.54258504 -0.6662671 -0.41890298
13 1540.3816 -0.48338645 -0.6064352 -0.36033770
14 1659.1842 -0.42676074 -0.5494775 -0.30404401
15 1777.9868 -0.36909303 -0.4919008 -0.24628526
16 1896.7895 -0.30804894 -0.4324193 -0.18367860
17 2015.5921 -0.24244882 -0.3713772 -0.11352045
18 2134.3947 -0.17214206 -0.3091310 -0.03515315
19 2253.1974 -0.09788137 -0.2465592  0.05079644
20 2372.0000 -0.02119702 -0.1933691  0.15097503
> 
> class(d) <- class(d)[-(1:2)]
> cf <- coef(d)
> v <- vcov(d)
> 
> 
> prm <- parm(cf, v)
> K <- diag(length(cf))
> rownames(K) <- colnames(K) <- names(cf)
> ci <- confint(glht(prm, linfct = K), calpha = qnorm(.975))
> 
> lwr <- d
> class(lwr) <- class(lwr)[-(1:2)]
> upr <- d
> class(upr) <- class(upr)[-(1:2)]
> coef(lwr) <- ci$confint[, "lwr"]
> coef(upr) <- ci$confint[, "upr"]
> 
> tm <- 10:2700
> 
> s <- seq(from = min(GBSG2$time), to = max(GBSG2$time), length = length(cf))
> plot(tm, predict(d, q = tm), type = "l", ylim = range(ci$confint))
> points(s, cf, col = "red")
> 
> lines(tm, predict(lwr, q = tm))
> points(s, coef(lwr), col = "blue")
> 
> lines(tm, predict(upr, q = tm))
> points(s, coef(upr), col = "green")
> 
> plot(tm, 1 - predict(d, q = tm, type = "distr"), type = "l")
> 
> lines(tm, 1 - predict(lwr, q = tm, type = "distr"))
> 
> lines(tm, 1 - predict(upr, q = tm, type = "distr"))
> 
> 
> 
> plot(survfit(Surv(time, cens) ~ 1, data = GBSG2))
> lines(tm, 1 - predict(d, q = tm, type = "distr"))
> lines(tm, 1 - predict(lwr, q = tm, type = "distr"))
> lines(tm, 1 - predict(upr, q = tm, type = "distr"))
> 
> 
> proc.time()
   user  system elapsed 
  2.890   0.063   2.946 
