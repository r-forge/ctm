
R version 4.4.1 (2024-06-14) -- "Race for Your Life"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ### UNDERNUTRITION DATA DEMO
> library("tram") 
Loading required package: mlt
Loading required package: basefun
Loading required package: variables
Loading required package: mvtnorm
> library("mvtnorm")
> library("colorspace")
> library("latex2exp")
> 
> set.seed(42)
> par(ask = TRUE)
> 
> ### NOTE: simulated dataset. This is NOT the original
> ### undernutrition data. The original data can be obtained from
> ### https://dhsprogram.com/data/dataset/India_Standard-DHS_1999.cfm?flag=0
> ### for registered users.
> ### Preprocessing was performed as implemented in
> ###   system.file("india_preproc.R", package = "mboost")
> ### 
> load(system.file("undernutrition.RData", package = "tram"))
> summary(dat)
      cage         stunting2          wasting2        underweight2    
 Min.   : 0.00   Min.   :-5.9866   Min.   :-4.9484   Min.   :-5.9563  
 1st Qu.: 8.00   1st Qu.:-2.5486   1st Qu.:-1.3299   1st Qu.:-2.1930  
 Median :17.00   Median :-1.3565   Median :-0.4794   Median :-1.2670  
 Mean   :17.25   Mean   :-1.3029   Mean   :-0.4750   Mean   :-1.2014  
 3rd Qu.:26.00   3rd Qu.:-0.1397   3rd Qu.: 0.3527   3rd Qu.:-0.2905  
 Max.   :35.00   Max.   : 5.5964   Max.   : 5.3594   Max.   : 5.9876  
> cageseq <- sort(unique(dat$cage))
> 
> ################## MODELS ##################
> 
> ### marginal models with linear shift in age
> # m_stunting <- as.mlt(BoxCox(stunting2 ~ cage, data = dat, extrapolate = TRUE))
> # m_wasting <- as.mlt(BoxCox(wasting2 ~ cage, data = dat, extrapolate = TRUE))
> # m_underweight <- as.mlt(BoxCox(underweight2 ~ cage, data = dat, extrapolate = TRUE))
> 
> ## marginal models with response-varying age effect
> m_stunting <- as.mlt(BoxCox(stunting2 | cage ~ 1, data = dat, 
+                             support = c(-4, 4), add = c(-2, 2)))
Warning messages:
1: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
2: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
3: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
4: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
5: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
> m_wasting <- as.mlt(BoxCox(wasting2 | cage ~ 1, data = dat, 
+                            support = c(-4, 4), add = c(-2, 2)))
Warning messages:
1: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
2: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
3: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
4: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
5: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
> m_underweight <- as.mlt(BoxCox(underweight2 | cage ~ 1, data = dat, 
+                                support = c(-4, 4), add = c(-2, 2)))
Warning messages:
1: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
2: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
3: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
4: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
5: In model.matrix.box_bases(object = list(iresponse = function (data,  :
  use scale = TRUE in as.basis.formula with sumcontr = TRUE
> 
> ### parametrization for correlation coefficients
> Bxlambda <- Bernstein_basis(numeric_var("cage", support = quantile(dat$cage, prob = c(.1, .9)),
+                                         bounds = c(0, 100)), order = 6, extrapolate = TRUE)
> 
> op <- mltoptim(auglag = list(maxtry = 5), trace = FALSE)
> 
> theta <- c(coef(m_stunting), coef(m_wasting), coef(m_underweight), rep(0, 7 * 3 * 2 / 2))
> 
> ### fitting joint model
> m_full <- Mmlt(m_stunting, m_wasting, m_underweight, 
+                conditional = TRUE, ### as in SJS paper
+                theta = theta,      ### use simple starting values
+                formula = Bxlambda, data = dat, optim = op["nloptr"])
Warning messages:
1: In .mmlt_setup(models = models, formula = formula, dofit = dofit,  :
  Conditional models with covariate-dependent correlations are order-dependent
2: In optim[[i]](theta = start, f = function(par) f(par, scl = scl),  :
  NLOPT_MAXEVAL_REACHED: Optimization stopped because maxeval (above) was reached.
> 
> ### refit model to obtain Hessian
> m_full <- Mmlt(m_stunting, m_wasting, m_underweight, 
+                conditional = TRUE,        ### as in SJS paper
+                theta = coef(m_full),      ### use nice starting values
+                formula = Bxlambda, data = dat, optim = op)
Warning message:
In .mmlt_setup(models = models, formula = formula, dofit = dofit,  :
  Conditional models with covariate-dependent correlations are order-dependent
> 
> logLik(m_full)
'log Lik.' -69775.8 (df=63)
> coef(m_full)
      stunting2.Bs1(stunting2):(Intercept) 
                              -2.488319216 
      stunting2.Bs2(stunting2):(Intercept) 
                              -1.331689677 
      stunting2.Bs3(stunting2):(Intercept) 
                              -0.674441784 
      stunting2.Bs4(stunting2):(Intercept) 
                               0.252483610 
      stunting2.Bs5(stunting2):(Intercept) 
                               1.212445485 
      stunting2.Bs6(stunting2):(Intercept) 
                               1.735195693 
      stunting2.Bs7(stunting2):(Intercept) 
                               2.369240698 
             stunting2.Bs1(stunting2):cage 
                               0.043714996 
             stunting2.Bs2(stunting2):cage 
                               0.036209857 
             stunting2.Bs3(stunting2):cage 
                               0.036408682 
             stunting2.Bs4(stunting2):cage 
                               0.038520739 
             stunting2.Bs5(stunting2):cage 
                               0.021824209 
             stunting2.Bs6(stunting2):cage 
                               0.024649905 
             stunting2.Bs7(stunting2):cage 
                               0.028314494 
        wasting2.Bs1(wasting2):(Intercept) 
                              -3.105322782 
        wasting2.Bs2(wasting2):(Intercept) 
                              -1.703596047 
        wasting2.Bs3(wasting2):(Intercept) 
                              -0.786873583 
        wasting2.Bs4(wasting2):(Intercept) 
                               0.198331680 
        wasting2.Bs5(wasting2):(Intercept) 
                               1.124344700 
        wasting2.Bs6(wasting2):(Intercept) 
                               2.007130102 
        wasting2.Bs7(wasting2):(Intercept) 
                               2.631654953 
               wasting2.Bs1(wasting2):cage 
                               0.004069735 
               wasting2.Bs2(wasting2):cage 
                              -0.001412412 
               wasting2.Bs3(wasting2):cage 
                               0.014703526 
               wasting2.Bs4(wasting2):cage 
                              -0.005448879 
               wasting2.Bs5(wasting2):cage 
                               0.036505601 
               wasting2.Bs6(wasting2):cage 
                               0.031264957 
               wasting2.Bs7(wasting2):cage 
                               0.050971612 
underweight2.Bs1(underweight2):(Intercept) 
                             -29.834747725 
underweight2.Bs2(underweight2):(Intercept) 
                             -16.189870189 
underweight2.Bs3(underweight2):(Intercept) 
                              -9.010769017 
underweight2.Bs4(underweight2):(Intercept) 
                               8.921519842 
underweight2.Bs5(underweight2):(Intercept) 
                              11.545255392 
underweight2.Bs6(underweight2):(Intercept) 
                              19.635322083 
underweight2.Bs7(underweight2):(Intercept) 
                              25.675876505 
       underweight2.Bs1(underweight2):cage 
                               0.337430027 
       underweight2.Bs2(underweight2):cage 
                               0.283100262 
       underweight2.Bs3(underweight2):cage 
                               0.524152383 
       underweight2.Bs4(underweight2):cage 
                               0.102068769 
       underweight2.Bs5(underweight2):cage 
                               0.524591404 
       underweight2.Bs6(underweight2):cage 
                               0.573029821 
       underweight2.Bs7(underweight2):cage 
                               0.735170378 
              wasting2.stunting2.Bs1(cage) 
                               0.393348635 
              wasting2.stunting2.Bs2(cage) 
                               0.372304628 
              wasting2.stunting2.Bs3(cage) 
                              -0.527912207 
              wasting2.stunting2.Bs4(cage) 
                               0.224864201 
              wasting2.stunting2.Bs5(cage) 
                              -0.425458970 
              wasting2.stunting2.Bs6(cage) 
                               0.165771478 
              wasting2.stunting2.Bs7(cage) 
                               0.071978347 
          underweight2.stunting2.Bs1(cage) 
                              -9.481890030 
          underweight2.stunting2.Bs2(cage) 
                              -9.622346787 
          underweight2.stunting2.Bs3(cage) 
                             -14.034655900 
          underweight2.stunting2.Bs4(cage) 
                               0.258793354 
          underweight2.stunting2.Bs5(cage) 
                              -9.369361359 
          underweight2.stunting2.Bs6(cage) 
                              -7.926438751 
          underweight2.stunting2.Bs7(cage) 
                              -7.723295602 
           underweight2.wasting2.Bs1(cage) 
                              -7.503906449 
           underweight2.wasting2.Bs2(cage) 
                              -6.991701350 
           underweight2.wasting2.Bs3(cage) 
                             -16.582079210 
           underweight2.wasting2.Bs4(cage) 
                               4.748152231 
           underweight2.wasting2.Bs5(cage) 
                             -10.872111653 
           underweight2.wasting2.Bs6(cage) 
                              -9.178259189 
           underweight2.wasting2.Bs7(cage) 
                              -8.098637957 
> 
> ### FAST ALTERNATIVE TO PARAMETRIC BOOTSTRAP
> ### sampling nsamp values from the asymptotic (normal) distribution of the parameters
> nsamp <- 1000
> V <- vcov(m_full)
> V <- (V + t(V)) / 2
> P <- rmvnorm(nsamp, mean = coef(m_full), sigma = V)
> m_tmp <- m_full
> CR <- vector(mode = "list", length = nrow(P))
> 
> nd <- data.frame(cage = cageseq)
> ptm_npb <- system.time(
+   for (i in 1:nsamp) {
+     cf <- P[i, ]
+     m_tmp$par <- cf
+     CR[[i]] <- coef(m_tmp, newdata = nd, type = "Corr")
+   }
+ )
> 
> 
> ### save estimated corr coef here
> r12s <- r13s <- r23s <- matrix(NA, nrow = length(cageseq), ncol = nsamp) 
> for(l in 1:nsamp) {
+   r12s[, l] <- Lower_tri(CR[[l]])[1,]
+   r13s[, l] <- Lower_tri(CR[[l]])[2,]
+   r23s[, l] <- Lower_tri(CR[[l]])[3,]
+ }
> ### save Spearman rhos here
> rs12s <- 6*(asin(0.5*r12s))/pi
> rs13s <- 6*(asin(0.5*r13s))/pi
> rs23s <- 6*(asin(0.5*r23s))/pi
> ### estimated Spearman rhos
> Cor_m_full <- coef(m_full, newdata = nd, type = "Spear")
> rs12est <- Lower_tri(Cor_m_full)[1,]
> rs13est <- Lower_tri(Cor_m_full)[2,]
> rs23est <- Lower_tri(Cor_m_full)[3,]
> 
> ################## PLOTS ##################
> ### only choose 1, 3, 6, 9, 12, 24 months
> nd <- data.frame(cage = as.double(c(1, 3, 6, 9, 12, 24)))
> 
> ### grids for distribution and density evaluation
> q_stunting <- mkgrid(m_stunting, n = 100)[[1]]
> q_wasting <- mkgrid(m_wasting, n = 100)[[1]]
> q_underweight <- mkgrid(m_underweight, n = 100)[[1]]
> 
> ### MARGINAL DISTRIBUTIONS
> par(mfrow = c(1, 3), mar = c(5.5, 6.5, 3.5, 1.5) - 1)
> d_stunting <- predict(m_full, newdata = nd, margin = 1, 
+                       type = "distribution", q = q_stunting)
> col <- diverging_hcl(7, "Berlin")[-4]
> plot(q_stunting, d_stunting[, 1], type = "n", ylim = c(0, 1), xlim = c(-5, 5),
+      cex.lab = 2.5, cex.axis = 2,  panel.first = grid(),
+      xlab = expression(paste(y[stunting], sep = "")),
+      ylab = expression(paste("F(", y[stunting], "|age)", sep = "")))
> for(i in 1:nrow(nd)) {
+   lines(q_stunting, d_stunting[, i], col = col[i], lwd = 2)
+ }
> 
> d_wasting <- predict(m_full, newdata = nd, margin = 2, 
+                      type = "distribution", q = q_wasting)
> plot(q_wasting, d_wasting[, 1], type = "n", ylim = c(0, 1), xlim = c(-5, 5),
+      cex.lab = 2.5, cex.axis = 2,  panel.first = grid(),
+      xlab = expression(paste(y[wasting], sep = "")),
+      ylab = expression(paste("F(", y[wasting], "|age)", sep = "")))
> for(i in 1:nrow(nd)) {
+   lines(q_wasting, d_wasting[, i], col = col[i], lwd = 2)
+ }
> 
> d_underweight <- predict(m_full, newdata = nd, margin = 3, 
+                          type = "distribution", q = q_underweight)
> plot(q_underweight, d_underweight[, 1], type = "n", ylim = c(0, 1), xlim = c(-5, 5),
+      cex.lab = 2.5, cex.axis = 2,  panel.first = grid(),
+      xlab = expression(paste(y[underweight], sep = "")),
+      ylab = expression(paste("F(", y[underweight], "|age)", sep = "")))
> 
> for(i in 1:nrow(nd)) {
+   lines(q_underweight, d_underweight[, i], col = col[i], lwd = 2)
+ }
> legend("bottomright", legend = c(1, 3, 6, 9, 12, 24), title = "cage month", 
+        col = col, bty = "n", lwd = 2, seg.len = .9, cex = 1.5)
> 
> ### MARGINAL DENSITIES
> par(mfrow = c(1, 3), mar = c(5.5, 6.5, 3.5, 1.5) - 1)
> de_stunting <- predict(m_full, newdata = nd, margin = 1, 
+                        type = "density", q = q_stunting)
> plot(q_stunting, de_stunting[, 1], type = "n", ylim = c(0, .4), xlim = c(-5, 5),
+      cex.lab = 2.5, cex.axis = 2,  panel.first = grid(),
+      xlab = expression(paste(y[stunting], sep = "")),
+      ylab = expression(paste("f(", y[stunting], "|age)", sep = "")))
> for(i in 1:nrow(nd)) {
+   lines(q_stunting, de_stunting[, i], col = col[i], lwd = 2)
+ }
> 
> de_wasting <- predict(m_full, newdata = nd, margin = 2, 
+                       type = "density", q = q_wasting)
> plot(q_wasting, de_wasting[, 1], type = "n", ylim = c(0, .4), xlim = c(-5, 5),
+      cex.lab = 2.5, cex.axis = 2,  panel.first = grid(),
+      xlab = expression(paste(y[wasting], sep = "")),
+      ylab = expression(paste("f(", y[wasting], "|age)", sep = "")))
> for(i in 1:nrow(nd)) {
+   lines(q_wasting, de_wasting[, i], col = col[i], lwd = 2)
+ }
> 
> de_underweight <- predict(m_full, newdata = nd, margin = 3, 
+                           type = "density", q = q_underweight)
> plot(q_underweight, de_underweight[, 1], type = "n", ylim = c(0, 0.4), xlim = c(-5, 5),
+      cex.lab = 2.5, cex.axis = 2,  panel.first = grid(),
+      xlab = expression(paste(y[underweight], sep = "")),
+      ylab = expression(paste("f(", y[underweight], "|age)", sep = "")))
> for(i in 1:nrow(nd)) {
+   lines(q_underweight, de_underweight[, i], col = col[i], lwd = 2)
+ }
> legend("topright", legend = c(1, 3, 6, 9, 12, 24), title = "cage month", 
+        col = col, bty = "n", lwd = 2, seg.len = .9, cex = 1.5)
> 
> ### correlation coefficients from NONPARAMETRIC BOOTSTRAP
> par(mfrow = c(1, 3), mar = c(5.5, 7.9, 3.5, 1.5) - 1)
> plot(cageseq, apply(rs12s, MARGIN = 1, FUN = "mean"), type = "l", lwd = 2, 
+      xlab = "age",
+      ylab = TeX('$\\rho_{stunting,wasting}^S(age)$'),
+      cex.axis = 2.5, cex.lab = 2, cex.main = 2,
+      ylim = c(-0.4, 0.15),
+      panel.first = grid())
> lines(cageseq, apply(rs12s, MARGIN = 1, FUN = function(x){quantile(x, prob = 0.025)}),
+       lty = 2, lwd = 2)	
> lines(cageseq, apply(rs12s, MARGIN = 1, FUN = function(x){quantile(x, prob = 0.975)}),
+       lty = 2, lwd = 2)
> # estimated Spearman coef from m_full
> lines(cageseq, rs12est, lty = 2, lwd = 2, col = "red")
> 
> plot(cageseq, apply(rs13s, MARGIN = 1, FUN = "mean"), type = "l", lwd = 2, 
+      xlab = "age",
+      ylab = TeX('$\\rho_{stunting,underweight}^S(age)$'),
+      cex.axis = 2.5, cex.lab = 2, cex.main = 2,
+      ylim = c(0.45, 1.0),
+      panel.first = grid())	
> lines(cageseq, apply(rs13s, MARGIN = 1, FUN = function(x){quantile(x, prob = 0.025)}),
+       lty = 2, lwd = 2)	
> lines(cageseq, apply(rs13s, MARGIN = 1, FUN = function(x){quantile(x, prob = 0.975)}),
+       lty = 2, lwd = 2)	
> lines(cageseq, rs13est, lty = 2, lwd = 2, col = "red")
> 
> plot(cageseq, apply(rs23s, MARGIN = 1, FUN = "mean"), type = "l", lwd = 2, 
+      xlab = "age",
+      ylab = TeX('$\\rho_{wasting,underweight}^S(age)$'),
+      cex.axis = 2.5, cex.lab = 2, cex.main = 2,
+      ylim = c(0.4, 0.95),
+      panel.first = grid())
> lines(cageseq, apply(rs23s, MARGIN = 1, FUN = function(x){quantile(x, prob = 0.025)}),
+       lty = 2, lwd = 2)	
> lines(cageseq, apply(rs23s, MARGIN = 1, FUN = function(x){quantile(x, prob = 0.975)}),
+       lty = 2, lwd = 2)	
> lines(cageseq, rs23est, lty = 2, lwd = 2, col = "red")
> legend("topleft", legend = c("95% CI", "mean", "ML estimate"), 
+        col = c("black", "black", "red"), lty = c(2, 1, 2),
+        bty = "n", lwd = c(2, 2, 2), cex = 1.5)
> 
> ### warnings can be safely ignored
> 
> sessionInfo()
R version 4.4.1 (2024-06-14)
Platform: x86_64-pc-linux-gnu
Running under: Debian GNU/Linux 12 (bookworm)

Matrix products: default
BLAS:   /usr/local/lib/R/lib/libRblas.so 
LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.11.0

locale:
 [1] LC_CTYPE=en_GB.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_GB.UTF-8        LC_COLLATE=en_GB.UTF-8    
 [5] LC_MONETARY=en_GB.UTF-8    LC_MESSAGES=en_GB.UTF-8   
 [7] LC_PAPER=en_GB.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_GB.UTF-8 LC_IDENTIFICATION=C       

time zone: Europe/Berlin
tzcode source: system (glibc)

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] latex2exp_0.9.6  colorspace_2.1-1 tram_1.1-0       mvtnorm_1.3-1   
[5] mlt_1.6-0        basefun_1.2-0    variables_1.1-1 

loaded via a namespace (and not attached):
 [1] vctrs_0.6.5          cli_3.6.3            rlang_1.1.4         
 [4] TH.data_1.1-2        Formula_1.2-5        stringi_1.8.4       
 [7] BB_2019.10-1         glue_1.7.0           zoo_1.8-12          
[10] quadprog_1.5-8       grid_4.4.1           MASS_7.3-60.2       
[13] lifecycle_1.0.4      numDeriv_2016.8-1.1  stringr_1.5.1       
[16] compiler_4.4.1       multcomp_1.4-26      codetools_0.2-20    
[19] sandwich_3.1-0       Rcpp_1.0.13          alabama_2023.1.0    
[22] lattice_0.22-6       nloptr_2.1.1         polynom_1.4-1       
[25] splines_4.4.1        magrittr_2.0.3       coneproj_1.19       
[28] Matrix_1.7-0         tools_4.4.1          orthopolynom_1.0-6.1
[31] survival_3.7-0      
> 
> proc.time()
   user  system elapsed 
110.599   2.273 112.990 
