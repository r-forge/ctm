
R version 4.5.0 (2025-04-11) -- "How About a Twenty-Six"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> ###
> ### Fit models for HCC data presented in
> ### 
> ###	On Nonparanormal Likelihoods
> ###	by Torsten Hothorn, UZH
> ###
> 
> set.seed(290875)
> 
> pkgs <- c("openxlsx", "tram", "survival")
> 
> ip <- rownames(installed.packages())
> if (any(!pkgs %in% ip))
+     install.packages(pkgs[!pkgs %in% ip], repos = "https://stat.ethz.ch/CRAN/")
> 
> OK <- sapply(pkgs, require, character.only = TRUE)
Loading required package: openxlsx
Loading required package: tram
Loading required package: mlt
Loading required package: basefun
Loading required package: variables
Loading required package: mvtnorm
Loading required package: survival
> if (!all(OK)) 
+     stop("package(s) ", paste(pkgs[!OK], collapse = ", "), " not available")
> 
> ### Load data
> dat <- read.xlsx("https://datadryad.org/api/v2/files/44697/download", sheet = 1)
> HCC <- with(dat, data.frame(id = 1:nrow(dat),
+                             x = factor(HCC_studyGr),
+                             AFP = log(AFP_ng_per_ml),
+                             PIV = log(PIVKA_delete_range),
+                             OPN = log(OPN),
+                             DKK = log(DKK)))
> ### limits of detection
> PIVm <- max(HCC$PIV)
> AFPm <- max(HCC$AFP)
> 
> ### marginal location-scale models
> mDKK <- BoxCox(
+     DKK ~                               ### probit, h(DKK) via Bernstein
+     x                                   ### location non-HCC / HCC
+     | x,                                ### scale non-HCC / HCC
+     data = HCC)
> mOPN <- BoxCox(OPN ~ x | x, data = HCC)
> HCC$PIVi <- with(HCC, R(       
+     Surv(PIV, event = PIV < PIVm),      ### right censoring
+     as.R.interval = TRUE))              ### empirical likelihood
> mPIV <- BoxCox(PIVi ~
+     x | x,                              ### location-scale
+     data = HCC)
> HCC$AFPi <- with(HCC, R(       
+     Surv(AFP, event = AFP < AFPm),      ### right censoring
+     as.R.interval = TRUE))              ### empirical likelihood
> mAFP <- BoxCox(AFPi ~ x | x,  data = HCC)
> 
> ### joint estimation of marginal and Gaussian copula parameters, s = 2
> ### location-scale transformation discriminant analysis
> m <- Mmlt(mDKK, mOPN, mPIV, mAFP, data = HCC)
> logLik(m)
'log Lik.' -5281.831 (df=42)
> ### marginal parameters
> coef(m, type = "marginal")
$DKK
DKK.Bs1(DKK) DKK.Bs2(DKK) DKK.Bs3(DKK) DKK.Bs4(DKK) DKK.Bs5(DKK) DKK.Bs6(DKK) 
 -1.09527946  -0.76241849   0.03964703   0.45283461   0.86880373   1.57502179 
DKK.Bs7(DKK)       DKK.x1   DKK.scl_x1 
  1.89747849   0.54925428  -0.50870556 

$OPN
OPN.Bs1(OPN) OPN.Bs2(OPN) OPN.Bs3(OPN) OPN.Bs4(OPN) OPN.Bs5(OPN) OPN.Bs6(OPN) 
  -1.2042978   -0.6044946    1.4183316    1.4183317    1.4627036    1.9719934 
OPN.Bs7(OPN)       OPN.x1   OPN.scl_x1 
   2.2392217    0.4540269   -0.9789749 

$PIVi
PIVi.Bs1(PIVi) PIVi.Bs2(PIVi) PIVi.Bs3(PIVi) PIVi.Bs4(PIVi) PIVi.Bs5(PIVi) 
   -0.95130565    -0.18367458     0.08167941     1.77136317     1.77136318 
PIVi.Bs6(PIVi) PIVi.Bs7(PIVi)        PIVi.x1    PIVi.scl_x1 
    2.17346800     2.55726763     0.88612356    -0.65538422 

$AFPi
AFPi.Bs1(AFPi) AFPi.Bs2(AFPi) AFPi.Bs3(AFPi) AFPi.Bs4(AFPi) AFPi.Bs5(AFPi) 
    -0.7747882      0.4370910      1.4284506      1.5923273      2.7584251 
AFPi.Bs6(AFPi) AFPi.Bs7(AFPi)        AFPi.x1    AFPi.scl_x1 
     2.7584251      3.1569905      1.0723484     -0.7534839 

> ### copula parameter: Lambda
> coef(m, type = "Lambdapar")
, , 1

             DKK        OPN      PIVi AFPi
DKK   1.00000000  0.0000000  0.000000    0
OPN  -0.10484137  1.0000000  0.000000    0
PIVi -0.30489652 -0.3237667  1.000000    0
AFPi  0.03576815 -0.1798486 -1.329335    1

> ### standard errors for all parameters
> sqrt(diag(vcov(m)))
         DKK.Bs1(DKK)          DKK.Bs2(DKK)          DKK.Bs3(DKK) 
           0.10220525            0.11359599            0.30083918 
         DKK.Bs4(DKK)          DKK.Bs5(DKK)          DKK.Bs6(DKK) 
           0.43034411            0.31454746            0.13508375 
         DKK.Bs7(DKK)                DKK.x1            DKK.scl_x1 
           0.13993379            0.09298937            0.15284476 
         OPN.Bs1(OPN)          OPN.Bs2(OPN)          OPN.Bs3(OPN) 
           0.09637052            0.10526533            0.14165255 
         OPN.Bs4(OPN)          OPN.Bs5(OPN)          OPN.Bs6(OPN) 
           0.14165255            0.26134767            0.16005631 
         OPN.Bs7(OPN)                OPN.x1            OPN.scl_x1 
           0.16526690            0.08648173            0.15382700 
       PIVi.Bs1(PIVi)        PIVi.Bs2(PIVi)        PIVi.Bs3(PIVi) 
           0.09300332            0.11802008            0.22020916 
       PIVi.Bs4(PIVi)        PIVi.Bs5(PIVi)        PIVi.Bs6(PIVi) 
           0.17504924            0.17504924            0.20676778 
       PIVi.Bs7(PIVi)               PIVi.x1           PIVi.scl_x1 
           0.21740312            0.09396043            0.15597366 
       AFPi.Bs1(AFPi)        AFPi.Bs2(AFPi)        AFPi.Bs3(AFPi) 
           0.08551109            0.13282214            0.34109243 
       AFPi.Bs4(AFPi)        AFPi.Bs5(AFPi)        AFPi.Bs6(AFPi) 
           0.40143161            0.23927600            0.23927600 
       AFPi.Bs7(AFPi)               AFPi.x1           AFPi.scl_x1 
           0.25450626            0.09621667            0.15402454 
  OPN.DKK.(Intercept)  PIVi.DKK.(Intercept)  PIVi.OPN.(Intercept) 
           0.05050893            0.05411981            0.05298288 
 AFPi.DKK.(Intercept)  AFPi.OPN.(Intercept) AFPi.PIVi.(Intercept) 
           0.05481943            0.05414795            0.09619953 
> 
> ### convex approximations
> ## pseudo
> mp <- Mmlt(mDKK, mOPN, mPIV, mAFP, data = HCC, fit = "pseudo")
> logLik(mp)
'log Lik.' -5310.02 (df=6)
> ## sequential
> ms <- Mmlt(mDKK, mOPN, mPIV, mAFP, data = HCC, fit = "sequential")
> logLik(ms)
'log Lik.' -5296.748 (df=12)
> ## ACS
> ma <- Mmlt(mDKK, mOPN, mPIV, mAFP, data = HCC, fit = "ACS", ACSiter = 1)
> logLik(ma)
'log Lik.' -5284.701 (df=6)
> 
> proc.time()
   user  system elapsed 
 98.494   0.123 100.387 
