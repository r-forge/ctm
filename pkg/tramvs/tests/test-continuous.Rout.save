
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Demo continuous / sparse
> 
> # Windows diffs...
> options(digits = 3)
> 
> set.seed(24101968)
> library(tramvs)
Loading required package: tram
Loading required package: mlt
Loading required package: basefun
Loading required package: variables
> library(abess)
> 
> N <- 1e2
> P <- 10
> nz <- 3
> beta <- rep(c(3, 0), c(nz, P - nz))
> X <- matrix(rnorm(N * P), nrow = N, ncol = P)
> Y <- 1 + X %*% beta + rnorm(N)
> 
> dat <- data.frame(y = Y, x = X)
> res <- tramvs(y ~ ., data = dat, modFUN = Lm)
  |                                                          |                                                  |   0%  |                                                          |=====                                             |  10%  |                                                          |==========                                        |  20%  |                                                          |===============                                   |  30%  |                                                          |====================                              |  40%  |                                                          |=========================                         |  50%  |                                                          |==============================                    |  60%  |                                                          |===================================               |  70%  |                                                          |========================================          |  80%  |                                                          |=============================================     |  90%  |                                                          |==================================================| 100%> res_abess <- abess(y ~ ., data = dat, family = "gaussian")
> 
> as(as.matrix(coef(res, as.lm = TRUE)), "sparseMatrix")
11 x 10 sparse Matrix of class "dgCMatrix"
   [[ suppressing 10 column names '1', '2', '3' ... ]]
                                                                               
(Intercept) 0.477 0.567 0.971 0.997 1.012 1.012 1.0310 1.0401  1.03929  1.04001
x.1         .     3.113 3.112 3.075 3.113 3.120 3.1198 3.1072  3.10746  3.10684
x.2         .     .     3.013 2.980 2.984 2.983 2.9660 2.9471  2.94667  2.94506
x.3         3.265 2.939 3.102 3.098 3.100 3.102 3.1047 3.1234  3.12328  3.12466
x.4         .     .     .     0.225 0.223 0.225 0.2233 0.2329  0.23314  0.23380
x.5         .     .     .     .     .     .     .      0.1357  0.13591  0.13653
x.6         .     .     .     .     .     .     .      .      -0.00771 -0.00846
x.7         .     .     .     .     .     0.045 0.0411 0.0452  0.04522  0.04472
x.8         .     .     .     .     0.212 0.224 0.2249 0.2305  0.23050  0.23007
x.9         .     .     .     .     .     .     .      .       .        0.00786
x.10        .     .     .     .     .     .     0.1036 0.1035  0.10239  0.10285
> coef(res_abess)[,-1]
11 x 10 sparse Matrix of class "dgCMatrix"
   [[ suppressing 10 column names '1', '2', '3' ... ]]
                                                                             
(intercept) 0.477 0.88 0.971 0.997 1.012 1.021 1.040 1.0401  1.03929  1.04001
x.1         .     .    3.112 3.075 3.113 3.100 3.100 3.1072  3.10746  3.10684
x.2         .     3.01 3.013 2.979 2.984 2.965 2.947 2.9471  2.94667  2.94506
x.3         3.265 3.43 3.102 3.098 3.100 3.119 3.121 3.1234  3.12328  3.12466
x.4         .     .    .     0.225 0.223 0.233 0.231 0.2329  0.23314  0.23381
x.5         .     .    .     .     .     0.135 0.135 0.1357  0.13591  0.13653
x.6         .     .    .     .     .     .     .     .      -0.00771 -0.00846
x.7         .     .    .     .     .     .     .     0.0452  0.04522  0.04472
x.8         .     .    .     .     0.212 0.217 0.218 0.2305  0.23050  0.23007
x.9         .     .    .     .     .     .     .     .       .        0.00786
x.10        .     .    .     .     .     .     0.105 0.1035  0.10239  0.10285
> 
> # S3 methods
> 
> print(res)

L0-penalized tram:

  Normal Linear Regression Model 

Call:
modFUN(formula = formula, data = data, fixed = fix0, theta = theta_init[!names(theta_init) %in% 
    I0])

Coefficients:
 x.1  x.2  x.3  x.4  x.5  x.6  x.7  x.8  x.9 x.10 
3.23 3.13 3.22 0.00 0.00 0.00 0.00 0.00 0.00 0.00 

Log-Likelihood:
 -138 (df = 5)


SIC:
 149 

Active set: x.1 x.2 x.3 

> summary(res)

L0-penalized tram:

  Normal Linear Regression Model 

Call:
modFUN(formula = formula, data = data, fixed = fix0, theta = theta_init[!names(theta_init) %in% 
    I0])

Coefficients:
 x.1  x.2  x.3  x.4  x.5  x.6  x.7  x.8  x.9 x.10 
3.23 3.13 3.22 0.00 0.00 0.00 0.00 0.00 0.00 0.00 

Log-Likelihood:
 -138 (df = 5)


SIC:
   supp SIC
1     1 292
2     2 264
3     3 149
4     4 150
5     5 152
6     6 155
7     7 158
8     8 160
9     9 164
10   10 167


Active set: x.1 x.2 x.3 

> plot(res, type = "b")
> plot(res, which = "path")
> logLik(res)
'log Lik.' -138 (df=5)
> SIC(res)
   supp SIC
1     1 292
2     2 264
3     3 149
4     4 150
5     5 152
6     6 155
7     7 158
8     8 160
9     9 164
10   10 167
> coef(res)
10 x 10 sparse Matrix of class "dgCMatrix"
   [[ suppressing 10 column names '1', '2', '3' ... ]]
                                                                        
x.1  .     0.985 3.23 3.269 3.365 3.3753 3.3972 3.4191  3.41948  3.41891
x.2  .     .     3.13 3.167 3.225 3.2272 3.2296 3.2429  3.24254  3.24088
x.3  0.751 0.930 3.22 3.293 3.351 3.3560 3.3807 3.4370  3.43688  3.43852
x.4  .     .     .    0.239 0.241 0.2433 0.2431 0.2563  0.25655  0.25729
x.5  .     .     .    .     .     .      .      0.1494  0.14956  0.15025
x.6  .     .     .    .     .     .      .      .      -0.00849 -0.00931
x.7  .     .     .    .     .     0.0487 0.0447 0.0498  0.04976  0.04921
x.8  .     .     .    .     0.229 0.2427 0.2449 0.2537  0.25365  0.25318
x.9  .     .     .    .     .     .      .      .       .        0.00865
x.10 .     .     .    .     .     .      0.1129 0.1139  0.11267  0.11318
> predict(res, which = "distribution", type = "trafo")
      1       2       3       4       5       6       7       8       9      10 
-0.2223 -0.1054  0.5808  0.9797 -0.3827 -1.8908 -0.6839 -0.4992  0.6545  0.9074 
     11      12      13      14      15      16      17      18      19      20 
 1.1546 -0.3863  0.6733 -0.0995 -0.7169  0.9729 -0.4451 -0.4210  1.0045 -0.3189 
     21      22      23      24      25      26      27      28      29      30 
 0.2293  0.2678  2.2800  0.2822 -0.7196 -1.1444 -1.5285 -1.2730 -1.3978 -1.1398 
     31      32      33      34      35      36      37      38      39      40 
-0.5210 -1.0675  0.5393  0.6962 -0.5859  0.8581 -0.8279  0.0272 -0.9404 -0.6439 
     41      42      43      44      45      46      47      48      49      50 
 0.8049  1.2972 -0.5442  0.2931  0.7853  1.5528 -0.0800  0.2076 -0.1379 -0.0954 
     51      52      53      54      55      56      57      58      59      60 
-0.4524  0.5035 -0.0565 -1.1502 -1.6105  0.8956 -1.0067  0.3125 -1.1137 -0.4221 
     61      62      63      64      65      66      67      68      69      70 
-0.1956 -0.4028 -0.8918 -0.4422 -0.7472  0.1974  1.0386 -1.3970  1.1756  0.3444 
     71      72      73      74      75      76      77      78      79      80 
-0.5429 -1.7211 -0.7405 -0.1451 -1.0045  0.4310  2.4353  2.3299 -0.5886 -1.8045 
     81      82      83      84      85      86      87      88      89      90 
-0.7612  1.4945  0.9001 -0.3901  0.6507 -0.0246  0.6914 -0.4016  2.7110  0.6589 
     91      92      93      94      95      96      97      98      99     100 
-0.1517  2.5989  2.0551  0.4720  0.2136  0.1115  0.6615 -0.5457 -1.9298 -0.4716 
> simulate(res)
  [1]   7.003       3.091      -6.150       0.119     -10.977      -2.618    
  [7]  -3.654      -1.017      -8.522      -4.834      -5.276       8.577    
 [13]   1.640      -3.457      -2.820      11.575       6.996      -2.872    
 [19]  -7.514       1.351      -1.129      -5.565       3.541      -3.435    
 [25]  -5.096       4.628      -2.759      -0.512       2.087      -6.271    
 [31]   7.220       1.346       8.766      -5.276      -0.506       6.730    
 [37]   8.259      -6.363       8.872      -1.466      12.833      -2.632    
 [43]   8.767       3.469       2.799      -5.933      -1.915       4.594    
 [49]   0.352      -3.881      -3.707      -8.693       5.185      -2.517    
 [55]  -4.968       4.989      -5.851      -8.323      -0.461      -3.123    
 [61]  -6.896      -8.356      13.151       0.752     -15.521      -1.375    
 [67]   1.703      -1.729     (13.9, Inf]   6.861       9.671       0.649    
 [73]  -2.229       5.024      -3.133      10.082      -3.493       5.084    
 [79]   2.001       3.067       7.059      -5.286      -8.013       2.944    
 [85]  -1.198      -2.529      -3.042      -2.342       1.409      -7.543    
 [91]   1.944      -5.546       2.909      -1.738       6.115       1.467    
 [97]   1.119      -0.142       5.530      -2.609    
> residuals(res)
  [1] -0.2223 -0.1054  0.5808  0.9797 -0.3827 -1.8908 -0.6839 -0.4992  0.6545
 [10]  0.9074  1.1546 -0.3863  0.6733 -0.0995 -0.7169  0.9729 -0.4451 -0.4210
 [19]  1.0045 -0.3189  0.2293  0.2678  2.2800  0.2822 -0.7196 -1.1444 -1.5285
 [28] -1.2730 -1.3978 -1.1398 -0.5210 -1.0675  0.5393  0.6962 -0.5859  0.8581
 [37] -0.8279  0.0272 -0.9404 -0.6439  0.8049  1.2972 -0.5442  0.2931  0.7853
 [46]  1.5528 -0.0800  0.2076 -0.1379 -0.0954 -0.4524  0.5035 -0.0565 -1.1502
 [55] -1.6105  0.8956 -1.0067  0.3125 -1.1137 -0.4221 -0.1956 -0.4028 -0.8918
 [64] -0.4422 -0.7472  0.1974  1.0386 -1.3970  1.1756  0.3444 -0.5429 -1.7211
 [73] -0.7405 -0.1451 -1.0045  0.4310  2.4353  2.3299 -0.5886 -1.8045 -0.7612
 [82]  1.4945  0.9001 -0.3901  0.6507 -0.0246  0.6914 -0.4016  2.7110  0.6589
 [91] -0.1517  2.5989  2.0551  0.4720  0.2136  0.1115  0.6615 -0.5457 -1.9298
[100] -0.4716
> 
> # Active set
> support(res)
[1] "x.1" "x.2" "x.3"
> 
> proc.time()
   user  system elapsed 
   5.40    0.04    5.43 
