
useDynLib("basefun")

import(variables)

import(Matrix)#, rBind, Diagonal, bdiag)
import(polynom)
importFrom(orthopolynom, legendre.polynomials)
importFrom(stats, variable.names, model.matrix, predict)

# exportPattern("^[^\\.]")

export(Bernstein_basis, as.basis, b, 
##       cyclic_basis,
##       intercept, 
##       intercept.default,
       log_basis, 
## mkgrid, 
##       nparm, 
       polynomial_basis,
       Legendre_basis, L2B, B2L)
##       support

S3method("as.basis", "formula")
S3method("mkgrid", "basis")
S3method("mkgrid", "bases")
S3method("c", "basis")
S3method("c", "bases")
S3method("as.vars", "basis")
S3method("as.vars", "bases")
S3method("nparm", "basis")
S3method("nparm", "box_bases")
S3method("nparm", "cbind_bases")
S3method("model.matrix", "Bernstein_basis")
S3method("model.matrix", "box_bases")
S3method("model.matrix", "cbind_bases")
S3method("model.matrix", "formula_basis")
S3method("model.matrix", "log_basis")
S3method("model.matrix", "polynomial_basis")
S3method("predict", "basis")
S3method("predict", "box_bases")
S3method("predict", "cbind_bases")
S3method("variable.names", "bases")
S3method("variable.names", "basis")
S3method("intercept", "default")
S3method("intercept", "box_bases")
S3method("intercept", "cbind_bases")
